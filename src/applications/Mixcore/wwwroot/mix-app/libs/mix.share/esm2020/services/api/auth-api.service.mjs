import { Injectable } from '@angular/core';
import { cryptoService, LocalStorageKeys, MixApiDict } from '@mix-spa/mix.lib';
import { BehaviorSubject, tap } from 'rxjs';
import { BaseApiService } from '../../bases/base-api.service';
import * as i0 from "@angular/core";
export class AuthApiService extends BaseApiService {
    constructor() {
        super(...arguments);
        this.user$ = new BehaviorSubject(null);
    }
    logout(callback) {
        localStorage.removeItem(LocalStorageKeys.ACCESS_TOKEN);
        localStorage.removeItem(LocalStorageKeys.REFRESH_TOKEN);
        localStorage.removeItem(LocalStorageKeys.TOKEN_TYPE);
        if (callback)
            callback();
    }
    login(loginData, apiEncryptKey) {
        const encrypted = cryptoService.encryptAES(JSON.stringify(loginData), apiEncryptKey);
        return this.post(MixApiDict.ShareApi.signInEndpoint, { message: encrypted }).pipe(tap((tokenInfo) => {
            if (tokenInfo && tokenInfo.info)
                this.user$.next(tokenInfo.info);
            localStorage.setItem(LocalStorageKeys.ACCESS_TOKEN, tokenInfo.accessToken);
            localStorage.setItem(LocalStorageKeys.REFRESH_TOKEN, tokenInfo.refreshToken);
            localStorage.setItem(LocalStorageKeys.TOKEN_TYPE, tokenInfo.tokenType);
        }));
    }
    fetchUserInfo() {
        return this.get(MixApiDict.ShareApi.getAccountProfileEndpoint);
    }
    get getAccessToken() {
        return localStorage.getItem(LocalStorageKeys.ACCESS_TOKEN);
    }
    get getTokenType() {
        return localStorage.getItem(LocalStorageKeys.TOKEN_TYPE);
    }
}
AuthApiService.ɵfac = /*@__PURE__*/ function () { let ɵAuthApiService_BaseFactory; return function AuthApiService_Factory(t) { return (ɵAuthApiService_BaseFactory || (ɵAuthApiService_BaseFactory = i0.ɵɵgetInheritedFactory(AuthApiService)))(t || AuthApiService); }; }();
AuthApiService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthApiService, factory: AuthApiService.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AuthApiService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], null, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC1hcGkuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL21peC5wb3J0YWwuYW5ndWxhci9saWJzL21peC5zaGFyZS9zcmMvc2VydmljZXMvYXBpL2F1dGgtYXBpLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsYUFBYSxFQUFFLGdCQUFnQixFQUFjLFVBQVUsRUFBNkIsTUFBTSxrQkFBa0IsQ0FBQztBQUN0SCxPQUFPLEVBQUUsZUFBZSxFQUFjLEdBQUcsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUV4RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sOEJBQThCLENBQUM7O0FBRzlELE1BQU0sT0FBTyxjQUFlLFNBQVEsY0FBYztJQURsRDs7UUFFUyxVQUFLLEdBQWlDLElBQUksZUFBZSxDQUFjLElBQUksQ0FBQyxDQUFDO0tBZ0NyRjtJQTlCUSxNQUFNLENBQUMsUUFBcUI7UUFDakMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUN2RCxZQUFZLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3hELFlBQVksQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDckQsSUFBSSxRQUFRO1lBQUUsUUFBUSxFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUVNLEtBQUssQ0FBQyxTQUFxQixFQUFFLGFBQXFCO1FBQ3ZELE1BQU0sU0FBUyxHQUFHLGFBQWEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUNyRixPQUFPLElBQUksQ0FBQyxJQUFJLENBQWlDLFVBQVUsQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUFFLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUMvRyxHQUFHLENBQUMsQ0FBQyxTQUFvQixFQUFFLEVBQUU7WUFDM0IsSUFBSSxTQUFTLElBQUksU0FBUyxDQUFDLElBQUk7Z0JBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2pFLFlBQVksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUMzRSxZQUFZLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLGFBQWEsRUFBRSxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDN0UsWUFBWSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3pFLENBQUMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0lBRU0sYUFBYTtRQUNsQixPQUFPLElBQUksQ0FBQyxHQUFHLENBQVcsVUFBVSxDQUFDLFFBQVEsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0lBQzNFLENBQUM7SUFFRCxJQUFXLGNBQWM7UUFDdkIsT0FBTyxZQUFZLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzdELENBQUM7SUFFRCxJQUFXLFlBQVk7UUFDckIsT0FBTyxZQUFZLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzNELENBQUM7OzhOQWhDVSxjQUFjLFNBQWQsY0FBYztvRUFBZCxjQUFjLFdBQWQsY0FBYyxtQkFERCxNQUFNO3VGQUNuQixjQUFjO2NBRDFCLFVBQVU7ZUFBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGNyeXB0b1NlcnZpY2UsIExvY2FsU3RvcmFnZUtleXMsIExvZ2luTW9kZWwsIE1peEFwaURpY3QsIFRva2VuSW5mbywgVXNlciwgVXNlckluZm8gfSBmcm9tICdAbWl4LXNwYS9taXgubGliJztcclxuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlLCB0YXAgfSBmcm9tICdyeGpzJztcclxuXHJcbmltcG9ydCB7IEJhc2VBcGlTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vYmFzZXMvYmFzZS1hcGkuc2VydmljZSc7XHJcblxyXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxyXG5leHBvcnQgY2xhc3MgQXV0aEFwaVNlcnZpY2UgZXh0ZW5kcyBCYXNlQXBpU2VydmljZSB7XHJcbiAgcHVibGljIHVzZXIkOiBCZWhhdmlvclN1YmplY3Q8VXNlciB8IG51bGw+ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxVc2VyIHwgbnVsbD4obnVsbCk7XHJcblxyXG4gIHB1YmxpYyBsb2dvdXQoY2FsbGJhY2s/OiAoKSA9PiB2b2lkKTogdm9pZCB7XHJcbiAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShMb2NhbFN0b3JhZ2VLZXlzLkFDQ0VTU19UT0tFTik7XHJcbiAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShMb2NhbFN0b3JhZ2VLZXlzLlJFRlJFU0hfVE9LRU4pO1xyXG4gICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oTG9jYWxTdG9yYWdlS2V5cy5UT0tFTl9UWVBFKTtcclxuICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBsb2dpbihsb2dpbkRhdGE6IExvZ2luTW9kZWwsIGFwaUVuY3J5cHRLZXk6IHN0cmluZyk6IE9ic2VydmFibGU8VG9rZW5JbmZvPiB7XHJcbiAgICBjb25zdCBlbmNyeXB0ZWQgPSBjcnlwdG9TZXJ2aWNlLmVuY3J5cHRBRVMoSlNPTi5zdHJpbmdpZnkobG9naW5EYXRhKSwgYXBpRW5jcnlwdEtleSk7XHJcbiAgICByZXR1cm4gdGhpcy5wb3N0PHsgbWVzc2FnZTogc3RyaW5nIH0sIFRva2VuSW5mbz4oTWl4QXBpRGljdC5TaGFyZUFwaS5zaWduSW5FbmRwb2ludCwgeyBtZXNzYWdlOiBlbmNyeXB0ZWQgfSkucGlwZShcclxuICAgICAgdGFwKCh0b2tlbkluZm86IFRva2VuSW5mbykgPT4ge1xyXG4gICAgICAgIGlmICh0b2tlbkluZm8gJiYgdG9rZW5JbmZvLmluZm8pIHRoaXMudXNlciQubmV4dCh0b2tlbkluZm8uaW5mbyk7XHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oTG9jYWxTdG9yYWdlS2V5cy5BQ0NFU1NfVE9LRU4sIHRva2VuSW5mby5hY2Nlc3NUb2tlbik7XHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oTG9jYWxTdG9yYWdlS2V5cy5SRUZSRVNIX1RPS0VOLCB0b2tlbkluZm8ucmVmcmVzaFRva2VuKTtcclxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShMb2NhbFN0b3JhZ2VLZXlzLlRPS0VOX1RZUEUsIHRva2VuSW5mby50b2tlblR5cGUpO1xyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBmZXRjaFVzZXJJbmZvKCk6IE9ic2VydmFibGU8VXNlckluZm8+IHtcclxuICAgIHJldHVybiB0aGlzLmdldDxVc2VySW5mbz4oTWl4QXBpRGljdC5TaGFyZUFwaS5nZXRBY2NvdW50UHJvZmlsZUVuZHBvaW50KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgZ2V0QWNjZXNzVG9rZW4oKTogc3RyaW5nIHwgbnVsbCB7XHJcbiAgICByZXR1cm4gbG9jYWxTdG9yYWdlLmdldEl0ZW0oTG9jYWxTdG9yYWdlS2V5cy5BQ0NFU1NfVE9LRU4pO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBnZXRUb2tlblR5cGUoKTogc3RyaW5nIHwgbnVsbCB7XHJcbiAgICByZXR1cm4gbG9jYWxTdG9yYWdlLmdldEl0ZW0oTG9jYWxTdG9yYWdlS2V5cy5UT0tFTl9UWVBFKTtcclxuICB9XHJcbn1cclxuIl19