import { Injectable } from '@angular/core';
import { MixApiDict } from '@mix-spa/mix.lib';
import { tap } from 'rxjs';
import { BaseApiService } from '../../bases/base-api.service';
import { AppEvent } from '../helper/app-event.service';
import * as i0 from "@angular/core";
export class MixPageApiService extends BaseApiService {
    getDefaultPageTemplate() {
        return this.get(MixApiDict.PageApi.getDefaultPageEndpoint);
    }
    getPages(request) {
        return this.get(MixApiDict.PageApi.getPageEndpoint, request);
    }
    deletePages(id) {
        return this.delete(MixApiDict.PageApi.deletePageEndpoint + id);
    }
    savePage(data) {
        return this.post(MixApiDict.PageApi.savePageEndpoint, data).pipe(tap(() => this.appEvent.notify(AppEvent.NewPageAdded)));
    }
}
MixPageApiService.ɵfac = /*@__PURE__*/ function () { let ɵMixPageApiService_BaseFactory; return function MixPageApiService_Factory(t) { return (ɵMixPageApiService_BaseFactory || (ɵMixPageApiService_BaseFactory = i0.ɵɵgetInheritedFactory(MixPageApiService)))(t || MixPageApiService); }; }();
MixPageApiService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: MixPageApiService, factory: MixPageApiService.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(MixPageApiService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], null, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWl4LXBhZ2UtYXBpLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9taXgucG9ydGFsLmFuZ3VsYXIvbGlicy9taXguc2hhcmUvc3JjL3NlcnZpY2VzL2FwaS9taXgtcGFnZS1hcGkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFDTCxVQUFVLEVBSVgsTUFBTSxrQkFBa0IsQ0FBQztBQUMxQixPQUFPLEVBQWMsR0FBRyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRXZDLE9BQU8sRUFBRSxjQUFjLEVBQW9CLE1BQU0sOEJBQThCLENBQUM7QUFDaEYsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLDZCQUE2QixDQUFDOztBQUd2RCxNQUFNLE9BQU8saUJBQWtCLFNBQVEsY0FBYztJQUM1QyxzQkFBc0I7UUFDM0IsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRU0sUUFBUSxDQUNiLE9BQStCO1FBRS9CLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FDYixVQUFVLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFDaEIsT0FBTyxDQUMxQixDQUFDO0lBQ0osQ0FBQztJQUVNLFdBQVcsQ0FBQyxFQUFVO1FBQzNCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLGtCQUFrQixHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ2pFLENBQUM7SUFFTSxRQUFRLENBQUMsSUFBd0I7UUFDdEMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUNkLFVBQVUsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQ25DLElBQUksQ0FDTCxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqRSxDQUFDOzs2T0F2QlUsaUJBQWlCLFNBQWpCLGlCQUFpQjt1RUFBakIsaUJBQWlCLFdBQWpCLGlCQUFpQixtQkFESixNQUFNO3VGQUNuQixpQkFBaUI7Y0FEN0IsVUFBVTtlQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtcclxuICBNaXhBcGlEaWN0LFxyXG4gIE1peFBhZ2VQb3J0YWxNb2RlbCxcclxuICBQYWdpbmF0aW9uUmVxdWVzdE1vZGVsLFxyXG4gIFBhZ2luYXRpb25SZXN1bHRNb2RlbFxyXG59IGZyb20gJ0BtaXgtc3BhL21peC5saWInO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCB0YXAgfSBmcm9tICdyeGpzJztcclxuXHJcbmltcG9ydCB7IEJhc2VBcGlTZXJ2aWNlLCBJSHR0cFBhcmFtT2JqZWN0IH0gZnJvbSAnLi4vLi4vYmFzZXMvYmFzZS1hcGkuc2VydmljZSc7XHJcbmltcG9ydCB7IEFwcEV2ZW50IH0gZnJvbSAnLi4vaGVscGVyL2FwcC1ldmVudC5zZXJ2aWNlJztcclxuXHJcbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXHJcbmV4cG9ydCBjbGFzcyBNaXhQYWdlQXBpU2VydmljZSBleHRlbmRzIEJhc2VBcGlTZXJ2aWNlIHtcclxuICBwdWJsaWMgZ2V0RGVmYXVsdFBhZ2VUZW1wbGF0ZSgpOiBPYnNlcnZhYmxlPE1peFBhZ2VQb3J0YWxNb2RlbD4ge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0KE1peEFwaURpY3QuUGFnZUFwaS5nZXREZWZhdWx0UGFnZUVuZHBvaW50KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRQYWdlcyhcclxuICAgIHJlcXVlc3Q6IFBhZ2luYXRpb25SZXF1ZXN0TW9kZWxcclxuICApOiBPYnNlcnZhYmxlPFBhZ2luYXRpb25SZXN1bHRNb2RlbDxNaXhQYWdlUG9ydGFsTW9kZWw+PiB7XHJcbiAgICByZXR1cm4gdGhpcy5nZXQ8UGFnaW5hdGlvblJlc3VsdE1vZGVsPE1peFBhZ2VQb3J0YWxNb2RlbD4+KFxyXG4gICAgICBNaXhBcGlEaWN0LlBhZ2VBcGkuZ2V0UGFnZUVuZHBvaW50LFxyXG4gICAgICA8SUh0dHBQYXJhbU9iamVjdD5yZXF1ZXN0XHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGRlbGV0ZVBhZ2VzKGlkOiBudW1iZXIpOiBPYnNlcnZhYmxlPHZvaWQ+IHtcclxuICAgIHJldHVybiB0aGlzLmRlbGV0ZShNaXhBcGlEaWN0LlBhZ2VBcGkuZGVsZXRlUGFnZUVuZHBvaW50ICsgaWQpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHNhdmVQYWdlKGRhdGE6IE1peFBhZ2VQb3J0YWxNb2RlbCk6IE9ic2VydmFibGU8dm9pZD4ge1xyXG4gICAgcmV0dXJuIHRoaXMucG9zdDxNaXhQYWdlUG9ydGFsTW9kZWwsIHZvaWQ+KFxyXG4gICAgICBNaXhBcGlEaWN0LlBhZ2VBcGkuc2F2ZVBhZ2VFbmRwb2ludCxcclxuICAgICAgZGF0YVxyXG4gICAgKS5waXBlKHRhcCgoKSA9PiB0aGlzLmFwcEV2ZW50Lm5vdGlmeShBcHBFdmVudC5OZXdQYWdlQWRkZWQpKSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==