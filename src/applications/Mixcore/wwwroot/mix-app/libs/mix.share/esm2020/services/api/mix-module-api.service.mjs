import { Injectable } from '@angular/core';
import { MixApiDict } from '@mix-spa/mix.lib';
import { tap } from 'rxjs';
import { BaseApiService } from '../../bases';
import { AppEvent } from '../helper/app-event.service';
import * as i0 from "@angular/core";
export class MixModuleApiService extends BaseApiService {
    getDefaultModuleTemplate() {
        return this.get(MixApiDict.ModuleApi.getDefaultModulePEndpoint);
    }
    getModules(request) {
        return this.get(MixApiDict.ModuleApi.getModuleEndpoint, request);
    }
    getModuleById(id) {
        return this.get(MixApiDict.ModuleApi.getModuleById.replace('{id}', id.toString()));
    }
    saveModule(data) {
        return this.post(MixApiDict.ModuleApi.saveModuleEndpoint, data).pipe(tap(() => this.appEvent.notify(AppEvent.NewModuleAdded)));
    }
    deleteModules(id) {
        return this.delete(MixApiDict.ModuleApi.deleteModuleEndpoint + id);
    }
}
MixModuleApiService.ɵfac = /*@__PURE__*/ function () { let ɵMixModuleApiService_BaseFactory; return function MixModuleApiService_Factory(t) { return (ɵMixModuleApiService_BaseFactory || (ɵMixModuleApiService_BaseFactory = i0.ɵɵgetInheritedFactory(MixModuleApiService)))(t || MixModuleApiService); }; }();
MixModuleApiService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: MixModuleApiService, factory: MixModuleApiService.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(MixModuleApiService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], null, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWl4LW1vZHVsZS1hcGkuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL21peC5wb3J0YWwuYW5ndWxhci9saWJzL21peC5zaGFyZS9zcmMvc2VydmljZXMvYXBpL21peC1tb2R1bGUtYXBpLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQ0wsVUFBVSxFQUlYLE1BQU0sa0JBQWtCLENBQUM7QUFDMUIsT0FBTyxFQUFjLEdBQUcsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUV2QyxPQUFPLEVBQUUsY0FBYyxFQUFvQixNQUFNLGFBQWEsQ0FBQztBQUMvRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7O0FBR3ZELE1BQU0sT0FBTyxtQkFBb0IsU0FBUSxjQUFjO0lBQzlDLHdCQUF3QjtRQUM3QixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFFTSxVQUFVLENBQ2YsT0FBK0I7UUFFL0IsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUNiLFVBQVUsQ0FBQyxTQUFTLENBQUMsaUJBQWlCLEVBQ3BCLE9BQU8sQ0FDMUIsQ0FBQztJQUNKLENBQUM7SUFFTSxhQUFhLENBQUMsRUFBVTtRQUM3QixPQUFPLElBQUksQ0FBQyxHQUFHLENBQ2IsVUFBVSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FDbEUsQ0FBQztJQUNKLENBQUM7SUFFTSxVQUFVLENBQUMsSUFBMEI7UUFDMUMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUNkLFVBQVUsQ0FBQyxTQUFTLENBQUMsa0JBQWtCLEVBQ3ZDLElBQUksQ0FDTCxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBRU0sYUFBYSxDQUFDLEVBQVU7UUFDN0IsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsb0JBQW9CLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDckUsQ0FBQzs7dVBBN0JVLG1CQUFtQixTQUFuQixtQkFBbUI7eUVBQW5CLG1CQUFtQixXQUFuQixtQkFBbUIsbUJBRE4sTUFBTTt1RkFDbkIsbUJBQW1CO2NBRC9CLFVBQVU7ZUFBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7XHJcbiAgTWl4QXBpRGljdCxcclxuICBNaXhNb2R1bGVQb3J0YWxNb2RlbCxcclxuICBQYWdpbmF0aW9uUmVxdWVzdE1vZGVsLFxyXG4gIFBhZ2luYXRpb25SZXN1bHRNb2RlbFxyXG59IGZyb20gJ0BtaXgtc3BhL21peC5saWInO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCB0YXAgfSBmcm9tICdyeGpzJztcclxuXHJcbmltcG9ydCB7IEJhc2VBcGlTZXJ2aWNlLCBJSHR0cFBhcmFtT2JqZWN0IH0gZnJvbSAnLi4vLi4vYmFzZXMnO1xyXG5pbXBvcnQgeyBBcHBFdmVudCB9IGZyb20gJy4uL2hlbHBlci9hcHAtZXZlbnQuc2VydmljZSc7XHJcblxyXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxyXG5leHBvcnQgY2xhc3MgTWl4TW9kdWxlQXBpU2VydmljZSBleHRlbmRzIEJhc2VBcGlTZXJ2aWNlIHtcclxuICBwdWJsaWMgZ2V0RGVmYXVsdE1vZHVsZVRlbXBsYXRlKCk6IE9ic2VydmFibGU8TWl4TW9kdWxlUG9ydGFsTW9kZWw+IHtcclxuICAgIHJldHVybiB0aGlzLmdldChNaXhBcGlEaWN0Lk1vZHVsZUFwaS5nZXREZWZhdWx0TW9kdWxlUEVuZHBvaW50KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRNb2R1bGVzKFxyXG4gICAgcmVxdWVzdDogUGFnaW5hdGlvblJlcXVlc3RNb2RlbFxyXG4gICk6IE9ic2VydmFibGU8UGFnaW5hdGlvblJlc3VsdE1vZGVsPE1peE1vZHVsZVBvcnRhbE1vZGVsPj4ge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0PFBhZ2luYXRpb25SZXN1bHRNb2RlbDxNaXhNb2R1bGVQb3J0YWxNb2RlbD4+KFxyXG4gICAgICBNaXhBcGlEaWN0Lk1vZHVsZUFwaS5nZXRNb2R1bGVFbmRwb2ludCxcclxuICAgICAgPElIdHRwUGFyYW1PYmplY3Q+cmVxdWVzdFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRNb2R1bGVCeUlkKGlkOiBudW1iZXIpOiBPYnNlcnZhYmxlPE1peE1vZHVsZVBvcnRhbE1vZGVsPiB7XHJcbiAgICByZXR1cm4gdGhpcy5nZXQ8TWl4TW9kdWxlUG9ydGFsTW9kZWw+KFxyXG4gICAgICBNaXhBcGlEaWN0Lk1vZHVsZUFwaS5nZXRNb2R1bGVCeUlkLnJlcGxhY2UoJ3tpZH0nLCBpZC50b1N0cmluZygpKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzYXZlTW9kdWxlKGRhdGE6IE1peE1vZHVsZVBvcnRhbE1vZGVsKTogT2JzZXJ2YWJsZTx2b2lkPiB7XHJcbiAgICByZXR1cm4gdGhpcy5wb3N0PE1peE1vZHVsZVBvcnRhbE1vZGVsLCB2b2lkPihcclxuICAgICAgTWl4QXBpRGljdC5Nb2R1bGVBcGkuc2F2ZU1vZHVsZUVuZHBvaW50LFxyXG4gICAgICBkYXRhXHJcbiAgICApLnBpcGUodGFwKCgpID0+IHRoaXMuYXBwRXZlbnQubm90aWZ5KEFwcEV2ZW50Lk5ld01vZHVsZUFkZGVkKSkpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGRlbGV0ZU1vZHVsZXMoaWQ6IG51bWJlcik6IE9ic2VydmFibGU8dm9pZD4ge1xyXG4gICAgcmV0dXJuIHRoaXMuZGVsZXRlKE1peEFwaURpY3QuTW9kdWxlQXBpLmRlbGV0ZU1vZHVsZUVuZHBvaW50ICsgaWQpO1xyXG4gIH1cclxufVxyXG4iXX0=