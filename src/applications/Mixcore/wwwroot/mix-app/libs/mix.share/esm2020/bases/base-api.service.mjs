import { HttpClient, HttpParams } from '@angular/common/http';
import { Inject, Injectable } from '@angular/core';
import { catchError, retry, throwError } from 'rxjs';
import { AppEventService } from '../services';
import { BASE_URL } from '../token';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../services";
export class BaseApiService {
    constructor(http, baseUrl, appEvent) {
        this.http = http;
        this.baseUrl = baseUrl;
        this.appEvent = appEvent;
    }
    get url() {
        return this.baseUrl;
    }
    get(path, params) {
        return this.http
            .get(this.url + path, this.getHttpOptions(params))
            .pipe(retry(1), catchError(this.handleError));
    }
    post(path, request, params) {
        return this.http
            .post(this.url + path, request, this.getHttpOptions(params))
            .pipe(catchError(this.handleError));
    }
    put(path, request, params) {
        return this.http
            .put(this.url + path, { data: request }, this.getHttpOptions(params))
            .pipe(catchError(this.handleError));
    }
    delete(path, params) {
        return this.http
            .delete(this.url + path, this.getHttpOptions(params))
            .pipe(catchError(this.handleError));
    }
    getHttpOptions(customParams) {
        let params = new HttpParams();
        if (customParams) {
            params = new HttpParams({
                fromObject: customParams
            });
        }
        return { params, headers: { 'Content-Type': 'application/json' } };
    }
    handleError(error) {
        return throwError(() => error);
    }
}
BaseApiService.ɵfac = function BaseApiService_Factory(t) { return new (t || BaseApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(BASE_URL), i0.ɵɵinject(i2.AppEventService)); };
BaseApiService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: BaseApiService, factory: BaseApiService.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(BaseApiService, [{
        type: Injectable
    }], function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                type: Inject,
                args: [BASE_URL]
            }] }, { type: i2.AppEventService }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1hcGkuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL21peC5wb3J0YWwuYW5ndWxhci9saWJzL21peC5zaGFyZS9zcmMvYmFzZXMvYmFzZS1hcGkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsVUFBVSxFQUdWLFVBQVUsRUFDWCxNQUFNLHNCQUFzQixDQUFDO0FBQzlCLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxVQUFVLEVBQWMsS0FBSyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUVqRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzlDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxVQUFVLENBQUM7Ozs7QUF5Q3BDLE1BQU0sT0FBTyxjQUFjO0lBS3pCLFlBQ3FCLElBQWdCLEVBQ1YsT0FBZSxFQUNqQyxRQUF5QjtRQUZiLFNBQUksR0FBSixJQUFJLENBQVk7UUFDVixZQUFPLEdBQVAsT0FBTyxDQUFRO1FBQ2pDLGFBQVEsR0FBUixRQUFRLENBQWlCO0lBQy9CLENBQUM7SUFSSixJQUFjLEdBQUc7UUFDZixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQztJQVFNLEdBQUcsQ0FDUixJQUFZLEVBQ1osTUFBeUI7UUFFekIsT0FBTyxJQUFJLENBQUMsSUFBSTthQUNiLEdBQUcsQ0FBVSxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQzFELElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFTSxJQUFJLENBQ1QsSUFBWSxFQUNaLE9BQWlCLEVBQ2pCLE1BQXNDO1FBRXRDLE9BQU8sSUFBSSxDQUFDLElBQUk7YUFDYixJQUFJLENBQVUsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDcEUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBRU0sR0FBRyxDQUNSLElBQVksRUFDWixPQUFpQixFQUNqQixNQUFzQztRQUV0QyxPQUFPLElBQUksQ0FBQyxJQUFJO2FBQ2IsR0FBRyxDQUNGLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxFQUNmLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxFQUNqQixJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUM1QjthQUNBLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVNLE1BQU0sQ0FDWCxJQUFZLEVBQ1osTUFBc0M7UUFFdEMsT0FBTyxJQUFJLENBQUMsSUFBSTthQUNiLE1BQU0sQ0FBVSxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQzdELElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVPLGNBQWMsQ0FDcEIsWUFBNEM7UUFFNUMsSUFBSSxNQUFNLEdBQWUsSUFBSSxVQUFVLEVBQUUsQ0FBQztRQUUxQyxJQUFJLFlBQVksRUFBRTtZQUNoQixNQUFNLEdBQUcsSUFBSSxVQUFVLENBQUM7Z0JBQ3RCLFVBQVUsRUFBRSxZQUEyQzthQUN4RCxDQUFDLENBQUM7U0FDSjtRQUVELE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLEVBQUUsY0FBYyxFQUFFLGtCQUFrQixFQUFFLEVBQUUsQ0FBQztJQUNyRSxDQUFDO0lBRU8sV0FBVyxDQUFDLEtBQVk7UUFDOUIsT0FBTyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDakMsQ0FBQzs7NEVBckVVLGNBQWMsMENBT2YsUUFBUTtvRUFQUCxjQUFjLFdBQWQsY0FBYzt1RkFBZCxjQUFjO2NBRDFCLFVBQVU7O3NCQVFOLE1BQU07dUJBQUMsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgSHR0cENsaWVudCxcclxuICBIdHRwQ29udGV4dCxcclxuICBIdHRwSGVhZGVycyxcclxuICBIdHRwUGFyYW1zXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgY2F0Y2hFcnJvciwgT2JzZXJ2YWJsZSwgcmV0cnksIHRocm93RXJyb3IgfSBmcm9tICdyeGpzJztcclxuXHJcbmltcG9ydCB7IEFwcEV2ZW50U2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzJztcclxuaW1wb3J0IHsgQkFTRV9VUkwgfSBmcm9tICcuLi90b2tlbic7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElIdHRwUGFyYW1PYmplY3Qge1xyXG4gIFtwYXJhbTogc3RyaW5nXTpcclxuICAgIHwgc3RyaW5nXHJcbiAgICB8IG51bWJlclxyXG4gICAgfCBib29sZWFuXHJcbiAgICB8IFJlYWRvbmx5QXJyYXk8c3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhbj47XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUh0dHBIZWFkZXJzT2JqZWN0IHtcclxuICBbaGVhZGVyOiBzdHJpbmddOiBzdHJpbmcgfCBzdHJpbmdbXTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJSHR0cE9wdGlvbnMge1xyXG4gIGhlYWRlcnM/OiBIdHRwSGVhZGVycyB8IElIdHRwSGVhZGVyc09iamVjdDtcclxuICBjb250ZXh0PzogSHR0cENvbnRleHQ7XHJcbiAgb2JzZXJ2ZT86ICdib2R5JztcclxuICBwYXJhbXM/OiBIdHRwUGFyYW1zIHwgSUh0dHBQYXJhbU9iamVjdDtcclxuICByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW47XHJcbiAgcmVzcG9uc2VUeXBlPzogJ2pzb24nO1xyXG4gIHdpdGhDcmVkZW50aWFscz86IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUdldFdpdGhQYWdpbmF0aW9uUmVxdWVzdCB7XHJcbiAgc2VhcmNoVGV4dD86IHN0cmluZztcclxuICBzZWFyY2hJZD86IHN0cmluZztcclxuICBza2lwQ291bnQ/OiBudW1iZXI7XHJcbiAgbWF4UmVzdWx0Q291bnQ/OiBudW1iZXI7XHJcbiAgaGFuZGxlQXVkaXRlZFRyYWNrSWQ/OiBzdHJpbmc7XHJcbiAgaGFuZGxlQXVkaXRlZERhdGU/OiBzdHJpbmc7XHJcbiAgaGFuZGxlQXVkaXRlZEJ5VXNlcklkPzogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElHZXRXaXRoUGFnaW5hdGlvblJlc3VsdDxUPiB7XHJcbiAgaXRlbXM6IFRbXTtcclxuICB0b3RhbENvdW50OiBudW1iZXI7XHJcbiAgcGFnZVNpemU6IG51bWJlcjtcclxufVxyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQmFzZUFwaVNlcnZpY2Uge1xyXG4gIHByb3RlY3RlZCBnZXQgdXJsKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5iYXNlVXJsO1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgaHR0cDogSHR0cENsaWVudCxcclxuICAgIEBJbmplY3QoQkFTRV9VUkwpIHB1YmxpYyBiYXNlVXJsOiBzdHJpbmcsXHJcbiAgICBwdWJsaWMgYXBwRXZlbnQ6IEFwcEV2ZW50U2VydmljZVxyXG4gICkge31cclxuXHJcbiAgcHVibGljIGdldDxUUmVzdWx0PihcclxuICAgIHBhdGg6IHN0cmluZyxcclxuICAgIHBhcmFtcz86IElIdHRwUGFyYW1PYmplY3RcclxuICApOiBPYnNlcnZhYmxlPFRSZXN1bHQ+IHtcclxuICAgIHJldHVybiB0aGlzLmh0dHBcclxuICAgICAgLmdldDxUUmVzdWx0Pih0aGlzLnVybCArIHBhdGgsIHRoaXMuZ2V0SHR0cE9wdGlvbnMocGFyYW1zKSlcclxuICAgICAgLnBpcGUocmV0cnkoMSksIGNhdGNoRXJyb3IodGhpcy5oYW5kbGVFcnJvcikpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHBvc3Q8VFJlcXVlc3QsIFRSZXN1bHQ+KFxyXG4gICAgcGF0aDogc3RyaW5nLFxyXG4gICAgcmVxdWVzdDogVFJlcXVlc3QsXHJcbiAgICBwYXJhbXM/OiBIdHRwUGFyYW1zIHwgSUh0dHBQYXJhbU9iamVjdFxyXG4gICk6IE9ic2VydmFibGU8VFJlc3VsdD4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cFxyXG4gICAgICAucG9zdDxUUmVzdWx0Pih0aGlzLnVybCArIHBhdGgsIHJlcXVlc3QsIHRoaXMuZ2V0SHR0cE9wdGlvbnMocGFyYW1zKSlcclxuICAgICAgLnBpcGUoY2F0Y2hFcnJvcih0aGlzLmhhbmRsZUVycm9yKSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcHV0PFRSZXF1ZXN0LCBUUmVzdWx0PihcclxuICAgIHBhdGg6IHN0cmluZyxcclxuICAgIHJlcXVlc3Q6IFRSZXF1ZXN0LFxyXG4gICAgcGFyYW1zPzogSHR0cFBhcmFtcyB8IElIdHRwUGFyYW1PYmplY3RcclxuICApOiBPYnNlcnZhYmxlPFRSZXN1bHQ+IHtcclxuICAgIHJldHVybiB0aGlzLmh0dHBcclxuICAgICAgLnB1dDxUUmVzdWx0PihcclxuICAgICAgICB0aGlzLnVybCArIHBhdGgsXHJcbiAgICAgICAgeyBkYXRhOiByZXF1ZXN0IH0sXHJcbiAgICAgICAgdGhpcy5nZXRIdHRwT3B0aW9ucyhwYXJhbXMpXHJcbiAgICAgIClcclxuICAgICAgLnBpcGUoY2F0Y2hFcnJvcih0aGlzLmhhbmRsZUVycm9yKSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZGVsZXRlPFRSZXN1bHQ+KFxyXG4gICAgcGF0aDogc3RyaW5nLFxyXG4gICAgcGFyYW1zPzogSHR0cFBhcmFtcyB8IElIdHRwUGFyYW1PYmplY3RcclxuICApOiBPYnNlcnZhYmxlPFRSZXN1bHQ+IHtcclxuICAgIHJldHVybiB0aGlzLmh0dHBcclxuICAgICAgLmRlbGV0ZTxUUmVzdWx0Pih0aGlzLnVybCArIHBhdGgsIHRoaXMuZ2V0SHR0cE9wdGlvbnMocGFyYW1zKSlcclxuICAgICAgLnBpcGUoY2F0Y2hFcnJvcih0aGlzLmhhbmRsZUVycm9yKSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldEh0dHBPcHRpb25zKFxyXG4gICAgY3VzdG9tUGFyYW1zPzogSHR0cFBhcmFtcyB8IElIdHRwUGFyYW1PYmplY3RcclxuICApOiBJSHR0cE9wdGlvbnMge1xyXG4gICAgbGV0IHBhcmFtczogSHR0cFBhcmFtcyA9IG5ldyBIdHRwUGFyYW1zKCk7XHJcblxyXG4gICAgaWYgKGN1c3RvbVBhcmFtcykge1xyXG4gICAgICBwYXJhbXMgPSBuZXcgSHR0cFBhcmFtcyh7XHJcbiAgICAgICAgZnJvbU9iamVjdDogY3VzdG9tUGFyYW1zIGFzIHVua25vd24gYXMgSUh0dHBQYXJhbU9iamVjdFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4geyBwYXJhbXMsIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9IH07XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGhhbmRsZUVycm9yKGVycm9yOiBFcnJvcikge1xyXG4gICAgcmV0dXJuIHRocm93RXJyb3IoKCkgPT4gZXJyb3IpO1xyXG4gIH1cclxufVxyXG4iXX0=