import { CdkDragMove, DropListRef } from '@angular/cdk/drag-drop';
import { AfterContentInit, ElementRef, EventEmitter, OnInit, QueryList } from '@angular/core';
import { PaginationRequestModel, PaginationResultModel } from '@mix-spa/mix.lib';
import { TuiArrowComponent } from '@taiga-ui/kit';
import { PolymorpheusComponent } from '@tinkoff/ng-polymorpheus';
import { BehaviorSubject, Observable, Subject } from 'rxjs';
import { TableColumnDirective } from './directives/column.directive';
import * as i0 from "@angular/core";
export declare class MixDataTableComponent<T> implements AfterContentInit, OnInit {
    private elementRef;
    currentSelectedItem: T[];
    cacheItems: T[];
    currentPage: number;
    isAllSelected: boolean;
    selfControl: boolean;
    fetchDataFn: (filter: PaginationRequestModel) => Observable<PaginationResultModel<T>>;
    data$: Observable<PaginationResultModel<T>>;
    loading$: BehaviorSubject<boolean>;
    search: string;
    searchPlaceholder: string;
    totalRows: number;
    searchable: boolean;
    reOrderable: boolean;
    dataIndexKey: string;
    searchColumns: string;
    pageChange: EventEmitter<number>;
    pageSizeChange: EventEmitter<number>;
    tableQueryChange: EventEmitter<PaginationRequestModel>;
    itemsSelectedChange: EventEmitter<T[]>;
    subDropList: DropListRef;
    dropList: DropListRef;
    columns: QueryList<TableColumnDirective>;
    tableInitialColumns: string[];
    tableColumns: string[];
    subTableColumns: string[];
    tableEnabledColumns: string[];
    tableSortFields: readonly string[];
    columnDic: Record<string, string>;
    showSubTable: boolean;
    readonly showDragLeft: BehaviorSubject<boolean>;
    readonly showDragRight: BehaviorSubject<boolean>;
    readonly arrow: PolymorpheusComponent<TuiArrowComponent, object>;
    readonly searchText$: BehaviorSubject<string>;
    readonly size$: Subject<number>;
    readonly page$: Subject<number>;
    readonly dragChange: Subject<number>;
    readonly direction$: BehaviorSubject<1 | -1>;
    readonly reload$: BehaviorSubject<boolean>;
    readonly emptyData: PaginationResultModel<T>;
    request$: Observable<[string, 1 | -1, number, number, boolean]>;
    constructor(elementRef: ElementRef);
    ngOnInit(): void;
    handleDragAndDrop(): void;
    isItemSelected(item: T): boolean;
    ngAfterContentInit(): void;
    onEnabled(enabled: readonly string[]): void;
    onPageChange(page: number): void;
    onSizeChange(size: number): void;
    onItemSelected(value: boolean, item: T): void;
    markAllChecked(value: boolean): void;
    getNavigationLength(totalCount: number, pageSize: number): number;
    reloadData(): void;
    onDragItem(event: CdkDragMove): void;
    onReleaseDragItem(): void;
    private _processSelfFetchData;
    private _showLoading;
    private _hideLoading;
    private _buildColumnDictionary;
    private _setupSelfControl;
    static ɵfac: i0.ɵɵFactoryDeclaration<MixDataTableComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MixDataTableComponent<any>, "mix-data-table", never, { "selfControl": "selfControl"; "fetchDataFn": "fetchDataFn"; "data$": "data$"; "loading$": "loading$"; "search": "search"; "searchPlaceholder": "searchPlaceholder"; "totalRows": "totalRows"; "searchable": "searchable"; "reOrderable": "reOrderable"; "dataIndexKey": "dataIndexKey"; "searchColumns": "searchColumns"; }, { "pageChange": "pageChange"; "pageSizeChange": "pageSizeChange"; "tableQueryChange": "tableQueryChange"; "itemsSelectedChange": "itemsSelectedChange"; }, ["columns"], never, false>;
}
