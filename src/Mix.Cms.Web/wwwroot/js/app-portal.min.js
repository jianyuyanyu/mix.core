'use strict';
var app = angular.module('MixPortal', ['ngRoute', 'components', 'ngFileUpload', 'LocalStorageModule',
    'bw.paging', 'dndLists', 'ngTagsInput', 'ngSanitize']);
var modules = angular.module('components', []);
'use strict';
app.controller('AppPortalController', ['$rootScope', '$scope', 'ngAppSettings', '$location'
    , 'CommonService', 'AuthService', 'TranslatorService', 'GlobalSettingsService', 'RoleService',
    function ($rootScope, $scope, ngAppSettings, $location
        , commonService, authService, translatorService, globalSettingsService, roleServices) {
        $scope.isInit = false;
        $scope.pageTagName = '';
        $scope.pageTagTypeName = '';
        $scope.pageTagType = 0;
        $scope.isAdmin = false;
        $scope.translator = translatorService;
        $rootScope.globalSettingsService = globalSettingsService;
        $scope.lang = null;
        $scope.settings = {};
        $scope.portalThemeSettings = {};
        $scope.init = function () {
            if (!$rootScope.isBusy) {
                $rootScope.isBusy = true;
                commonService.fillAllSettings($scope.lang).then(function (response) {
                    if ($rootScope.globalSettings) {
                        $scope.portalThemeSettings = $rootScope.globalSettings.portalThemeSettings;
                        authService.fillAuthData().then(function (response) {
                            $rootScope.authentication = authService.authentication;
                            if (authService.authentication && authService.authentication.isAuth) {
                                $scope.isAdmin = authService.authentication.isAdmin;
                                if (!$scope.isAdmin) {

                                    roleServices.getPermissions().then(function (response) {

                                        if (response && response.isSucceed) {

                                            $scope.isInit = true;
                                            $rootScope.isInit = true;
                                            $scope.roles = response.data;
                                            $rootScope.isBusy = false;
                                            // $scope.$apply();
                                        }
                                    });
                                }
                            }
                            else {
                                window.top.location.href = '/security/login';
                            }
                        });
                        $rootScope.isInit = true;
                        $scope.isInit = true;
                        $rootScope.isBusy = false;
                        // $scope.$apply();


                    } else {
                        window.top.location.href = '/security/login';
                    }
                });
            }
        };
        $scope.prettyJsonObj = function (obj) {
            return JSON.stringify(obj, null, '\t');
        }
        $scope.$on('$routeChangeStart', function ($event, next, current) {
            // ... you could trigger something here ...
            if(current && current.$$route){
                $rootScope.referrerUrl = current.$$route.originalPath;
                Object.keys(current.params).forEach(function(key,index) {
                    // key: the name of the object key
                    // index: the ordinal position of the key within the object 
                    $rootScope.referrerUrl = $rootScope.referrerUrl.replace(':' + key, current.params[key]);
                });
            }
            $scope.pageTagName = $location.$$path.toString().split('/')[2];
            $scope.pageTagTypeName = $location.$$path.toString().split('/')[3];
            if ($scope.pageTagTypeName == 'list') $scope.pageTagType = 1;
            if ($scope.pageTagTypeName == 'create') $scope.pageTagType = 2;
        });
        $rootScope.limString = function (str, max) {
            return str.substring(0, max);
        };
    }]);

app.config(function ($routeProvider, $locationProvider, $sceProvider) {
    $locationProvider.html5Mode(true);

    $routeProvider.when("/portal", {
        controller: "DashboardController",
        templateUrl: "/app/app-portal/pages/dashboard/dashboard.html"
    });


    $routeProvider.when("/portal/customer/details/:id", {
        controller: "CustomerController",
        templateUrl: "/app/app-portal/pages/customer/details.html"
    });

    $routeProvider.when("/portal/customer/list", {
        controller: "CustomerController",
        templateUrl: "/app/app-portal/pages/customer/list.html"
    });

    $routeProvider.when("/portal/product/list", {
        controller: "ProductController",
        templateUrl: "/app/app-portal/pages/product/list.html"
    });

    $routeProvider.when("/portal/product/details/:id", {
        controller: "ProductController",
        templateUrl: "/app/app-portal/pages/product/details.html"
    });

    $routeProvider.when("/portal/product/create", {
        controller: "ProductController",
        templateUrl: "/app/app-portal/pages/product/details.html"
    });
    $routeProvider.when("/portal/order/list", {
        controller: "OrderController",
        templateUrl: "/app/app-portal/pages/order/list.html"
    });

    $routeProvider.when("/portal/order/details/:id", {
        controller: "OrderController",
        templateUrl: "/app/app-portal/pages/order/details.html"
    });

    $routeProvider.when("/portal/order/create", {
        controller: "OrderController",
        templateUrl: "/app/app-portal/pages/order/details.html"
    });
    $routeProvider.when("/portal/article/list", {
        controller: "ArticleController",
        templateUrl: "/app/app-portal/pages/article/list.html"
    });

    $routeProvider.when("/portal/article/details/:id", {
        controller: "ArticleController",
        templateUrl: "/app/app-portal/pages/article/details.html"
    });
   
    $routeProvider.when("/portal/article/gallery-details/:id", {
        controller: "ArticleController",
        templateUrl: "/app/app-portal/pages/article/gallery-details.html"
    });
    $routeProvider.when("/portal/article/create-gallery", {
        controller: "ArticleController",
        templateUrl: "/app/app-portal/pages/article/gallery-details.html"
    });
    $routeProvider.when("/portal/article/create", {
        controller: "ArticleController",
        templateUrl: "/app/app-portal/pages/article/details.html"
    });

    $routeProvider.when("/portal/page/list", {
        controller: "PageController",
        templateUrl: "/app/app-portal/pages/page/list.html"
    });

    $routeProvider.when("/portal/page/details/:id", {
        controller: "PageController",
        templateUrl: "/app/app-portal/pages/page/details.html"
    });

    $routeProvider.when("/portal/permission/list", {
        controller: "PermissionController",
        templateUrl: "/app/app-portal/pages/permission/list.html"
    });

    $routeProvider.when("/portal/permission/create", {
        controller: "PermissionController",
        templateUrl: "/app/app-portal/pages/permission/details.html"
    });

    $routeProvider.when("/portal/permission/details/:id", {
        controller: "PermissionController",
        templateUrl: "/app/app-portal/pages/permission/details.html"
    });

    $routeProvider.when("/portal/page/page-article/list/:id", {
        controller: "PageArticleController",
        templateUrl: "/app/app-portal/pages/page-article/list.html"
    });
   
    $routeProvider.when("/portal/page/page-gallery/list/:id", {
        controller: "PageGalleryController",
        templateUrl: "/app/app-portal/pages/page-gallery/list.html"
    });

    $routeProvider.when("/portal/page/create", {
        controller: "PageController",
        templateUrl: "/app/app-portal/pages/page/details.html"
    });

    $routeProvider.when("/portal/module/list", {
        controller: "ModuleController",
        templateUrl: "/app/app-portal/pages/module/list.html"
    });

    $routeProvider.when("/portal/module/data/:id", {
        controller: "ModuleController",
        templateUrl: "/app/app-portal/pages/module/data.html"
    });

    $routeProvider.when("/portal/module-article/list/:id", {
        controller: "ModuleArticleController",
        templateUrl: "/app/app-portal/pages/module-article/list.html"
    });
   
    $routeProvider.when("/portal/module-gallery/list/:id", {
        controller: "ModuleGalleryController",
        templateUrl: "/app/app-portal/pages/module-gallery/list.html"
    });

    $routeProvider.when("/portal/module-data/details/:moduleId/:id", {
        controller: "SharedModuleDataController",
        templateUrl: "/app/app-portal/pages/moduleData/details.html"
    });

    $routeProvider.when("/portal/module-data/details/:moduleId", {
        controller: "SharedModuleDataController",
        templateUrl: "/app/app-portal/pages/moduleData/details.html"
    });

    $routeProvider.when("/portal/module/details/:id", {
        controller: "ModuleController",
        templateUrl: "/app/app-portal/pages/module/details.html"
    });
    
    $routeProvider.when("/portal/module-data/list/:moduleId", {
        controller: "ModuleDataController",
        templateUrl: "/app/app-portal/pages/module-data/list.html"
    });

    $routeProvider.when("/portal/module/create", {
        controller: "ModuleController",
        templateUrl: "/app/app-portal/pages/module/details.html"
    });

    $routeProvider.when("/portal/media/list", {
        controller: "MediaController",
        templateUrl: "/app/app-portal/pages/media/list.html"
    });

    $routeProvider.when("/portal/media/details/:id", {
        controller: "MediaController",
        templateUrl: "/app/app-portal/pages/media/details.html"
    });

    $routeProvider.when("/portal/media/create", {
        controller: "MediaController",
        templateUrl: "/app/app-portal/pages/media/details.html"
    });


    $routeProvider.when("/portal/localize/list", {
        controller: "LanguageController",
        templateUrl: "/app/app-portal/pages/language/list.html"
    });

    $routeProvider.when("/portal/localize/details/:id", {
        controller: "LanguageController",
        templateUrl: "/app/app-portal/pages/language/details.html"
    });

    $routeProvider.when("/portal/localize/create", {
        controller: "LanguageController",
        templateUrl: "/app/app-portal/pages/language/details.html"
    });
    /* attribute set */
    $routeProvider.when("/portal/attribute-set/list", {
        controller: "AttributeSetController",
        templateUrl: "/app/app-portal/pages/attribute-set/list.html"
    });

    $routeProvider.when("/portal/attribute-set/details/:id", {
        controller: "AttributeSetController",
        templateUrl: "/app/app-portal/pages/attribute-set/details.html"
    });

    $routeProvider.when("/portal/attribute-set/create", {
        controller: "AttributeSetController",
        templateUrl: "/app/app-portal/pages/attribute-set/details.html"
    });
    /* end attribute set*/

    $routeProvider.when("/portal/configuration/list", {
        controller: "ConfigurationController",
        templateUrl: "/app/app-portal/pages/configuration/list.html"
    });

    $routeProvider.when("/portal/configuration/details/:id", {
        controller: "ConfigurationController",
        templateUrl: "/app/app-portal/pages/configuration/details.html"
    });

    $routeProvider.when("/portal/configuration/create", {
        controller: "ConfigurationController",
        templateUrl: "/app/app-portal/pages/configuration/details.html"
    });

    $routeProvider.when("/portal/file/list", {
        controller: "FileController",
        templateUrl: "/app/app-portal/pages/file/list.html"
    });

    $routeProvider.when("/portal/file/details", {
        controller: "FileController",
        templateUrl: "/app/app-portal/pages/file/details.html"
    });

    $routeProvider.when("/portal/file/create", {
        controller: "FileController",
        templateUrl: "/app/app-portal/pages/file/details.html"
    });

    $routeProvider.when("/portal/theme/list", {
        controller: "ThemeController",
        templateUrl: "/app/app-portal/pages/theme/list.html"
    });

    $routeProvider.when("/portal/theme/details/:id", {
        controller: "ThemeController",
        templateUrl: "/app/app-portal/pages/theme/details.html"
    });
    
    $routeProvider.when("/portal/theme/export/:id", {
        controller: "ThemeController",
        templateUrl: "/app/app-portal/pages/theme/export.html"
    });

    $routeProvider.when("/portal/theme/create", {
        controller: "ThemeController",
        templateUrl: "/app/app-portal/pages/theme/details.html"
    });

    $routeProvider.when("/portal/template/list/:themeId/:folderType", {
        controller: "TemplateController",
        templateUrl: "/app/app-portal/pages/template/list.html"
    });

    $routeProvider.when("/portal/template/list/:themeId", {
        controller: "TemplateController",
        templateUrl: "/app/app-portal/pages/template/list.html"
    });

    $routeProvider.when("/portal/template/details/:themeId/:folderType/:id", {
        controller: "TemplateController",
        templateUrl: "/app/app-portal/pages/template/details.html"
    });

    $routeProvider.when("/portal/template/create/:themeId/:folderType", {
        controller: "TemplateController",
        templateUrl: "/app/app-portal/pages/template/details.html"
    });

    $routeProvider.when("/portal/role/list", {
        controller: "RoleController",
        templateUrl: "/app/app-portal/pages/role/list.html"
    });

    $routeProvider.when("/portal/role/details/:id", {
        controller: "RoleController",
        templateUrl: "/app/app-portal/pages/role/details.html"
    });

    $routeProvider.when("/portal/user/list", {
        controller: "UserController",
        templateUrl: "/app/app-portal/pages/user/list.html"
    });

    $routeProvider.when("/portal/user/details/:id", {
        controller: "UserController",
        templateUrl: "/app/app-portal/pages/user/details.html"
    });
    
    $routeProvider.when("/portal/my-profile", {
        controller: "UserController",
        templateUrl: "/app/app-portal/pages/user/my-profile.html"
    });

    $routeProvider.when("/portal/user/create", {
        controller: "UserController",
        templateUrl: "/app/app-portal/pages/user/register.html"
    });

    $routeProvider.when("/portal/app-settings/details", {
        controller: "AppSettingsController",
        templateUrl: "/app/app-portal/pages/app-settings/details.html"
    });
    
    $routeProvider.when("/portal/import", {
        controller: "ImportFileController",
        templateUrl: "/app/app-portal/pages/import/details.html"
    });

    $routeProvider.when("/portal/language/list", {
        controller: "CultureController",
        templateUrl: "/app/app-portal/pages/culture/list.html"
    });
    $routeProvider.when("/portal/language/details/:id", {
        controller: "CultureController",
        templateUrl: "/app/app-portal/pages/culture/details.html"
    });
    $routeProvider.when("/portal/language/create", {
        controller: "CultureController",
        templateUrl: "/app/app-portal/pages/culture/details.html"
    });
    
    $routeProvider.when("/portal/messenger", {
        controller: "MessengerController",
        templateUrl: "/app/app-portal/pages/messenger/index.html"
    });

    $routeProvider.when("/portal/url-alias/list", {
        controller: "UrlAliasController",
        templateUrl: "/app/app-portal/pages/url-alias/list.html"
    });
    
    $routeProvider.when("/portal/url-alias/details/:id", {
        controller: "UrlAliasController",
        templateUrl: "/app/app-portal/pages/url-alias/details.html"
    });
   
    $routeProvider.when("/portal/social-feed", {
        controller: "SocialFeedController",
        templateUrl: "/app/app-portal/pages/social-feed/social-feed.html"
    });
    $routeProvider.otherwise({ redirectTo: "/portal" });
});

var demo = {
    initDashboardPageCharts: function (incomes,services) {
        incomes = incomes || [50, 150, 100, 190, 130, 90, 150, 160, 120, 140, 190, 95];
        chartColor = "#eeeeee";
        // General configuration for the charts with Line gradientStroke
        gradientChartOptionsConfiguration = {
            maintainAspectRatio: false,
            legend: {
                display: false
            },
            tooltips: {
                bodySpacing: 4,
                mode: "nearest",
                intersect: 0,
                position: "nearest",
                xPadding: 10,
                yPadding: 10,
                caretPadding: 10
            },
            responsive: 1,
            scales: {
                yAxes: [{
                    display: 0,
                    
                    ticks: {
                        display: false
                    },
                    gridLines: {
                        zeroLineColor: "transparent",
                        drawTicks: false,
                        display: false,
                        drawBorder: false
                    }
                }],
                xAxes: [{
                    display: 0,
                    
                    ticks: {
                        display: false
                    },
                    gridLines: {
                        zeroLineColor: "transparent",
                        drawTicks: false,
                        display: false,
                        drawBorder: false
                    }
                }]
            },
            layout: {
                padding: { left: 0, right: 0, top: 15, bottom: 15 }
            }
        };

        gradientChartOptionsConfigurationWithNumbersAndGrid = {
            maintainAspectRatio: false,
            legend: {
                display: false
            },
            tooltips: {
                bodySpacing: 4,
                mode: "nearest",
                intersect: 0,
                position: "nearest",
                xPadding: 10,
                yPadding: 10,
                caretPadding: 10
            },
            responsive: true,
            scales: {
                yAxes: [{
                    
                    gridLines: {
                        zeroLineColor: "transparent",
                        drawBorder: false
                    }
                }],
                xAxes: [{
                    display: 0,
                    
                    ticks: {
                        display: false
                    },
                    gridLines: {
                        zeroLineColor: "transparent",
                        drawTicks: false,
                        display: false,
                        drawBorder: false
                    }
                }]
            },
            layout: {
                padding: { left: 0, right: 0, top: 15, bottom: 15 }
            }
        };

        var ctx = document.getElementById('bigDashboardChart').getContext("2d");

        var gradientStroke = ctx.createLinearGradient(500, 0, 100, 0);
        gradientStroke.addColorStop(0, '#80b6f4');
        gradientStroke.addColorStop(1, chartColor);

        var gradientFill = ctx.createLinearGradient(0, 200, 0, 50);
        gradientFill.addColorStop(0, "rgba(128, 182, 244, 0)");
        gradientFill.addColorStop(1, "rgba(255, 255, 255, 0.24)");

        var myChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: ["JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC"],
                datasets: [
                    {
                        type: 'line',
                        label: "Incomes",
                        borderColor: chartColor,
                        pointBorderColor: chartColor,
                        pointBackgroundColor: "red",
                        pointHoverBackgroundColor: "#1e3d60",
                        pointHoverBorderColor: chartColor,
                        pointBorderWidth: 1,
                        pointHoverRadius: 7,
                        pointHoverBorderWidth: 2,
                        pointRadius: 5,
                        fill: true,
                        backgroundColor: gradientFill,
                        borderWidth: 2,
                        data: incomes
                    },
                    {                        
                        label: "Services",
                        //borderColor: chartColor,
                        //pointBorderColor: chartColor,
                        //pointBackgroundColor: "#1e3d60",
                        //pointHoverBackgroundColor: "#1e3d60",
                        //pointHoverBorderColor: chartColor,
                        //pointBorderWidth: 1,
                        //pointHoverRadius: 7,
                        //pointHoverBorderWidth: 2,
                        //pointRadius: 5,
                        //fill: true,
                        backgroundColor: 'yellow',
                        //borderWidth: 2,
                        data: services
                    }
                ]
            },
            options: {
                layout: {
                    padding: {
                        left: 20,
                        right: 20,
                        top: 0,
                        bottom: 0
                    }
                },
                maintainAspectRatio: false,
                tooltips: {
                    backgroundColor: '#fff',
                    titleFontColor: '#333',
                    bodyFontColor: '#666',
                    bodySpacing: 4,
                    xPadding: 12,
                    mode: "nearest",
                    intersect: 0,
                    position: "nearest"
                },
                legend: {
                    position: "bottom",
                    fillStyle: "#FFF",
                    display: false
                },
                scales: {
                    yAxes: [{
                        ticks: {
                            fontColor: "rgba(255,255,255,0.4)",
                            fontStyle: "bold",
                            beginAtZero: true,
                            maxTicksLimit: 5,
                            padding: 10
                        },
                        gridLines: {
                            drawTicks: true,
                            drawBorder: false,
                            display: true,
                            color: "rgba(255,255,255,0.1)",
                            zeroLineColor: "transparent"
                        }

                    }],
                    xAxes: [{
                        gridLines: {
                            zeroLineColor: "transparent",
                            display: false,

                        },
                        ticks: {
                            padding: 10,
                            fontColor: "rgba(255,255,255,0.4)",
                            fontStyle: "bold"
                        }
                    }]
                }
            }
        });
    },
};

'use strict';
app.controller('AppSettingsController', 
    ['$scope', '$rootScope', 'ngAppSettings', '$routeParams', '$timeout', '$location', 
'AuthService','CommonService', 'AppSettingsServices',
    function ($scope, $rootScope, ngAppSettings, $routeParams, $timeout, $location, authService, commonService, appSettingsServices) {

        $scope.appSettings = null;
        $scope.errors = [];
        $scope.statuses = ngAppSettings.contentStatuses;
        $scope.getAppSettings = async function (id) {
            $rootScope.isBusy = true;
            var resp = await appSettingsServices.getAppSettings();
            if (resp && resp.isSucceed) {
                $scope.appSettings = JSON.stringify(resp.data);
                $rootScope.initEditor();
                $rootScope.isBusy = false;
                $scope.$apply();
            }
            else {
                if (resp) { $rootScope.showErrors(resp.errors); }
                $rootScope.isBusy = false;
                $scope.$apply();
            }
        };
        $scope.loadAppSettings = async function () {
            $rootScope.isBusy = true;

            var id = $routeParams.id;
            var response = await appSettingsServices.getAppSettings();
            if (response.isSucceed) {
                $scope.appSettings = response.data;
                $rootScope.isBusy = false;
                $scope.$apply();
            }
            else {
                $rootScope.showErrors(response.errors);
                $rootScope.isBusy = false;
                $scope.$apply();
            }

            var result = await commonService.getSettings();
            if (result.isSucceed) {
                $scope.settings = result.data;
                $rootScope.isBusy = false;
                $scope.$apply();
            }
            else {
                $rootScope.isBusy = false;
            }
        };

        $scope.saveAppSettings = async function (appSettings) {
            $rootScope.isBusy = true;
            var resp = await appSettingsServices.saveAppSettings(appSettings);
            if (resp && resp.isSucceed) {
                $scope.appSettings = resp.data;
                $rootScope.showMessage('success', 'success');
                $rootScope.isBusy = false;
                $scope.$apply();
            }
            else {
                if (resp) { $rootScope.showErrors(resp.errors); }
                $scope.$apply();
            }
        };

    }]);

'use strict';
app.factory('AppSettingsServices', ['$http', '$rootScope', 'CommonService', function ($http, $rootScope, commonService) {

    //var serviceBase = 'http://ngauthenticationapi.azurewebsites.net/';

    var appSettingssServiceFactory = {};

    var settings = $rootScope.globalSettings;

    var _getAppSettings = async function () {
        var url = '/portal/app-settings/details';
        
        var req = {
            method: 'GET',
            url: url
        };
        return await commonService.getApiResult(req);
    };

    var _saveAppSettings = async function (appSettings) {
        var apiUrl = '/portal/app-settings/save';
        var req = {
            method: 'POST',
            url: apiUrl,
            data: JSON.stringify(appSettings)
        };
        return await commonService.getApiResult(req);
    };
    var _saveGlobalSettings = async function (name, content) {
        var apiUrl = '/portal/app-settings/save-global/'+name;
        var req = {
            method: 'POST',
            url: apiUrl,
            data: JSON.stringify(content)
        };
        return await commonService.getApiResult(req);
    };

    appSettingssServiceFactory.getAppSettings = _getAppSettings;
    appSettingssServiceFactory.saveAppSettings = _saveAppSettings;
    appSettingssServiceFactory.saveGlobalSettings = _saveGlobalSettings;
    return appSettingssServiceFactory;

}]);

'use strict';
app.controller('AttributeSetController', [
    '$scope', '$rootScope', '$location',
    'ngAppSettings', '$routeParams', 'AttributeFieldService', 'AttributeSetService',      
    function ($scope, $rootScope, $location, 
        ngAppSettings, $routeParams, attributeFieldService, service) {
        BaseCtrl.call(this, $scope, $rootScope, $routeParams, ngAppSettings, service);
        $scope.defaultAttr = null;
        $scope.getSingleSuccessCallback = async function () {
            var getDefaultAttr = await attributeFieldService.getSingle([null, 'portal']);
            if (getDefaultAttr.isSucceed) {
                $scope.defaultAttr = getDefaultAttr.data;
                $scope.defaultAttr.options = [];
            }
            $scope.$apply();
        }
        $scope.saveCallback = function () {
            $location.url($scope.referrerUrl);
        };
    }
]);
'use strict';
app.factory('AttributeFieldService', ['BaseService',
    function (baseService) {
        var serviceFactory = angular.copy(baseService);
        serviceFactory.init('attribute-field');
        // Define more service methods here
    return serviceFactory;
}]);

'use strict';
app.factory('AttributeSetService', ['BaseService',
    function (baseService) {
        var serviceFactory = angular.copy(baseService);
        serviceFactory.init('attribute-set');
        // Define more service methods here
    return serviceFactory;
}]);

'use strict';
app.controller('ArticleController', ['$scope', '$rootScope', '$location', '$filter',
    'ngAppSettings', '$routeParams', 'ArticleService', 'UrlAliasService', 'AttributeSetService',
    function ($scope, $rootScope, $location, $filter, ngAppSettings, $routeParams, service, urlAliasService, attributeSetService) {
        BaseCtrl.call(this, $scope, $rootScope, $routeParams, ngAppSettings, service);
        $scope.preview = function (item) {
            item.editUrl = '/portal/article/details/' + item.id;
            $rootScope.preview('article', item, item.title, 'modal-lg');
        };

        // $scope.saveCallback = function () {
        //     $location.url($scope.referrerUrl);
        // }
        $scope.saveFailCallback = function(){
            angular.forEach($scope.activedData.attributeSetNavs, function(nav){
                if(nav.isActived){
                    $scope.decryptAttributeSet(nav.attributeSet);
                }
            });
        }
        $scope.getSingleSuccessCallback = function () {
            var moduleId = $routeParams.module_id;
            var pageId = $routeParams.page_id;
            var attrSetIds = $routeParams.attr_set_ids;
            if (moduleId) {
                var moduleNav = $rootScope.findObjectByKey($scope.activedData.modules, 'moduleId', moduleId);
                if (moduleNav) {
                    moduleNav.isActived = true;
                }
            }
            if (pageId) {
                var pageNav = $rootScope.findObjectByKey($scope.activedData.categories, 'pageId', pageId);
                if (pageNav) {
                    pageNav.isActived = true;
                }
            }
            if( $routeParams.attr_set_ids){
                var req = angular.copy(ngAppSettings.request);
                req.query = 'attr_set_ids='+  $routeParams.attr_set_ids;
                var getData = attributeSetService.getList(req);
                if(getData.isSucceed){
                    angular.forEach(getData.data.items, function(e){
                        e.isActived = true;
                    });
                    $scope.activedData.attributeSetNavs = getData.data;
                }
            }
            $scope.activedData.publishedDateTime = $filter('utcToLocalTime')($scope.activedData.publishedDateTime);
        }
        $scope.generateSeo = function () {
            if ($scope.activedData) {
                if ($scope.activedData.seoName === null || $scope.activedData.seoName === '') {
                    $scope.activedData.seoName = $rootScope.generateKeyword($scope.activedData.title, '-');
                }
                if ($scope.activedData.seoTitle === null || $scope.activedData.seoTitle === '') {
                    $scope.activedData.seoTitle = $scope.activedData.title;
                }
                if ($scope.activedData.seoDescription === null || $scope.activedData.seoDescription === '') {
                    $scope.activedData.seoDescription = $scope.activedData.excerpt;
                }
                if ($scope.activedData.seoKeywords === null || $scope.activedData.seoKeywords === '') {
                    $scope.activedData.seoKeywords = $scope.activedData.title;
                }
            }
        }
        $scope.addAlias = async function () {
            var getAlias = await urlAliasService.getSingle();
            if (getAlias.isSucceed) {
                $scope.activedData.urlAliases.push(getAlias.data);
                $rootScope.isBusy = false;
                $scope.$apply();
            }
            else {
                $rootScope.showErrors(getAlias.errors);
                $rootScope.isBusy = false;
                $scope.$apply();
            }
        }

        $scope.removeAliasCallback = async function (index) {
            $scope.activedData.urlAliases.splice(index, 1);
            $scope.$apply();
        }
        $scope.validate = function(){
            angular.forEach($scope.activedData.attributeSetNavs, function(nav){
                if(nav.isActived){
                    $scope.encryptAttributeSet(nav.attributeSet);
                }
            });
            return true;
        }
        $scope.encryptAttributeSet = function(attributeSet){
            angular.forEach(attributeSet.attributes, function(attr){
                if(attr.isEncrypt){
                    angular.forEach(attributeSet.articleData.items, function(item){
                        var fieldData = $rootScope.findObjectByKey(item.data, 'attributeName', attr.name);
                        var encryptedData = $rootScope.encrypt(fieldData.stringValue);
                        fieldData.stringValue = encryptedData.data;
                        fieldData.encryptValue = encryptedData.data;
                        fieldData.encryptKey = encryptedData.key;
                        console.log(fieldData);
                    });
                }
            });
        }
        $scope.decryptAttributeSet = function(attributeSet){
            angular.forEach(attributeSet.attributes, function(attr){
                if(attr.isEncrypt){
                    angular.forEach(attributeSet.articleData.items, function(item){
                        var fieldData = $rootScope.findObjectByKey(item.data, 'attributeName', attr.name);
                        var encryptedData = {
                            key: fieldData.encryptKey,
                            data: fieldData.encryptValue
                        };
                        var decrypted = $rootScope.decrypt(encryptedData);
                        fieldData.stringValue = decrypted;
                    });
                }
            });
        }
    }
]);
'use strict';
app.factory('ArticleService', ['BaseService',
    function (baseService) {
        var serviceFactory = angular.copy(baseService);
        serviceFactory.init('article');
        // Define more service methods here
    return serviceFactory;
}]);

'use strict';
app.controller('CultureController', ['$scope', '$rootScope', 'ngAppSettings', '$routeParams', 'CultureService', 'CommonService',
    function ($scope, $rootScope, ngAppSettings, $routeParams, service, commonService) {
        $scope.cultures = [

            { specificulture: 'en-us', fullName: 'United States - English (Default)', icon: 'flag-icon-us' },
            { specificulture: 'fr-dz', fullName: 'Algeria - Français', icon: 'flag-icon-dz' },
            { specificulture: 'es-ar', fullName: 'Argentina - Español', icon: 'flag-icon-ar' },
            { specificulture: 'en-au', fullName: 'Australia - English', icon: 'flag-icon-au' },
            { specificulture: 'nl-be', fullName: 'België - Nederlands', icon: 'flag-icon-be' },
            { specificulture: 'fr-be', fullName: 'Belgique - Français', icon: 'flag-icon-be' },
            { specificulture: 'es-bo', fullName: 'Bolivia - Español', icon: 'flag-icon-bo' },
            { specificulture: 'bs-ba', fullName: 'Bosna i Hercegovina – Bosanski', icon: 'flag-icon-ba' },
            { specificulture: 'pt-br', fullName: 'Brasil - Português', icon: 'flag-icon-br' },
            { specificulture: 'en-ca', fullName: 'Canada - English', icon: 'flag-icon-ca' },
            { specificulture: 'fr-ca', fullName: 'Canada - Français', icon: 'flag-icon-ca' },
            { specificulture: 'cs-cz', fullName: 'Česká Republika - Čeština', icon: 'flag-icon-cz' },
            { specificulture: 'es-cl', fullName: 'Chile - Español', icon: 'flag-icon-cl' },
            { specificulture: 'es-co', fullName: 'Colombia - Español', icon: 'flag-icon-co' },
            { specificulture: 'es-cr', fullName: 'Costa Rica - Español', icon: 'flag-icon-cr' },
            { specificulture: 'sr-latn-me', fullName: 'Crna Gora - Srpski', icon: 'flag-icon-me' },
            { specificulture: 'en-cy', fullName: 'Cyprus - English', icon: 'flag-icon-cy' },
            { specificulture: 'da-dk', fullName: 'Danmark - Dansk', icon: 'flag-icon-dk' },
            { specificulture: 'de-de', fullName: 'Deutschland - Deutsch', icon: 'flag-icon-de' },
            { specificulture: 'es-ec', fullName: 'Ecuador - Español', icon: 'flag-icon-ec' },
            { specificulture: 'et-ee', fullName: 'Eesti - Eesti', icon: 'flag-icon-ee' },
            { specificulture: 'en-eg', fullName: 'Egypt - English', icon: 'flag-icon-eg' },
            { specificulture: 'es-sv', fullName: 'El Salvador - Español', icon: 'flag-icon-sv' },
            { specificulture: 'es-es', fullName: 'España - Español', icon: 'flag-icon-es' },
            { specificulture: 'fr-fr', fullName: 'France - Français', icon: 'flag-icon-fr' },
            { specificulture: 'es-gt', fullName: 'Guatemala - Español', icon: 'flag-icon-gt' },
            { specificulture: 'en-gulf', fullName: 'Gulf - English', icon: 'flag-icon-lf' },
            { specificulture: 'es-hn', fullName: 'Honduras - Español', icon: 'flag-icon-hn' },
            { specificulture: 'en-hk', fullName: 'Hong Kong SAR - English', icon: 'flag-icon-hk' },
            { specificulture: 'hr-hr', fullName: 'Hrvatska - Hrvatski', icon: 'flag-icon-hr' },
            { specificulture: 'en-in', fullName: 'India - English', icon: 'flag-icon-in' },
            { specificulture: 'id-id', fullName: 'Indonesia - Bahasa Indonesia', icon: 'flag-icon-id' },
            { specificulture: 'en-ie', fullName: 'Ireland - English', icon: 'flag-icon-ie' },
            { specificulture: 'is-is', fullName: 'Ísland - Íslenska', icon: 'flag-icon-is' },
            { specificulture: 'it-it', fullName: 'Italia - Italiano', icon: 'flag-icon-it' },
            { specificulture: 'ja-jp', fullName: 'Japanese - 日本語', icon: 'flag-icon-jp' },
            { specificulture: 'en-jo', fullName: 'Jordan - English', icon: 'flag-icon-jo' },
            { specificulture: 'lv-lv', fullName: 'Latvija - Latviešu', icon: 'flag-icon-lv' },
            { specificulture: 'en-lb', fullName: 'Lebanon - English', icon: 'flag-icon-lb' },
            { specificulture: 'lt-lt', fullName: 'Lietuva - Lietuvių', icon: 'flag-icon-lt' },
            { specificulture: 'hu-hu', fullName: 'Magyarország - Magyar', icon: 'flag-icon-hu' },
            { specificulture: 'en-my', fullName: 'Malaysia - English', icon: 'flag-icon-my' },
            { specificulture: 'en-mt', fullName: 'Malta - English', icon: 'flag-icon-mt' },
            { specificulture: 'es-mx', fullName: 'México - Español', icon: 'flag-icon-mx' },
            { specificulture: 'fr-ma', fullName: 'Morocco - Français', icon: 'flag-icon-ma' },
            { specificulture: 'nl-nl', fullName: 'Nederland - Nederlands', icon: 'flag-icon-nl' },
            { specificulture: 'en-nz', fullName: 'New Zealand - English', icon: 'flag-icon-nz' },
            { specificulture: 'es-ni', fullName: 'Nicaragua - Español', icon: 'flag-icon-ni' },
            { specificulture: 'en-ng', fullName: 'Nigeria - English', icon: 'flag-icon-ng' },
            { specificulture: 'nb-no', fullName: 'Norge - Bokmål', icon: 'flag-icon-no' },
            { specificulture: 'de-at', fullName: 'Österreich - Deutsch', icon: 'flag-icon-at' },
            { specificulture: 'en-pk', fullName: 'Pakistan - English', icon: 'flag-icon-pk' },
            { specificulture: 'es-pa', fullName: 'Panamá - Español', icon: 'flag-icon-pa' },
            { specificulture: 'es-py', fullName: 'Paraguay - Español', icon: 'flag-icon-py' },
            { specificulture: 'es-pe', fullName: 'Perú - Español', icon: 'flag-icon-pe' },
            { specificulture: 'en-ph', fullName: 'Philippines - English', icon: 'flag-icon-ph' },
            { specificulture: 'pl-pl', fullName: 'Polska - Polski', icon: 'flag-icon-pl' },
            { specificulture: 'pt-pt', fullName: 'Portugal - Português', icon: 'flag-icon-pt' },
            { specificulture: 'es-pr', fullName: 'Puerto Rico - Español', icon: 'flag-icon-pr' },
            { specificulture: 'es-do', fullName: 'República Dominicana - Español', icon: 'flag-icon-do' },
            { specificulture: 'ro-md', fullName: 'Republica Moldova - Română', icon: 'flag-icon-md' },
            { specificulture: 'ro-ro', fullName: 'România - Română', icon: 'flag-icon-ro' },
            { specificulture: 'en-sa', fullName: 'Saudi Arabia - English', icon: 'flag-icon-sa' },
            { specificulture: 'de-ch', fullName: 'Schweiz - Deutsch', icon: 'flag-icon-ch' },
            { specificulture: 'en-sg', fullName: 'Singapore - English', icon: 'flag-icon-sg' },
            { specificulture: 'sl-si', fullName: 'Slovenija - Slovenščina', icon: 'flag-icon-si' },
            { specificulture: 'sk-sk', fullName: 'Slovensko - Slovenčina', icon: 'flag-icon-sk' },
            { specificulture: 'en-za', fullName: 'South Africa - English', icon: 'flag-icon-za' },
            { specificulture: 'sr-latn-rs', fullName: 'Srbija - Srpski', icon: 'flag-icon-rs' },
            { specificulture: 'en-lk', fullName: 'Sri Lanka - English', icon: 'flag-icon-lk' },
            { specificulture: 'fr-ch', fullName: 'Suisse - Français', icon: 'flag-icon-ch' },
            { specificulture: 'fi-fi', fullName: 'Suomi - Suomi', icon: 'flag-icon-fi' },
            { specificulture: 'sv-se', fullName: 'Sverige - Svenska', icon: 'flag-icon-se' },
            { specificulture: 'fr-tn', fullName: 'Tunisia - Français', icon: 'flag-icon-tn' },
            { specificulture: 'tr-tr', fullName: 'Türkiye - Türkçe', icon: 'flag-icon-tr' },
            { specificulture: 'en-gb', fullName: 'United Kingdom - English', icon: 'flag-icon-gb' },
            { specificulture: 'en-us', fullName: 'United States - English', icon: 'flag-icon-us' },
            { specificulture: 'es-uy', fullName: 'Uruguay - Español', icon: 'flag-icon-uy' },
            { specificulture: 'es-ve', fullName: 'Venezuela - Español', icon: 'flag-icon-ve' },
            { specificulture: 'vi-vn', fullName: 'Việt Nam - Tiếng việt', icon: 'flag-icon-vn' },
            { specificulture: 'el-gr', fullName: 'Ελλάδα - Ελληνικά', icon: 'flag-icon-gr' },
            { specificulture: 'ru-by', fullName: 'Беларусь - Беларуская', icon: 'flag-icon-by' },
            { specificulture: 'bg-bg', fullName: 'България - Български', icon: 'flag-icon-bg' },
            { specificulture: 'ru-kz', fullName: 'Казахстан - Русский', icon: 'flag-icon-kz' },
            { specificulture: 'ru-ru', fullName: 'Россия - Русский', icon: 'flag-icon-ru' },
            { specificulture: 'uk-ua', fullName: 'Україна - Українська', icon: 'flag-icon-ua' },
            { specificulture: 'he-il', fullName: 'ישראל - עברית', icon: 'flag-icon-il' },
            { specificulture: 'ar-iq', fullName: 'العراق - العربية', icon: 'flag-icon-iq' },
            { specificulture: 'ar-sa', fullName: 'المملكة العربية السعودية - العربية', icon: 'flag-icon-sa' },
            { specificulture: 'ar-ly', fullName: 'ليبيا - العربية', icon: 'flag-icon-ly' },
            { specificulture: 'ar-eg', fullName: 'مصر - العربية', icon: 'flag-icon-eg' },
            { specificulture: 'ar-gulf', fullName: 'دول الخليج - العربية', icon: 'flag-icon-lf' },
            { specificulture: 'th-th', fullName: 'ไทย - ไทย', icon: 'flag-icon-th' },
            { specificulture: 'ko-kr', fullName: '대한민국 - 한국어', icon: 'flag-icon-kr' },
            { specificulture: 'zh-cn', fullName: '中国 - 简体中文', icon: 'flag-icon-cn' },
            { specificulture: 'zh-tw', fullName: '台灣 - 繁體中文', icon: 'flag-icon-tw' },
            { specificulture: 'ja-jp', fullName: '日本 - 日本語', icon: 'flag-icon-jp' },
            { specificulture: 'zh-hk', fullName: '香港特別行政區 - 繁體中文', icon: 'flag-icon-hk' }

        ];
        $scope.selected = null;
        BaseCtrl.call(this, $scope, $rootScope, $routeParams, ngAppSettings, service);
        $scope.saveCallback = function () {
            commonService.initAllSettings().then(
                () => commonService.fillAllSettings($scope.lang).then(
                    () => window.location.href = '/portal/culture/list')
            );
            
        }
        $scope.removeCallback = function () {
            commonService.initAllSettings().then(
                () => commonService.fillAllSettings($scope.lang).then(
                    () => window.location.href = '/portal/culture/list')
            );          
        }
        $scope.changeData = function (selected) {
            if (selected) {
                $scope.activedData.specificulture = selected.specificulture;
                $scope.activedData.fullName = selected.fullName;
                $scope.activedData.icon = selected.icon;
            }
        }
    }]);

'use strict';
app.factory('CultureService', ['BaseService', function (baseService) {

    var serviceFactory = Object.create(baseService);
    serviceFactory.init('culture');
    var _updateInfos = async function (pages) {

        var req = {
            method: 'POST',
            url: this.prefixUrl + '/update-infos',
            data: JSON.stringify(pages)
        };
        return await commonService.getApiResult(req);
    };

    var _syncTemplates = async function (id) {
        var apiUrl = '/culture/';
        var url = apiUrl + 'sync/' + id;        
        var req = {
            method: 'GET',
            url: url
        };
        return await commonService.getApiResult(req)
    };

    serviceFactory.syncTemplates = _syncTemplates;
    serviceFactory.updateInfos = _updateInfos;
    return serviceFactory;

}]);

'use strict';
app.controller('ConfigurationController',
    ['$scope', '$rootScope', 'ngAppSettings', '$routeParams', '$location', 'ConfigurationService', 'CommonService',
        function ($scope, $rootScope, ngAppSettings, $routeParams, $location, service, commonService) {
            BaseCtrl.call(this, $scope, $rootScope, $routeParams, ngAppSettings, service);
            $scope.cates = ['Site', 'System'];
            $scope.settings = $rootScope.globalSettings;
            $scope.saveCallback = function () {
                commonService.initAllSettings().then(function () {
                    $location.url($scope.referrerUrl);
                });
            }
            $scope.removeCallback = function () {
                commonService.initAllSettings().then(function () {
                    $location.url($scope.referrerUrl);
                });
            }
        }]);

'use strict';
app.factory('ConfigurationService', ['BaseService','CommonService', function (baseService, commonService) {

    var serviceFactory = angular.copy(baseService);
    serviceFactory.init('configuration');

    var _uploadConfiguration = async function (configurationFile) {
        //var container = $(this).parents('.model-configuration').first().find('.custom-file').first();
        if (configurationFile.file !== undefined && configurationFile.file !== null) {
            // Create FormData object
            var files = new FormData();

            // Looping over all files and add it to FormData object
            files.append(configurationFile.file.name, configurationFile.file);

            // Adding one more key to FormData object
            files.append('fileFolder', configurationFile.folder); files.append('title', configurationFile.title);
            files.append('description', configurationFile.description);

            var req = {
                url: this.prefixUrl + '/upload',
                type: "POST",
                headers: {
                },
                contentType: false, // Not to set any content header
                processData: false, // Not to process data
                data: files,
            };

            return await commonService.getApiResult(req)
        }
    };
    serviceFactory.uploadConfiguration = _uploadConfiguration;
    return serviceFactory;

}]);

'use strict';
app.controller('CustomerController', ['$scope', '$rootScope', 'ngAppSettings', '$routeParams', '$timeout', '$location', 'CustomerServices',
    function ($scope, $rootScope, ngAppSettings, $routeParams, $timeout, $location, customerServices) {
        $scope.request = angular.copy(ngAppSettings.request);
        $scope.request.contentStatuses = [
            'Active'
        ];
        $scope.request.status = '0';
        $scope.activedCustomer = null;
        $scope.relatedCustomers = [];
        $rootScope.isBusy = false;
        $scope.data = {
            pageIndex: 0,
            pageSize: 1,
            totalItems: 0,
        };
        $scope.errors = [];
        
        $scope.range = function (max) {
            var input = [];
            for (var i = 1; i <= max; i += 1) input.push(i);
            return input;
        };
        
        $scope.loadCustomer = async function () {
            $rootScope.isBusy = true;
            var id = $routeParams.id;
            var response = await customerServices.getCustomer(id, 'portal');
            if (response.isSucceed) {
                $scope.activedCustomer = response.data;
                $rootScope.initEditor();
                $rootScope.isBusy = false;
                $scope.$apply();
            }
            else {
                $rootScope.showErrors(response.errors);
                $rootScope.isBusy = false;
                $scope.$apply();
            }
        };
        $scope.loadCustomers = async function (pageIndex) {
            
            if (pageIndex !== undefined) {
                $scope.request.pageIndex = pageIndex;
            }
            if ($scope.request.fromDate !== null) {
                var d = new Date($scope.request.fromDate);
                $scope.request.fromDate = d.toISOString();
            }
            if ($scope.request.toDate !== null) {
                var d = new Date($scope.request.toDate);
                $scope.request.toDate = d.toISOString();
            }
            var resp = await customerServices.getCustomers($scope.request);
            if (resp && resp.isSucceed) {

                ($scope.data = resp.data);
                //$("html, body").animate({ "scrollTop": "0px" }, 500);
                $.each($scope.data.items, function (i, customer) {

                    $.each($scope.activedCustomers, function (i, e) {
                        if (e.customerId === customer.id) {
                            customer.isHidden = true;
                        }
                    })
                })
                $rootScope.isBusy = false;
                $scope.$apply();
            }
            else {
                if (resp) { $rootScope.showErrors(resp.errors); }
                $scope.$apply();
            }
        };

        $scope.removeCustomer = function (id) {
            $rootScope.showConfirm($scope, 'removeCustomerConfirmed', [id], null, 'Remove Customer', 'Are you sure');
        }

        $scope.removeCustomerConfirmed = async function (id) {
            var result = await customerServices.removeCustomer(id);
            if (result.isSucceed) {
                $rootScope.showMessage('success', 'success');
                $scope.loadCustomers();
            }
            else {
                $rootScope.showMessage('failed');
                $rootScope.isBusy = false;
                $scope.$apply();
            }
        }


        $scope.saveCustomer = async function (customer) {
            customer.content = $('.editor-content').val();
            var resp = await customerServices.saveCustomer(customer);
            if (resp && resp.isSucceed) {
                $scope.activedCustomer = resp.data;
                $rootScope.showMessage('Thành công', 'success');
                $rootScope.isBusy = false;
                $scope.$apply();
                //$location.path('/portal/customer/details/' + resp.data.id);
            }
            else {
                if (resp) { $rootScope.showErrors(resp.errors); }
                $scope.$apply();
            }
        };

    }]);

'use strict';
app.factory('CustomerServices', ['$http', '$rootScope', 'CommonService', function ($http, $rootScope, commonService) {

    //var serviceBase = 'http://ngauthenticationapi.azurewebsites.net/';

    var customersServiceFactory = {};

    var settings = $rootScope.globalSettings

    var _getCustomer = async function (id, type) {
        var apiUrl = '/queen-beauty/customer/';
        var url = apiUrl + 'details/' + type;
        if (id) {
            url += '/' + id;
        }
        var req = {
            method: 'GET',
            url: url
        };
        return await commonService.getApiResult(req)
    };

    var _initCustomer = async function (type) {
        var apiUrl = '/queen-beauty/customer/';
        var req = {
            method: 'GET',
            url: apiUrl + 'init/' + type,
        };
        return await commonService.getApiResult(req)
    };

    var _getCustomers = async function (request) {
        var apiUrl = '/queen-beauty/customer/';
        var req = {
            method: 'POST',
            url: apiUrl + 'list',
            data: JSON.stringify(request)
        };
        
        return await commonService.getApiResult(req);
    };

    var _removeCustomer = async function (id) {
        var apiUrl = '/queen-beauty/customer/';
        var req = {
            method: 'GET',
            url: apiUrl + 'delete/' + id
        };
        return await commonService.getApiResult(req)
    };

    var _saveCustomer = async function (customer) {
        var apiUrl = '/queen-beauty/customer/';
        var req = {
            method: 'POST',
            url: apiUrl + 'save',
            data: JSON.stringify(customer)
        };
        return await commonService.getApiResult(req)
    };

    customersServiceFactory.getCustomer = _getCustomer;
    customersServiceFactory.initCustomer = _initCustomer;
    customersServiceFactory.getCustomers = _getCustomers;
    customersServiceFactory.removeCustomer = _removeCustomer;
    customersServiceFactory.saveCustomer = _saveCustomer;
    return customersServiceFactory;

}]);

'use strict';
app.controller('DashboardController', ['$scope', '$rootScope', 'ngAppSettings', '$timeout', '$location', 'DashboardServices', function ($scope, $rootScope, ngAppSettings, $timeout, $location, dashboardServices) {
    $scope.pageClass = 'page-dashboard';
    $('.side-nav li').removeClass('active');
    $('.side-nav .page-dashboard').addClass('active');
    $scope.data = {
        totalPage: 0,
        totalArticle: 0,
        totalProduct: 0,
        totalUser: 0
    }
    $scope.users = [];
    $scope.$on('$viewContentLoaded', function () {
        $rootScope.isBusy = false;

    });
    $scope.getDashboardInfo = async function () {
        $rootScope.isBusy = true;
        var response = await dashboardServices.getDashboardInfo();
        if (response.isSucceed) {
            // $('#mainSection').removeClass('card');
            $scope.data = response.data;
            $rootScope.isBusy = false;
            $scope.$apply();
            // $scope.getChart();
        }
        else {
            $rootScope.showErrors(response.errors);
            $rootScope.isBusy = false;
            $scope.$apply();
        }
    }
    $scope.getChart = function () {
        var ctx = document.getElementById("myChart");
        var myChart = new Chart(ctx, {
            // type: 'pie',
            // data: {
            //   labels: ["Africa", "Asia", "Europe", "Latin America", "North America"],
            //   datasets: [{
            //     label: "Population (millions)",
            //     backgroundColor: ["#3e95cd", "#8e5ea2","#3cba9f","#e8c3b9","#c45850"],
            //     data: [2478,5267,734,784,433]
            //   }]
            // },
            // options: {
            //   title: {
            //     display: true,
            //     text: 'Predicted world population (millions) in 2050'
            //   }
            // }
        });
    }
}]);
'use strict';
app.factory('DashboardServices', ['$http', 'CommonService', function ($http, commonService) {

    //var serviceBase = 'http://ngauthenticationapi.azurewebsites.net/';

    var usersServiceFactory = {};
    var apiUrl = '/portal/';
    var _getDashboardInfo = async function () {
        var req = {
            method: 'GET',
            url: apiUrl + 'dashboard'
        };

        return await commonService.getApiResult(req);
    };

    usersServiceFactory.getDashboardInfo = _getDashboardInfo;
    return usersServiceFactory;

}]);

'use strict';
app.controller('FileController', ['$scope', '$rootScope', 'ngAppSettings', '$routeParams', '$timeout', '$location', 'AuthService', 'FileServices',
    function ($scope, $rootScope, ngAppSettings, $routeParams, $timeout, $location, authService, fileServices) {
        $scope.request = {
            pageSize: '10',
            pageIndex: 0,
            status: '2',
            orderBy: 'CreatedDateTime',
            direction: '1',
            fromDate: null,
            toDate: null,
            keyword: '',
            key: ''
        };

        $scope.activedFile = null;
        $scope.relatedFiles = [];
        $rootScope.isBusy = false;
        $scope.data = {
            pageIndex: 0,
            pageSize: 1,
            totalItems: 0,
        };
        $scope.errors = [];

        $scope.range = function (max) {
            var input = [];
            for (var i = 1; i <= max; i += 1) input.push(i);
            return input;
        };
        $scope.loadPage = async function(folder){
            if (folder) {
                $scope.request.key += ($scope.request.key !== '') ? '/' : '';
                $scope.request.key += folder;
            }
            $location.url('/portal/file/list?folder=' + encodeURIComponent($scope.request.key));
        };
        $scope.loadFile = async function () {
            $rootScope.isBusy = true;
            $scope.listUrl = '/portal/file/list?folder=' + $routeParams.folder;
            $rootScope.isBusy = true;
            var response = await fileServices.getFile($routeParams.folder, $routeParams.filename);
            if (response.isSucceed) {
                $scope.activedFile = response.data;                
                $rootScope.isBusy = false;
                $scope.$apply();
            }
            else {
                $rootScope.showErrors(response.errors);
                $rootScope.isBusy = false;
                $scope.$apply();
            }
        };
        $scope.loadFiles = async function (folder) {
            if (folder) {
                $scope.request.key += ($scope.request.key !== '') ? '/' : '';
                $scope.request.key += folder;
            } else {
                $scope.request.key = $routeParams.folder ? $routeParams.folder : '';
            }
            
            $rootScope.isBusy = true;
            var resp = await fileServices.getFiles($scope.request);
            if (resp && resp.isSucceed) {

                ($scope.data = resp.data);
                $.each($scope.data.items, function (i, file) {

                    $.each($scope.activedFiles, function (i, e) {
                        if (e.fileId === file.id) {
                            file.isHidden = true;
                        }
                    })
                })
                $rootScope.isBusy = false;
                $scope.$apply();
            }
            else {
                if (resp) { $rootScope.showErrors(resp.errors); }
                $rootScope.isBusy = false;
                $scope.$apply();
            }
            
        };

        $scope.removeFile = async function (id) {
            if (confirm("Are you sure!")) {
                $rootScope.isBusy = true;
                var resp = await fileServices.removeFile(id);
                if (resp && resp.isSucceed) {
                    $scope.loadFiles();
                }
                else {
                    if (resp) { $rootScope.showErrors(resp.errors); }
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
            }
        };

        $scope.saveFile = async function (file) {            
            $rootScope.isBusy = true;
            var resp = await fileServices.saveFile(file);
            if (resp && resp.isSucceed) {
                $scope.activedFile = resp.data;
                $rootScope.showMessage('Thành công', 'success');
                $rootScope.isBusy = false;
                $scope.$apply();
            }
            else {
                if (resp) { $rootScope.showErrors(resp.errors); }
                $rootScope.isBusy = false;
                $scope.$apply();
            }
        };

    }]);

'use strict';
app.factory('FileServices', ['$http', '$rootScope', 'CommonService', function ($http, $rootScope, commonService) {

    //var serviceBase = 'http://ngauthenticationapi.azurewebsites.net/';

    var filesServiceFactory = {};

    var settings = $rootScope.globalSettings

    var _getFile = async function (folder, filename) {
        var apiUrl = '/file/';
        var url = apiUrl + 'details?folder=' + folder + '&filename=' + filename;        
        var req = {
            method: 'GET',
            url: url
        };
        return await commonService.getApiResult(req)
    };

    var _initFile = async function (type) {
        var apiUrl = '/file/';
        var req = {
            method: 'GET',
            url: apiUrl + 'init/' + type,
        };
        return await commonService.getApiResult(req)
    };

    var _getFiles = async function (request) {
        var apiUrl = '/file/';
        var req = {
            method: 'POST',
            url: apiUrl + 'list',
            data: JSON.stringify(request)
        };
        
        return await commonService.getApiResult(req);
    };

    var _removeFile = async function (id) {
        var apiUrl = '/file/';
        var req = {
            method: 'GET',
            url: apiUrl + 'delete/' + id
        };
        return await commonService.getApiResult(req)
    };

    var _saveFile = async function (file) {
        var apiUrl = '/file/';
        var req = {
            method: 'POST',
            url: apiUrl + 'save',
            data: JSON.stringify(file)
        };
        return await commonService.getApiResult(req)
    };

    filesServiceFactory.getFile = _getFile;
    filesServiceFactory.initFile = _initFile;
    filesServiceFactory.getFiles = _getFiles;
    filesServiceFactory.removeFile = _removeFile;
    filesServiceFactory.saveFile = _saveFile;
    return filesServiceFactory;

}]);

'use strict';
app.controller('ImportFileController',
    ['$scope', '$rootScope', 'ImportFileServices', 'TranslatorService', 'GlobalSettingsService',
        function ($scope, $rootScope, service, translatorService, GlobalSettingsService) {

            $scope.saveImportFile = async function () {
                $rootScope.isBusy = true;
                var form = document.getElementById('frm-import');
                var frm = new FormData();
                frm.append( 'assets',  form['assets'].files[0]);
                var response = await service.saveImportFile(frm);
                if (response.isSucceed) {
                    $scope.activedData = response.data;
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
                else {
                    $rootScope.showErrors(response.errors);
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
            };
        }]);

'use strict';
app.factory('ImportFileServices', ['$rootScope', 'BaseService',
     function ($rootScope, baseService) {

    //var serviceBase = 'http://ngauthenticationapi.azurewebsites.net/';

    var serviceFactory = {};

    var settings = $rootScope.globalSettings;
    var serviceFactory = Object.create(baseService);
    serviceFactory.init('portal',true);
    var _saveImportFile = async function (frm) {
        var apiUrl = this.prefixUrl + '/' + settings.lang + '/import';
        return await this.ajaxSubmitForm(frm, apiUrl);
    };

    serviceFactory.saveImportFile = _saveImportFile;
    return serviceFactory;

}]);

'use strict';
app.controller('LanguageController',
    ['$scope', '$rootScope', 'ngAppSettings', '$routeParams', '$location', 'LanguageService', 'CommonService',
        function ($scope, $rootScope, ngAppSettings, $routeParams, $location, service, commonService) {
            BaseCtrl.call(this, $scope, $rootScope, $routeParams, ngAppSettings, service);
            $scope.languageFile = {
                file: null,
                fullPath: '',
                folder: 'Language',
                title: '',
                description: ''
            };
            $scope.cates = [
                {
                    title: 'Common',
                    prefix: ''
                },
                {
                    title: 'Portal',
                    prefix: 'portal_'
                },
                {
                    title: 'Frontend',
                    prefix: 'fe_'
                }
            ];
            $scope.cate = $scope.cates[0];
            $scope.dataTypes = $rootScope.globalSettings.dataTypes;
            
            $scope.saveCallback = function () {
                commonService.initAllSettings().then(function () {
                    $location.url($scope.referrerUrl);
                });
            }
            $scope.removeCallback = function () {
                commonService.initAllSettings().then(function () {
                    $location.url($scope.referrerUrl);
                });
            }
            $scope.generateDefault = function (text, cate) {
                if (!$routeParams.id && !$scope.activedData.keyword) {
                    $scope.activedData.defaultValue = text;
                    $scope.activedData.keyword = cate.prefix + text.replace(/[^a-zA-Z0-9]+/g, '_')
                        .replace(/([A-Z]+)([A-Z][a-z])/g, '$1-$2')
                        .replace(/([a-z])([A-Z])/g, '$1-$2')
                        .replace(/([0-9])([^0-9])/g, '$1-$2')
                        .replace(/([^0-9])([0-9])/g, '$1-$2')
                        .replace(/-+/g, '_')
                        .toLowerCase();
                }
            };
    
        }]);

'use strict';
app.factory('LanguageService', ['BaseService','CommonService', function (baseService, commonService) {

    var serviceFactory = Object.create(baseService);
    serviceFactory.init('language');

    var _uploadLanguage = async function (languageFile) {
        //var container = $(this).parents('.model-language').first().find('.custom-file').first();
        if (languageFile.file !== undefined && languageFile.file !== null) {
            // Create FormData object
            var files = new FormData();

            // Looping over all files and add it to FormData object
            files.append(languageFile.file.name, languageFile.file);

            // Adding one more key to FormData object
            files.append('fileFolder', languageFile.folder); files.append('title', languageFile.title);
            files.append('description', languageFile.description);

            var req = {
                url: this.prefixUrl + '/upload',
                type: "POST",
                headers: {
                },
                contentType: false, // Not to set any content header
                processData: false, // Not to process data
                data: files,
            };

            return await commonService.getApiResult(req)
        }
    };
    serviceFactory.uploadLanguage = _uploadLanguage;
    return serviceFactory;

}]);

'use strict';
app.controller('loginController', [ '$rootScope', '$scope', 'ngAppSettings', '$location', 'AuthService', 'ngAppSettings', function ($rootScope, $scope, ngAppSettings, $location, authService, ngAuthSettings) {
    if (authService.authentication && authService.authentication.isAuth && authService.authentication.isAdmin) {
        authService.referredUrl = $location.path();
        $location.path('/portal');
    }

    $scope.pageClass = 'page-login';

    $scope.loginData = {
        username: "",
        password: "",
        rememberme: false
    };

    $scope.message = "";
    $scope.$on('$viewContentLoaded', function () {
        $rootScope.isBusy = false;
    });
    $scope.login = async function () {
        
        if (authService.referredUrl === "/init/login") {
            authService.referredUrl = "/portal";
        }
        $rootScope.isBusy = true;
        var result = await authService.login($scope.loginData);
        if (result) {
            $rootScope.isBusy = false;
            $scope.$apply();
        }
    };

$scope.authExternalProvider = function (provider) {

    var redirectUri = location.protocol + '//' + location.host + '/authcomplete.html';

    var externalProviderUrl = ngAuthSettings.apiServiceBaseUri + "api/Account/ExternalLogin?provider=" + provider
        + "&response_type=token&client_id=" + ngAuthSettings.clientId
        + "&redirect_uri=" + redirectUri;
    window.$windowScope = $scope;

    var oauthWindow = window.open(externalProviderUrl, "Authenticate Account", "location=0,status=0,width=600,height=750");
};

$scope.authCompletedCB = function (fragment) {

    $scope.$apply(function () {

        if (fragment.haslocalaccount === 'False') {

            authService.logOut();

            authService.externalAuthData = {
                provider: fragment.provider,
                userName: fragment.external_user_name,
                externalAccessToken: fragment.external_access_token
            };

            $location.path('/associate');

        }
        else {
            //Obtain access token and redirect to orders
            var externalData = { provider: fragment.provider, externalAccessToken: fragment.external_access_token };
            authService.obtainAccessToken(externalData).then(function (response) {

                $location.path('/orders');

            },
                function (err) {
                    $scope.message = err.error_description;
                });
        }

    });
}
}]);
'use strict';
app.controller('ModuleController', ['$scope', '$rootScope', 'ngAppSettings', '$location', '$routeParams',
    'ModuleService', 'SharedModuleDataService',
    function ($scope, $rootScope, ngAppSettings, $location, $routeParams, moduleServices, moduleDataService) {
        BaseCtrl.call(this, $scope, $rootScope, $routeParams, ngAppSettings, moduleServices, 'product');
        $scope.contentUrl = '';
        $scope.getSingleSuccessCallback = function () {
            if ($scope.activedData.id > 0) {
                // module => list article or list product
                if($scope.activedData.type==2 || $scope.activedData.type==6){
                    $scope.contentUrl = '/portal/module-article/list/' + $scope.activedData.id;
                }
                else{
                    $scope.contentUrl = '/portal/module/data/' + $scope.activedData.id;
                }
            }
        };
        $scope.getListByType = async function (pageIndex) {
            $scope.request.query = '?type=' + $scope.type;
            await $scope.getList(pageIndex);
        };
        $scope.defaultAttr = {
            name: '',
            options: [],
            priority: 0,
            dataType: 7,
            isGroupBy: false,
            isSelect: false,
            isDisplay: true,
            width: 3
        };
        $scope.type='-1';
        
        $scope.settings = $rootScope.globalSettings;
        $scope.activedData = null;
        $scope.editDataUrl = '';

        $scope.loadModuleDatas = async function () {
            $rootScope.isBusy = true;
            var id = $routeParams.id;
            $scope.dataColumns = [];
            var response = await moduleServices.getSingle([id, 'mvc']);
            if (response.isSucceed) {

                $scope.activedData = response.data;
                $scope.editDataUrl = '/portal/module-data/details/' + $scope.activedData.id;
                angular.forEach($scope.activedData.columns, function (e, i) {
                    if (e.isDisplay) {
                        $scope.dataColumns.push({
                            title: e.title,
                            name: e.name,
                            filter: true,
                            type: 0 // string - ngAppSettings.dataTypes[0]
                        });
                    }
                });
                $rootScope.isBusy = false;
                $scope.$apply();
            }
            else {
                $rootScope.showErrors(response.errors);
                $rootScope.isBusy = false;
                $scope.$apply();
            }
        };

        $scope.loadMoreModuleDatas = async function (pageIndex) {
            $scope.request.query = '&module_id=' + $scope.activedData.id;
            if (pageIndex !== undefined) {
                $scope.request.pageIndex = pageIndex;
            }
            if ($scope.request.fromDate !== null) {
                var d = new Date($scope.request.fromDate);
                $scope.request.fromDate = d.toISOString();
            }
            if ($scope.request.toDate !== null) {
                var d = new Date($scope.request.toDate);
                $scope.request.toDate = d.toISOString();
            }
            $rootScope.isBusy = true;
            var resp = await moduleDataService.getModuleDatas($scope.request);
            if (resp && resp.isSucceed) {

                $scope.activedData.data = resp.data;
                $rootScope.isBusy = false;
                $scope.$apply();
            }
            else {
                if (resp) { $rootScope.showErrors(resp.errors); }
                $rootScope.isBusy = false;
                $scope.$apply();
            }
        };
        $scope.exportModuleData = async function (pageIndex) {
            $scope.request.query = '&module_id=' + $scope.activedData.id;
            if (pageIndex !== undefined) {
                $scope.request.pageIndex = pageIndex;
            }
            if ($scope.request.fromDate !== null) {
                var d = new Date($scope.request.fromDate);
                $scope.request.fromDate = d.toISOString();
            }
            if ($scope.request.toDate !== null) {
                var d = new Date($scope.request.toDate);
                $scope.request.toDate = d.toISOString();
            }
            $rootScope.isBusy = true;
            var resp = await moduleDataService.exportModuleData($scope.request);
            if (resp && resp.isSucceed) {
                window.top.location = resp.data;
                $rootScope.isBusy = false;
                $scope.$apply();
            }
            else {
                if (resp) { $rootScope.showErrors(resp.errors); }
                $rootScope.isBusy = false;
                $scope.$apply();
            }
        };
        

        $scope.removeData = function (id) {
            if ($scope.activedData) {
                $rootScope.showConfirm($scope, 'removeDataConfirmed', [id], null, 'Remove Data', 'Are you sure');
            }
        }

        $scope.removeDataConfirmed = async function (id) {
            $rootScope.isBusy = true;
            var result = await moduleDataService.removeModuleData(id);
            if (result.isSucceed) {
                $scope.loadModuleDatas();
            }
            else {
                $rootScope.showMessage('failed');
                $rootScope.isBusy = false;
                $scope.$apply();
            }
        }
        $scope.updateModuleDataField = async function (item, propertyName) {
            var result = await moduleDataService.saveFields(item.id, propertyName, item[propertyName]);
            if (result.isSucceed) {
                $scope.loadModuleDatas();
            }
            else {
                $rootScope.showMessage('failed');
                $rootScope.isBusy = false;
                $scope.$apply();
            }
        }
        $scope.updateDataInfos = async function (items) {
            $rootScope.isBusy = true;
            var resp = await moduleDataService.updateInfos(items);
            if (resp && resp.isSucceed) {
                $scope.activedPage = resp.data;
                $rootScope.showMessage('success', 'success');
                $rootScope.isBusy = false;
                $scope.$apply();
            }
            else {
                if (resp) { $rootScope.showErrors(resp.errors); }
                $rootScope.isBusy = false;
                $scope.$apply();
            }
        };
        // $scope.saveCallback = function () {
        //     $location.url($scope.referrerUrl);
        // }
        $scope.loadArticles = async function () {
            $rootScope.isBusy = true;
            var id = $routeParams.id;
            $scope.articleRequest.query += '&page_id='+id;
            var response = await pageArticleService.getList($scope.articleRequest);
            if (response.isSucceed) {
                $scope.pageData.articles = response.data;
                $rootScope.isBusy = false;
                $scope.$apply();
            }
            else {
                $rootScope.showErrors(response.errors);
                $rootScope.isBusy = false;
                $scope.$apply();
            }
        };
        $scope.selectedCol = null;
        $scope.dragoverCallback = function (index, item, external, type) {
            //console.log('drop ', index, item, external, type);
        }
        $scope.insertColCallback = function (index, item, external, type) {
            console.log('insert ', index, item, external, type);
        }
        
    }]);

'use strict';
app.factory('ModuleService', ['BaseService',
    function (baseService) {        
        var serviceFactory = Object.create(baseService);;
        serviceFactory.init('module')
        // Define more service methods here
        return serviceFactory;
    }]);

'use strict';
app.controller('ModuleDataController',
    ['$scope', '$rootScope', 'ngAppSettings', '$routeParams', '$location', 'ModuleDataService', 'CommonService',
        function ($scope, $rootScope, ngAppSettings, $routeParams, $location, service, commonService) {
            BaseCtrl.call(this, $scope, $rootScope, $routeParams, ngAppSettings, service);
            $scope.cates = ['Site', 'System'];
            $scope.others = [];
            $scope.settings = $rootScope.globalSettings;    
            $scope.moduleId = $routeParams.moduleId;
            $scope.getList = async function () {
                $rootScope.isBusy = true;
                $scope.request.query = '&module_id='+$scope.moduleId ;
                var response = await service.getList($scope.request);
                if (response.isSucceed) {
                    $scope.data = response.data;
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
                else {
                    $rootScope.showErrors(response.errors);
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
            };
            
        $scope.getSingle = async function () {

            $rootScope.isBusy = true;
            var resp = await service.getSingle($routeParams.id, 'portal');
            if (resp && resp.isSucceed) {
                $scope.activedModuleData = resp.data;
                $rootScope.initEditor();
                $rootScope.isBusy = false;
                $scope.$apply();
            }
            else {
                if (resp) { $rootScope.showErrors(resp.errors); }
                $rootScope.isBusy = false;
                $scope.$apply();
            }
        };
            $scope.remove = function (moduleId, dataId) {
                $rootScope.showConfirm($scope, 'removeConfirmed', [moduleId, dataId], null, 'Remove', 'Are you sure');
            };
        
            $scope.removeConfirmed = async function (moduleId, dataId) {
                $rootScope.isBusy = true;
                var result = await service.delete(moduleId, dataId);
                if (result.isSucceed) {
                    if ($scope.removeCallback) {
                        $rootScope.executeFunctionByName('removeCallback', $scope.removeCallbackArgs, $scope)
                    }
                    $scope.getList();
                }
                else {
                    $rootScope.showMessage('failed');
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
            };       
           
            $scope.removeCallback = function () {
            }
            
            $scope.saveOthers = async function(){                
                var response = await service.saveList($scope.others);
                if (response.isSucceed) {
                    $scope.getList();
                    $scope.$apply();
                }
                else {
                    $rootScope.showErrors(response.errors);
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
            }
        }]);

'use strict';
app.factory('ModuleDataService', ['$rootScope', 'CommonService', 'BaseService',
    function ($rootScope, commonService, baseService) {

        var serviceFactory = Object.create(baseService);
        serviceFactory.init('module-data');
        var _delete = async function(moduleId, dataId){
            var url = this.prefixUrl + '/delete/' + moduleId+'/'+dataId;
            var req = {
                method: 'GET',
                url: url
            };
            return await commonService.getApiResult(req);
        }
        var _updateInfos = async function (modules) {

            var req = {
                method: 'POST',
                url: this.prefixUrl + '/update-infos',
                data: JSON.stringify(modules)
            };
            return await commonService.getApiResult(req);
        };
        serviceFactory.delete = _delete;
        serviceFactory.updateInfos = _updateInfos;
        return serviceFactory;

    }]);

'use strict';
app.controller('ModuleArticleController',
    ['$scope', '$rootScope', 'ngAppSettings', '$routeParams', '$location', 'ModuleArticleService', 'CommonService',
        function ($scope, $rootScope, ngAppSettings, $routeParams, $location, service, commonService) {
            BaseCtrl.call(this, $scope, $rootScope, $routeParams, ngAppSettings, service);
            $scope.cates = ['Site', 'System'];
            $scope.others = [];
            $scope.settings = $rootScope.globalSettings;
            $scope.moduleId = $routeParams.id;
            $scope.canDrag = $scope.request.orderBy !== 'Priority' || $scope.request.direction !== '0';
            $scope.translate = $rootScope.translate;
            $scope.moduleId = $routeParams.id;
            $scope.getList = async function () {
                $rootScope.isBusy = true;
                var id = $routeParams.id;
                $scope.moduleId = $routeParams.id;
                $scope.request.query = '&module_id=' + id;
                $scope.canDrag = $scope.request.orderBy !== 'Priority' || $scope.request.direction !== '0';
                var response = await service.getList($scope.request);
                if (response.isSucceed) {
                    $scope.data = response.data;
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
                else {
                    $rootScope.showErrors(response.errors);
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
            };
            $scope.preview = function (item) {
                item.editUrl = '/portal/article/details/' + item.id;
                $rootScope.preview('article', item, item.title, 'modal-lg');
            };
            $scope.remove = function (moduleId, articleId) {
                $rootScope.showConfirm($scope, 'removeConfirmed', [moduleId, articleId], null, 'Remove', 'Are you sure');
            };

            $scope.removeConfirmed = async function (moduleId, articleId) {
                $rootScope.isBusy = true;
                var result = await service.delete(moduleId, articleId);
                if (result.isSucceed) {
                    if ($scope.removeCallback) {
                        $rootScope.executeFunctionByName('removeCallback', $scope.removeCallbackArgs, $scope)
                    }
                    $scope.getList();
                }
                else {
                    $rootScope.showMessage('failed');
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
            };

            $scope.saveCallback = function () {
            }
            $scope.removeCallback = function () {
            }

            $scope.saveOthers = async function () {
                var response = await service.saveList($scope.others);
                if (response.isSucceed) {
                    $scope.getList();
                    $scope.$apply();
                }
                else {
                    $rootScope.showErrors(response.errors);
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
            }
            $scope.updateInfos = async function (index) {
                $scope.data.items.splice(index, 1);
                $rootScope.isBusy = true;
                var startIndex = $scope.data.items[0].priority-1;
                for (var i = 0; i < $scope.data.items.length; i++) {
                    $scope.data.items[i].priority = startIndex + i + 1;
                }
                var resp = await service.updateInfos($scope.data.items);
                if (resp && resp.isSucceed) {
                    $scope.activedPage = resp.data;
                    $rootScope.showMessage('success', 'success');
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
                else {
                    if (resp) { $rootScope.showErrors(resp.errors); }
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
            }
        }]);

'use strict';
app.factory('ModuleArticleService', ['$rootScope', 'CommonService', 'BaseService',
    function ($rootScope, commonService, baseService) {

        var serviceFactory = Object.create(baseService);
        serviceFactory.init('module-article');
        var _delete = async function(moduleId, articleId){
            var url = this.prefixUrl + '/delete/' + moduleId+'/'+articleId;
            var req = {
                method: 'GET',
                url: url
            };
            return await commonService.getApiResult(req);
        }
        var _updateInfos = async function (modules) {

            var req = {
                method: 'POST',
                url: this.prefixUrl + '/update-infos',
                data: JSON.stringify(modules)
            };
            return await commonService.getApiResult(req);
        };
        serviceFactory.delete = _delete;
        serviceFactory.updateInfos = _updateInfos;
        return serviceFactory;

    }]);

'use strict';
app.controller('ModuleGalleryController',
    ['$scope', '$rootScope', 'ngAppSettings', '$routeParams', '$location', 'ModuleGalleryService', 'CommonService',
        function ($scope, $rootScope, ngAppSettings, $routeParams, $location, service, commonService) {
            BaseCtrl.call(this, $scope, $rootScope, $routeParams, ngAppSettings, service);
            $scope.cates = ['Site', 'System'];
            $scope.others = [];
            $scope.settings = $rootScope.globalSettings;
            $scope.moduleId = $routeParams.id;
            $scope.canDrag = $scope.request.orderBy !== 'Priority' || $scope.request.direction !== '0';
            $scope.translate = $rootScope.translate;
            $scope.moduleId = $routeParams.id;
            $scope.getList = async function () {
                $rootScope.isBusy = true;
                var id = $routeParams.id;
                $scope.moduleId = $routeParams.id;
                $scope.request.query = '&module_id=' + id;
                $scope.canDrag = $scope.request.orderBy !== 'Priority' || $scope.request.direction !== '0';
                var response = await service.getList($scope.request);
                if (response.isSucceed) {
                    $scope.data = response.data;
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
                else {
                    $rootScope.showErrors(response.errors);
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
            };
            $scope.remove = function (moduleId, articleId) {
                $rootScope.showConfirm($scope, 'removeConfirmed', [moduleId, articleId], null, 'Remove', 'Are you sure');
            };

            $scope.removeConfirmed = async function (moduleId, articleId) {
                $rootScope.isBusy = true;
                var result = await service.delete(moduleId, articleId);
                if (result.isSucceed) {
                    if ($scope.removeCallback) {
                        $rootScope.executeFunctionByName('removeCallback', $scope.removeCallbackArgs, $scope)
                    }
                    $scope.getList();
                }
                else {
                    $rootScope.showMessage('failed');
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
            };

            $scope.saveCallback = function () {
            }
            $scope.removeCallback = function () {
            }

            $scope.saveOthers = async function () {
                var response = await service.saveList($scope.others);
                if (response.isSucceed) {
                    $scope.getList();
                    $scope.$apply();
                }
                else {
                    $rootScope.showErrors(response.errors);
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
            }
            $scope.updateInfos = async function (index) {
                $scope.data.items.splice(index, 1);
                $rootScope.isBusy = true;
                var startIndex = $scope.data.items[0].priority-1;
                for (var i = 0; i < $scope.data.items.length; i++) {
                    $scope.data.items[i].priority = startIndex + i + 1;
                }
                var resp = await service.updateInfos($scope.data.items);
                if (resp && resp.isSucceed) {
                    $scope.activedPage = resp.data;
                    $rootScope.showMessage('success', 'success');
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
                else {
                    if (resp) { $rootScope.showErrors(resp.errors); }
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
            }
        }]);

'use strict';
app.factory('ModuleGalleryService', ['$rootScope', 'CommonService', 'BaseService',
    function ($rootScope, commonService, baseService) {

        var serviceFactory = Object.create(baseService);
        serviceFactory.init('module-article');
        var _delete = async function(moduleId, articleId){
            var url = this.prefixUrl + '/delete/' + moduleId+'/'+articleId;
            var req = {
                method: 'GET',
                url: url
            };
            return await commonService.getApiResult(req);
        }
        var _updateInfos = async function (modules) {

            var req = {
                method: 'POST',
                url: this.prefixUrl + '/update-infos',
                data: JSON.stringify(modules)
            };
            return await commonService.getApiResult(req);
        };
        serviceFactory.delete = _delete;
        serviceFactory.updateInfos = _updateInfos;
        return serviceFactory;

    }]);

'use strict';
app.controller('OrderController', ['$scope', '$rootScope', 'ngAppSettings', '$routeParams', '$timeout', '$location', 'AuthService', 'OrderServices', 'ngAppSettings',
    function ($scope, $rootScope, ngAppSettings, $routeParams, $timeout, $location, authService, orderServices) {
        $scope.request = angular.copy(ngAppSettings.request);
        $scope.request.contentStatuses = [
            'Waiting',
            'Serving',
            'Rated',
            'Finished'
        ];
        $scope.request.status = '2';
        $scope.activedOrder = null;
        $scope.relatedOrders = [];
        $rootScope.isBusy = false;
        $scope.data = {
            pageIndex: 0,
            pageSize: 1,
            totalItems: 0,
            items: []
        };
        $scope.errors = [];

        $scope.range = function (max) {
            var input = [];
            for (var i = 1; i <= max; i += 1) input.push(i);
            return input;
        }

        $scope.loadOrder = async function () {
            $rootScope.isBusy = true;
            var id = $routeParams.id;
            var response = await orderServices.getOrder(id, 'portal');
            if (response.isSucceed) {
                $scope.activedOrder = response.data;
                $rootScope.initEditor();
                $rootScope.isBusy = false;
                $scope.$apply();
            }
            else {
                $rootScope.showErrors(response.errors);
                $rootScope.isBusy = false;
                $scope.$apply();
            }
        };
        $scope.loadOrders = async function (pageIndex) {
            if (pageIndex !== undefined) {
                $scope.request.pageIndex = pageIndex;
            }
            if ($scope.request.fromDate !== null) {
                var d = new Date($scope.request.fromDate);
                $scope.request.fromDate = d.toISOString();
            }
            if ($scope.request.toDate !== null) {
                var d = new Date($scope.request.toDate);
                $scope.request.toDate = d.toISOString();
            }
            $rootScope.isBusy = true;
            var resp = await orderServices.getOrders($scope.request);
            if (resp && resp.isSucceed) {

                ($scope.data = resp.data);
                //$("html, body").animate({ "scrollTop": "0px" }, 500);
                $.each($scope.data.items, function (i, order) {

                    $.each($scope.activedOrders, function (i, e) {
                        if (e.orderId === order.id) {
                            order.isHidden = true;
                        }
                    })
                })
                $rootScope.isBusy = false;
                $scope.$apply();
            }
            else {
                if (resp) { $rootScope.showErrors(resp.errors); }
                $rootScope.isBusy = false;
                $scope.$apply();
            }
        };

        $scope.removeOrder = function (id) {
            $rootScope.showConfirm($scope, 'removeOrderConfirmed', [id], null, 'Remove Order', 'Are you sure');
        };

        $scope.removeOrderConfirmed = async function (id) {
            $rootScope.isBusy = true;
            var result = await orderServices.removeOrder(id);
            if (result.isSucceed) {
                $scope.loadOrders();
            }
            else {
                $rootScope.showMessage('failed');
                $rootScope.isBusy = false;
                $scope.$apply();
            }
        };

        $scope.saveOrder = async function (order) {
            order.content = $('.editor-content.content').val();
            order.excerpt = $('.editor-content.excerpt').val();
            $rootScope.isBusy = true;
            var resp = await orderServices.saveOrder(order);
            if (resp && resp.isSucceed) {
                $scope.activedOrder = resp.data;
                $rootScope.showMessage('Thành công', 'success');
                $rootScope.isBusy = false;
                $scope.$apply();
                //$location.path('/portal/order/details/' + resp.data.id);
            }
            else {
                if (resp) { $rootScope.showErrors(resp.errors); }
                $rootScope.isBusy = false;
                $scope.$apply();
            }
        };

        $scope.preview = function (item) {
            $rootScope.preview('order', item, item.title, 'modal-lg');
        };
    }]);

'use strict';
app.factory('OrderServices', ['$http', '$rootScope', 'CommonService', function ($http, $rootScope, commonService) {

    //var serviceBase = 'http://ngauthenticationapi.azurewebsites.net/';

    var ordersServiceFactory = {};

    var settings = $rootScope.globalSettings

    var _getOrder = async function (id, type) {
        var apiUrl = '/' + settings.lang + '/order/';
        var url = apiUrl + 'details/' + type;
        if (id) {
            url += '/' + id;
        }
        var req = {
            method: 'GET',
            url: url
        };
        return await commonService.getApiResult(req)
    };

    var _initOrder = async function (type) {
        var apiUrl = '/' + settings.lang + '/order/';
        var req = {
            method: 'GET',
            url: apiUrl + 'init/' + type,
        };
        return await commonService.getApiResult(req)
    };

    var _getOrders = async function (request) {
        var apiUrl = '/' + settings.lang + '/order/';
        var req = {
            method: 'POST',
            url: apiUrl + 'list',
            data: JSON.stringify(request)
        };
        
        return await commonService.getApiResult(req);
    };

    var _removeOrder = async function (id) {
        var apiUrl = '/' + settings.lang + '/order/';
        var req = {
            method: 'GET',
            url: apiUrl + 'delete/' + id
        };
        return await commonService.getApiResult(req)
    };

    var _saveOrder = async function (order) {
        var apiUrl = '/' + settings.lang + '/order/';
        var req = {
            method: 'POST',
            url: apiUrl + 'save',
            data: JSON.stringify(order)
        };
        return await commonService.getApiResult(req)
    };

    ordersServiceFactory.getOrder = _getOrder;
    ordersServiceFactory.initOrder = _initOrder;
    ordersServiceFactory.getOrders = _getOrders;
    ordersServiceFactory.removeOrder = _removeOrder;
    ordersServiceFactory.saveOrder = _saveOrder;
    return ordersServiceFactory;

}]);

'use strict';
app.controller('PageController', ['$scope', '$rootScope', 'ngAppSettings', '$location', '$routeParams',
            'PageService','PageArticleService','PagePageService', 'UrlAliasService',
    function ($scope, $rootScope, ngAppSettings, $location, $routeParams, 
            service, pageArticleService, pagePageService, urlAliasService) {
        BaseCtrl.call(this, $scope, $rootScope, $routeParams, ngAppSettings, service);        
        $scope.request.query = 'level=0';       
        $scope.pageData={
            articles:[],
            products:[],
            data:[],
        };
        $scope.articleRequest = angular.copy(ngAppSettings.request);
        $scope.canDrag = $scope.request.orderBy !== 'Priority' || $scope.request.direction !== '0';
        $scope.loadArticles = async function () {
            $rootScope.isBusy = true;
            var id = $routeParams.id;
            $scope.articleRequest.query += '&page_id='+id;
            var response = await pageArticleService.getList($scope.articleRequest);
            if (response.isSucceed) {
                $scope.pageData.articles = response.data;
                $rootScope.isBusy = false;
                $scope.$apply();
            }
            else {
                $rootScope.showErrors(response.errors);
                $rootScope.isBusy = false;
                $scope.$apply();
            }
        };
        $scope.getListSuccessCallback = function(){
            $scope.canDrag = $scope.request.orderBy !== 'Priority' || $scope.request.direction !== '0';
        };
        $scope.showChilds = function(id){
            $('#childs-'+ id).toggleClass('collapse');
        };
        $scope.updateInfos = async function (index) {
            $scope.data.items.splice(index, 1);
            $rootScope.isBusy = true;
            var startIndex = $scope.data.items[0].priority-1;
            for (var i = 0; i < $scope.data.items.length; i++) {
                $scope.data.items[i].priority = startIndex + i + 1;
            }
            var resp = await service.updateInfos($scope.data.items);
            if (resp && resp.isSucceed) {
                $scope.activedPage = resp.data;
                $rootScope.showMessage('success', 'success');
                $rootScope.isBusy = false;
                $scope.$apply();
            }
            else {
                if (resp) { $rootScope.showErrors(resp.errors); }
                $rootScope.isBusy = false;
                $scope.$apply();
            }
        }
        $scope.goUp = async function (items, index) {
            items[index].priority -= 1; 
            items[index-1].priority += 1;             
        }
        
        $scope.goDown = async function (items, index) {
            items[index].priority += 1; 
            items[index-1].priority -= 1;             
        }
        
        $scope.updatePagePage = async function (items) {
            $rootScope.isBusy = true;            
            var resp = await pagePageService.updateInfos(items);
            if (resp && resp.isSucceed) {
                $scope.activedPage = resp.data;
                $rootScope.showMessage('success', 'success');
                $scope.getList();
            }
            else {
                if (resp) { $rootScope.showErrors(resp.errors); }
                $rootScope.isBusy = false;
                $scope.$apply();
            }          
        }
        // $scope.saveCallback = function () {
        //     $location.url($scope.referrerUrl);
        // }

        $scope.addAlias = async function(){
            var getAlias = await urlAliasService.getSingle();
            if(getAlias.isSucceed){                
                $scope.activedData.urlAliases.push(getAlias.data);
                $rootScope.isBusy = false;
                $scope.$apply();
            }
            else{
                $rootScope.showErrors(getAlias.errors);
                $rootScope.isBusy = false;
                $scope.$apply();
            }
        }
        
        $scope.removeAliasCallback = async function(index){
            $scope.activedData.urlAliases.splice(index, 1);
            $scope.$apply();
        }
        
    }]);

'use strict';
app.factory('PageService', ['$rootScope', 'CommonService', 'BaseService',
    function ($rootScope, commonService, baseService) {

        var serviceFactory = Object.create(baseService);
        serviceFactory.init('page');
        var _updateInfos = async function (pages) {

            var req = {
                method: 'POST',
                url: this.prefixUrl + '/update-infos',
                data: JSON.stringify(pages)
            };
            return await commonService.getApiResult(req);
        };
        serviceFactory.updateInfos = _updateInfos;
        return serviceFactory;

    }]);

'use strict';
app.controller('PageArticleController',
    [
        '$scope', '$rootScope', 'ngAppSettings', '$routeParams', '$location',
        'PageArticleService', 'ArticleService', 'CommonService',
        function ($scope, $rootScope, ngAppSettings, $routeParams, $location,
            service, articleService, commonService) {
            BaseCtrl.call(this, $scope, $rootScope, $routeParams, ngAppSettings, service);
            $scope.cates = ['Site', 'System'];
            $scope.others=[];
            $scope.settings = $rootScope.globalSettings;
            $scope.pageId = $routeParams.id;
            $scope.canDrag = $scope.request.orderBy !== 'Priority' || $scope.request.direction !== '0';
            $scope.getList = async function () {
                $rootScope.isBusy = true;
                var id = $routeParams.id;
                $scope.request.query = '&page_id=' + id;
                var response = await service.getList($scope.request);
                $scope.canDrag = $scope.request.orderBy !== 'Priority' || $scope.request.direction !== '0';
                if (response.isSucceed) {
                    $scope.data = response.data;
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
                else {
                    $rootScope.showErrors(response.errors);
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
            };
            $scope.preview = function (item) {
                item.editUrl = '/portal/article/details/' + item.id;
                $rootScope.preview('article', item, item.title, 'modal-lg');
            };
            $scope.remove = function (pageId, articleId) {
                $rootScope.showConfirm($scope, 'removeConfirmed', [pageId, articleId], null, 'Remove', 'Are you sure');
            };

            $scope.removeConfirmed = async function (pageId, articleId) {
                $rootScope.isBusy = true;
                var result = await service.delete(pageId, articleId);
                if (result.isSucceed) {
                    if ($scope.removeCallback) {
                        $rootScope.executeFunctionByName('removeCallback', $scope.removeCallbackArgs, $scope)
                    }
                    $scope.getList();
                }
                else {
                    $rootScope.showMessage('failed');
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
            };

            $scope.saveCallback = function () {
            }
            $scope.removeCallback = function () {
            }

            $scope.saveOthers = async function(){                
                var response = await service.saveList($scope.others);
                if (response.isSucceed) {
                    $scope.getList();
                    $scope.$apply();
                }
                else {
                    $rootScope.showErrors(response.errors);
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
            }
            $scope.updateInfos = async function (index) {
                $scope.data.items.splice(index, 1);
                $rootScope.isBusy = true;
                var startIndex = $scope.data.items[0].priority-1;
                for (var i = 0; i < $scope.data.items.length; i++) {
                    $scope.data.items[i].priority = startIndex + i + 1;
                }
                var resp = await service.updateInfos($scope.data.items);
                if (resp && resp.isSucceed) {
                    $scope.activedPage = resp.data;
                    $rootScope.showMessage('success', 'success');
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
                else {
                    if (resp) { $rootScope.showErrors(resp.errors); }
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
            }
        }]);

'use strict';
app.factory('PageArticleService', ['$rootScope', 'CommonService', 'BaseService',
    function ($rootScope, commonService, baseService) {

        var serviceFactory = Object.create(baseService);
        serviceFactory.init('page-article');
        var _delete = async function(pageId, articleId){
            var url = this.prefixUrl + '/delete/' + pageId+'/'+articleId;
            var req = {
                method: 'GET',
                url: url
            };
            return await commonService.getApiResult(req);
        }
        var _updateInfos = async function (pages) {

            var req = {
                method: 'POST',
                url: this.prefixUrl + '/update-infos',
                data: JSON.stringify(pages)
            };
            return await commonService.getApiResult(req);
        };
        serviceFactory.delete = _delete;
        serviceFactory.updateInfos = _updateInfos;
        return serviceFactory;

    }]);

'use strict';
app.controller('PageGalleryController',
    [
        '$scope', '$rootScope', 'ngAppSettings', '$routeParams', '$location',
        'PageGalleryService', 'ArticleService', 'CommonService',
        function ($scope, $rootScope, ngAppSettings, $routeParams, $location,
            service, articleService, commonService) {
            BaseCtrl.call(this, $scope, $rootScope, $routeParams, ngAppSettings, service);
            $scope.cates = ['Site', 'System'];
            $scope.others=[];
            $scope.settings = $rootScope.globalSettings;
            $scope.pageId = $routeParams.id;
            $scope.canDrag = $scope.request.orderBy !== 'Priority' || $scope.request.direction !== '0';
            $scope.getList = async function () {
                $rootScope.isBusy = true;
                var id = $routeParams.id;
                $scope.request.query = '&page_id=' + id;
                var response = await service.getList($scope.request);
                $scope.canDrag = $scope.request.orderBy !== 'Priority' || $scope.request.direction !== '0';
                if (response.isSucceed) {
                    $scope.data = response.data;
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
                else {
                    $rootScope.showErrors(response.errors);
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
            };
            $scope.remove = function (pageId, articleId) {
                $rootScope.showConfirm($scope, 'removeConfirmed', [pageId, articleId], null, 'Remove', 'Are you sure');
            };

            $scope.removeConfirmed = async function (pageId, articleId) {
                $rootScope.isBusy = true;
                var result = await service.delete(pageId, articleId);
                if (result.isSucceed) {
                    if ($scope.removeCallback) {
                        $rootScope.executeFunctionByName('removeCallback', $scope.removeCallbackArgs, $scope)
                    }
                    $scope.getList();
                }
                else {
                    $rootScope.showMessage('failed');
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
            };

            $scope.saveCallback = function () {
            }
            $scope.removeCallback = function () {
            }

            $scope.saveOthers = async function(){                
                var response = await service.saveList($scope.others);
                if (response.isSucceed) {
                    $scope.getList();
                    $scope.$apply();
                }
                else {
                    $rootScope.showErrors(response.errors);
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
            }
            $scope.updateInfos = async function (index) {
                $scope.data.items.splice(index, 1);
                $rootScope.isBusy = true;
                var startIndex = $scope.data.items[0].priority-1;
                for (var i = 0; i < $scope.data.items.length; i++) {
                    $scope.data.items[i].priority = startIndex + i + 1;
                }
                var resp = await service.updateInfos($scope.data.items);
                if (resp && resp.isSucceed) {
                    $scope.activedPage = resp.data;
                    $rootScope.showMessage('success', 'success');
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
                else {
                    if (resp) { $rootScope.showErrors(resp.errors); }
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
            }
        }]);

'use strict';
app.factory('PageGalleryService', ['$rootScope', 'CommonService', 'BaseService',
    function ($rootScope, commonService, baseService) {

        var serviceFactory = Object.create(baseService);
        serviceFactory.init('page-article');
        var _delete = async function(pageId, articleId){
            var url = this.prefixUrl + '/delete/' + pageId+'/'+articleId;
            var req = {
                method: 'GET',
                url: url
            };
            return await commonService.getApiResult(req);
        }
        var _updateInfos = async function (pages) {

            var req = {
                method: 'POST',
                url: this.prefixUrl + '/update-infos',
                data: JSON.stringify(pages)
            };
            return await commonService.getApiResult(req);
        };
        serviceFactory.delete = _delete;
        serviceFactory.updateInfos = _updateInfos;
        return serviceFactory;

    }]);

'use strict';
app.controller('PagePageController',
    [
        '$scope', '$rootScope', 'ngAppSettings', '$routeParams', '$location',
        'PageArticleService', 'ArticleService', 'CommonService',
        function ($scope, $rootScope, ngAppSettings, $routeParams, $location,
            service, articleService, commonService) {
            BaseCtrl.call(this, $scope, $rootScope, $routeParams, ngAppSettings, service);
            $scope.cates = ['Site', 'System'];
            $scope.others=[];
            $scope.settings = $rootScope.globalSettings;
            $scope.pageId = $routeParams.id;
            $scope.canDrag = $scope.request.orderBy !== 'Priority' || $scope.request.direction !== '0';
            $scope.getList = async function () {
                $rootScope.isBusy = true;
                var id = $routeParams.id;
                $scope.request.query = '&page_id=' + id;
                var response = await service.getList($scope.request);
                $scope.canDrag = $scope.request.orderBy !== 'Priority' || $scope.request.direction !== '0';
                if (response.isSucceed) {
                    $scope.data = response.data;
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
                else {
                    $rootScope.showErrors(response.errors);
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
            };
            $scope.remove = function (pageId, articleId) {
                $rootScope.showConfirm($scope, 'removeConfirmed', [pageId, articleId], null, 'Remove', 'Are you sure');
            };

            $scope.removeConfirmed = async function (pageId, articleId) {
                $rootScope.isBusy = true;
                var result = await service.delete(pageId, articleId);
                if (result.isSucceed) {
                    if ($scope.removeCallback) {
                        $rootScope.executeFunctionByName('removeCallback', $scope.removeCallbackArgs, $scope)
                    }
                    $scope.getList();
                }
                else {
                    $rootScope.showMessage('failed');
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
            };

            $scope.saveCallback = function () {
            }
            $scope.removeCallback = function () {
            }

            $scope.saveOthers = async function(){                
                var response = await service.saveList($scope.others);
                if (response.isSucceed) {
                    $scope.getList();
                    $scope.$apply();
                }
                else {
                    $rootScope.showErrors(response.errors);
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
            }
            $scope.updateInfos = async function (index) {
                $scope.data.items.splice(index, 1);
                $rootScope.isBusy = true;
                var startIndex = $scope.data.items[0].priority -1;
                for (var i = 0; i < $scope.data.items.length; i++) {
                    $scope.data.items[i].priority = startIndex + i + 1;
                }
                var resp = await service.updateInfos($scope.data.items);
                if (resp && resp.isSucceed) {
                    $scope.activedPage = resp.data;
                    $rootScope.showMessage('success', 'success');
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
                else {
                    if (resp) { $rootScope.showErrors(resp.errors); }
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
            }
        }]);

'use strict';
app.factory('PagePageService', ['$rootScope', 'CommonService', 'BaseService',
    function ($rootScope, commonService, baseService) {

        var serviceFactory = Object.create(baseService);
        serviceFactory.init('page-page');
        var _delete = async function(pageId, articleId){
            var url = this.prefixUrl + '/delete/' + pageId+'/'+articleId;
            var req = {
                method: 'GET',
                url: url
            };
            return await commonService.getApiResult(req);
        }
        var _updateInfos = async function (pages) {

            var req = {
                method: 'POST',
                url: this.prefixUrl + '/update-infos',
                data: JSON.stringify(pages)
            };
            return await commonService.getApiResult(req);
        };
        serviceFactory.delete = _delete;
        serviceFactory.updateInfos = _updateInfos;
        return serviceFactory;

    }]);

'use strict';
app.controller('PermissionController',
    ['$scope', '$rootScope', 'ngAppSettings', '$routeParams', '$location', 'PermissionService', 'CommonService',
        function ($scope, $rootScope, ngAppSettings, $routeParams, $location, service, commonService) {
            BaseCtrl.call(this, $scope, $rootScope, $routeParams, ngAppSettings, service);
            $scope.request.query = "level=0";
            $scope.miOptions=ngAppSettings.miIcons;
            $scope.columns = [
                {
                    title: 'Keyword',
                    name: 'textKeyword',
                    filter: true,
                    type: 0 // string - ngAppSettings.dataTypes[0]
                },
                {
                    title: 'Default',
                    name: 'textDefault',
                    filter: true,
                    type: 0// string - ngAppSettings.dataTypes[0]
                },
                {
                    title: 'Url',
                    name: 'url',
                    filter: true,
                    type: 0 // string - ngAppSettings.dataTypes[0]
                },
                {
                    title: 'Created Date',
                    name: 'createdDateTime',
                    filter: true,
                    type: 0 // string - ngAppSettings.dataTypes[0]
                },
            ];
            $scope.initCurrentPath = async function(){
                
                var resp = await service.getSingle([null, 'portal']);
                if (resp && resp.isSucceed) { 
                    $scope.activedData = resp.data;
                    $scope.activedData.url = $location.path();
                    $rootScope.isBusy = false;
                    $scope.$applyAsync();
                }
                else { 
                    if (resp) {
                        $rootScope.showErrors(resp.errors);
                    }
                    if ($scope.getSingleFailCallback) {
                        $scope.getSingleFailCallback();
                    }
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
                
            };
            $scope.saveCallback = function(){
                $scope.getSingle();                
            }
            
            $scope.updateInfos = async function (items) {
                $rootScope.isBusy = true;
                var resp = await service.updateInfos(items);
                if (resp && resp.isSucceed) {
                    $scope.activedPage = resp.data;
                    $rootScope.showMessage('success', 'success');
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
                else {
                    if (resp) { $rootScope.showErrors(resp.errors); }
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
            };

            $scope.updateChildInfos = async function (items) {
                $rootScope.isBusy = true;
                var resp = await service.updateChildInfos(items);
                if (resp && resp.isSucceed) {
                    $scope.activedPage = resp.data;
                    $rootScope.showMessage('success', 'success');
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
                else {
                    if (resp) { $rootScope.showErrors(resp.errors); }
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
            };
            $('#dlg-favorite').on('show.bs.modal', function (event) {
                $scope.initCurrentPath();
              });
        }]);

'use strict';
app.factory('PermissionService', ['BaseService','CommonService', function (baseService, commonService) {

    var serviceFactory = Object.create(baseService);
    serviceFactory.init('permission', true);
    var _updateInfos = async function (pages) {
        var req = {
            method: 'POST',
            url: this.prefixUrl + '/update-infos',
            data: JSON.stringify(pages)
        };
        return await commonService.getApiResult(req);
    };

    var _updateChildInfos = async function (pages) {
        var req = {
            method: 'POST',
            url: this.prefixUrl + '/update-child-infos',
            data: JSON.stringify(pages)
        };
        return await commonService.getApiResult(req);
    };

    serviceFactory.updateInfos = _updateInfos;
    serviceFactory.updateChildInfos = _updateChildInfos;
    return serviceFactory;

}]);

'use strict';
app.controller('ProductController', ['$scope', '$rootScope', 'ngAppSettings', '$routeParams', 'ProductService',
    function ($scope, $rootScope, ngAppSettings, $routeParams, service) {
        BaseCtrl.call(this, $scope, $rootScope, $routeParams, ngAppSettings, service);
        $scope.preview = function (item) {
            item.editUrl = '/portal/product/details/' + item.id;
            $rootScope.preview('product', item, item.title, 'modal-lg');
        };
    }]);

'use strict';
app.factory('ProductService', ['BaseService',
    function (baseService) {
        var serviceFactory = Object.create(baseService);
        serviceFactory.init('product');
        return serviceFactory;
    }]);

'use strict';
app.controller('QueenDashboardController', ['$scope', '$rootScope', '$timeout', '$location', 'QueenDashboardServices', function ($scope, $rootScope, $timeout, $location, dashboardServices) {
    $scope.pageClass = 'page-dashboard';
    $('.side-nav li').removeClass('active');
    $('.side-nav .page-dashboard').addClass('active');
    $scope.data = {
        totalPage: 0,
        totalArticle: 0,
        totalProduct: 0,
        totalUser: 0
    };
    $scope.users = [];
    $scope.$on('$viewContentLoaded', function () {
        $rootScope.isBusy = false;

    });
    $scope.getDashboardInfo = async function () {
        var response = await dashboardServices.getDashboardInfo();
        if (response.isSucceed) {
            var incomes = [];
            var services = [];
            angular.forEach(response.data.statitics, function (value, key) {
                incomes.push(value.totalSpent);
                services.push(value.totalService);
            });
            setTimeout(function () {
                demo.initDashboardPageCharts(incomes, services);
            }, 2000)
            $scope.data = response.data;
            $scope.$apply();
        }
        else {
            $rootScope.showErrors(response.errors);
            $scope.$apply();
        }
    }
}]);
'use strict';
app.factory('QueenDashboardServices', ['$http', 'CommonService', function ($http, commonService) {

    //var serviceBase = 'http://ngauthenticationapi.azurewebsites.net/';

    var usersServiceFactory = {};
    var apiUrl = '/en-us/queen-beauty/';
    var _getDashboardInfo = async function () {
        var req = {
            method: 'GET',
            url: apiUrl + 'dashboard'
        };

        return await commonService.getApiResult(req);
    };

    usersServiceFactory.getDashboardInfo = _getDashboardInfo;
    return usersServiceFactory;

}]);

'use strict';
app.controller('RoleController', ['$scope', '$rootScope', 'ngAppSettings', '$routeParams', 'RoleService',
    function ($scope, $rootScope, ngAppSettings, $routeParams, service) {
        BaseCtrl.call(this, $scope, $rootScope, $routeParams, ngAppSettings, service);
        $scope.role = { name: '' };
        $scope.createRole = async function () {
            $rootScope.isBusy = true;
            var result = await service.createRole($scope.role.name);
            if (result.isSucceed) {
                $scope.role.name = '';
                $scope.getList();
            }
            else {
                $rootScope.showMessage(result.errors);
                $rootScope.isBusy = false;
                $scope.$apply();
            }
        };

    }]);

'use strict';
app.factory('RoleService', ['BaseService','CommonService', function (baseService, commonService) {
    var serviceFactory = Object.create(baseService);
    serviceFactory.init('role', true);

    var _getPermissions = async function () {
        var req = {
            method: 'GET',
            url: this.prefixUrl + '/permissions'
        };
        return await commonService.getApiResult(req);
    };

    var _updatePermission = async function (permission) {
        var req = {
            method: 'POST',
            url: this.prefixUrl + '/update-permission',
            data: JSON.stringify(permission)
        };
        return await commonService.getApiResult(req);
    };
    var _createRole = function (name) {
        var req = {
            method: 'POST',
            url: this.prefixUrl + '/create',
            data: JSON.stringify(name)
        };

        return commonService.getApiResult(req);
    };
    serviceFactory.createRole = _createRole;
    serviceFactory.getPermissions = _getPermissions;
    serviceFactory.updatePermission = _updatePermission;
    return serviceFactory;

}]);

'use strict';
app.controller('TemplateController', ['$scope', '$rootScope', '$routeParams', '$location', 'ngAppSettings', 'TemplateService',
    function ($scope, $rootScope, $routeParams, $location, ngAppSettings, service) {
        BaseCtrl.call(this, $scope, $rootScope, $routeParams, ngAppSettings, service);
        $scope.folderTypes = [
            'Masters',
            'Layouts',
            'Pages',
            'Modules',
            'Forms',
            'Edms',
            'Products',
            'Articles',
            'Widgets',
        ];
        $scope.activedPane = null;
        $scope.selectPane=function(pane){
            $scope.activedPane = pane;
        }
        $scope.loadFolder = function (d) {
            $location.url('/portal/template/list/' + $routeParams.themeId + '?folderType=' + encodeURIComponent(d));
        }
        $scope.loadParams = async function () {
            $rootScope.isBusy = true;
            $scope.folderType = $routeParams.folderType;// ? $routeParams.folderType : 'Masters';
            $scope.themeId = $routeParams.themeId;
        }
        $scope.getSingle = async function () {
            $rootScope.isBusy = true;
            var id = $routeParams.id;
            $scope.folderType = $routeParams.folderType;// ? $routeParams.folderType : 'Masters';
            var themeId = $routeParams.themeId;
            $scope.listUrl = '/portal/template/list/' + themeId + '?folderType=' + encodeURIComponent($scope.folderType);
            var resp = await service.getSingle(['portal', themeId, $scope.folderType, id]);
            if (resp && resp.isSucceed) {
                $scope.activedData = resp.data;
                $rootScope.isBusy = false;
                $scope.$apply();
            }
            else {
                if (resp) { $rootScope.showErrors(resp.errors); }
                $rootScope.isBusy = false;
                $scope.$apply();
            }
        };
        $scope.getList = async function (pageIndex, themeId) {
            $scope.themeId = themeId || $routeParams.themeId;
            $scope.request.key = $routeParams.folderType;
            $scope.folderType = $routeParams.folderType;
            if ($scope.folderType) {
                if (pageIndex !== undefined) {
                    $scope.request.pageIndex = pageIndex;
                }
                if ($scope.request.fromDate !== null) {
                    var d = new Date($scope.request.fromDate);
                    $scope.request.fromDate = d.toISOString();
                }
                if ($scope.request.toDate !== null) {
                    var d = new Date($scope.request.toDate);
                    $scope.request.toDate = d.toISOString();
                }
                var resp = await service.getList($scope.request, [$scope.themeId]);
                if (resp && resp.isSucceed) {
                    $scope.data = resp.data;
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
                else {
                    if (resp) { $rootScope.showErrors(resp.errors); }
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
            } else {
                $rootScope.isBusy = false;
            }
        };
    }]);

'use strict';
app.factory('TemplateService', ['BaseService',
    function (baseService) {

        var serviceFactory = Object.create(baseService);
        serviceFactory.init('template');        
        return serviceFactory;

    }]);

'use strict';
app.controller('SocialFeedController',
    ['$rootScope', '$scope', '$http', 'ArticleService',
        function ($rootScope, $scope, $http, articleService) {
            $scope.types = [
                'Facebook',
                'Instagram'
            ];
            $scope.isInit = false;
            $scope.defaultArticle = null;
            $scope.defaultProperty = {
                name: null,
                dataType: 7,
                value: ""
            }
            $scope.data = [];
            $scope.errors = [];
            $scope.socialSettings = {
                app_id: null,
                page_id: null,
                app_secret: null,
                access_token: '',
                page: [],
                data: [],
                posts: [],
                show_login: true,
                errors: []
            };
            $scope.init = async function () {

                window.fbAsyncInit = function () {
                    FB.init({
                        appId: $rootScope.getConfiguration('FacebookAppId'),
                        autoLogAppEvents: true,
                        xfbml: true,
                        version: 'v3.2'
                    });
                };
                $scope.socialSettings = {
                    app_id: $rootScope.settings.data.FacebookAppId,
                    page_id: $rootScope.settings.data.Facebook_Page_Id,
                    app_secret: $rootScope.settings.data.FacebookAppSecret,
                    access_token: $rootScope.settings.data.FacebookAccessToken,
                    show_login: true,
                    errors: []
                };
                if ($scope.socialSettings.access_token) {
                    $scope.socialSettings.show_login = false;
                    $scope.loadPages();

                }
                articleService.getSingle(['portal']).then((resp) => {
                    $scope.defaultArticle = resp.data;
                });
            };

            // This function is called when someone finishes with the Login
            // Button.  See the onlogin handler attached to it in the sample
            // code below.
            $scope.login = function () {
                FB.login(function (response) {
                    // handle the response
                    $scope.statusChangeCallback(response);

                }, {
                        scope: 'email, manage_pages',
                        return_scopes: true
                    });
            }

            $scope.statusChangeCallback = function (response) {
                // The response object is returned with a status field that lets the
                // app know the current login status of the person.
                // Full docs on the response object can be found in the documentation
                // for FB.getLoginStatus().
                if (response.status === 'connected') {
                    // Logged into your app and Facebook.
                    $scope.exchangeToken(response);
                    $scope.loadPages();
                    //window.location = '/bo/feed?code=' + response.authResponse.accessToken;
                } else {
                    $scope.socialSettings.show_login = true;
                    $scope.$apply();
                    // The person is not logged into your app or we are unable to tell.                    
                }
            }

            $scope.exchangeToken = function (response) {
                var url = '/oauth/access_token?grant_type=fb_exchange_token&client_id=' + $scope.socialSettings.app_id + '&client_secret=' + $scope.socialSettings.app_secret + '&fb_exchange_token=' + response.authResponse.accessToken;
                FB.api(url, function (response) {
                    if (response.access_token) {
                        $scope.socialSettings.access_token = response.access_token;
                    }
                    else {
                        $scope.show_login = true;
                        $scope.socialSettings.errors = response;
                        $scope.$apply();
                    }
                });
            }
            $scope.loadFeeds = function (url) {
                $scope.socialSettings.errors = '';
                $scope.socialSettings.posts = [];
                url = url || '/' + $scope.socialSettings.page_id + '/posts?access_token=' + $scope.socialSettings.access_token + '&fields=type,name,story,full_picture,created_time,permalink_url,message,description,caption,attachments{media,type,target,subattachments},shares.summary(true).limit(0),likes.summary(true).limit(0),comments.summary(true).limit(0)&limit=10';
                $rootScope.isBusy = true;
                FB.api(url, function (response) {
                    if (response.data) {
                        $scope.socialSettings.data = response.data;
                        angular.forEach(response.data, function (e, i) {
                            var post = $scope.parsePost(e);
                            $scope.socialSettings.posts.push(post);
                        });
                        if (response.paging) {
                            $scope.socialSettings.nextUrl = response.paging.next;
                            $scope.socialSettings.prevUrl = response.paging.previous;
                        }
                        $rootScope.isBusy = false;
                        $scope.$apply();
                    }
                    else {
                        $scope.socialSettings.show_login = true;
                        $rootScope.isBusy = false;
                        $scope.socialSettings.errors = response;
                        $scope.$apply();
                    }
                    console.log(response);
                });
            }
            $scope.loadPages = function () {
                $scope.socialSettings.errors = '';
                var url = '/me/accounts?access_token=' + $scope.socialSettings.access_token + '&fields=id,name';
                FB.api(url, function (response) {
                    if (response.data) {
                        $scope.socialSettings.pages = response.data;
                        $scope.$apply();
                    }
                    else {
                        $scope.socialSettings.show_login = true;
                        $scope.socialSettings.errors = response;
                    }
                });
            }
            $scope.setAttr = function (e, attrName, attVal) {
                $(e).attr(attrName, attVal);
            };
            $scope.parsePost = function (post) {
                var article = angular.copy($scope.defaultArticle);
                var prop = angular.copy($scope.defaultProperty);
                article.title = "Facebook Id";
                article.name = "facebook_id";
                article.value = post.id;
                article.properties.push(prop);

                article.title = post.name || post.id;
                article.excerpt = post.message;
                article.content = post.description;
                article.source = 'Facebook';
                article.image = post.full_picture;
                article.detailsUrl = post.permalink_url
                var attachments = post.attachments.data[0];

                if (attachments.media) {
                    var media = $scope.parseMedia(attachments.media, attachments.type);
                    if (media) {
                        article.mediaNavs.push({
                            media: media,
                            specificulture: $rootScope.settings.lang,
                            image: media.fullPath
                        });
                    }
                }

                if (attachments.subattachments) {
                    var medias = $scope.parseMedias(attachments.subattachments.data);
                    angular.forEach(medias, function (e, i) {
                        article.mediaNavs.push({
                            media: e,
                            specificulture: $rootScope.settings.lang,
                            image: e.fullPath
                        })
                    })
                }
                return article;
            }
            $scope.parseMedias = function (data) {
                var result = [];
                if (data) {
                    angular.forEach(data, function (e, i) {
                        var media = $scope.parseMedia(e.media, e.type);
                        if (media) {
                            result.push(media);
                        }
                    })
                }
                return result;
            }
            $scope.parseMedia = function (media, type) {
                if (media) {
                    var src = '';
                    switch (type) {
                        case 'video_autoplay':
                            src = media.source;
                            break;
                        case 'profile_media':
                        case 'photo':
                        default:
                            src = media.image.src;
                            break;
                    }
                    try {
                        if (src) {
                            var index = src.lastIndexOf('/');
                            var ext = src.match(/.(?:jpg|gif|png|gif|jpeg|mp4)/)[0];
                            // if valid  file
                            if (ext) {
                                var eIndex = src.indexOf(ext);
                                var filename = src.substring(index + 1, eIndex);
                                var media = {
                                    fileName: filename,
                                    fileFolder: 'Facebook',
                                    extension: ext,
                                    targetUrl: src,
                                    fullPath: src,
                                    fileType: type,
                                    source: 'Facebook'
                                }

                                return media;
                            }
                            else {
                                return null;
                            }
                        } else {
                            return null;
                        }
                    }
                    catch (err) {
                        console.log('Cannot parse media', media);
                        return null;
                    }
                }
            }
            $scope.syncPosts = async function () {
                $rootScope.isBusy = true;
                var resp = await articleService.saveList($scope.socialSettings.posts);
                if (resp && resp.isSucceed) {
                    $rootScope.showMessage('success', 'success');
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
                else {
                    if (resp) { $rootScope.showErrors(resp.errors); }
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
            }
        }]);
'use strict';
app.controller('ThemeController', ['$scope', '$rootScope', 'ngAppSettings', '$routeParams', '$location', 'ThemeService', 'CommonService',
    function ($scope, $rootScope, ngAppSettings, $routeParams, $location, service, commonService) {
        BaseCtrl.call(this, $scope, $rootScope, $routeParams, ngAppSettings, service);
        $scope.exportData = null;
        $scope.selectedExport = {
            pages:[],
            modules:[]
        };
        
        $scope.getSingleSuccessCallback = function () {
            $scope.assets = null;
            $scope.theme = null;
        }
        $scope.save = async function (activedData) {
            var form = document.getElementById('frm-theme');
            var frm = new FormData();
            var url = service.prefixUrl + '/save';

            $rootScope.isBusy = true;
            // Looping over all files and add it to FormData object
            frm.append('assets', form['assets'].files[0]);
            frm.append('theme', form['theme'].files[0]);
            // Adding one more key to FormData object
            frm.append('model', angular.toJson(activedData));

            var response = await service.ajaxSubmitForm(frm, url);
            if (response.isSucceed) {
                $scope.activedData = response.data;
                $rootScope.isBusy = false;
                $location.url($scope.referrerUrl);
                $scope.$apply();
            }
            else {
                $rootScope.showErrors(response.errors);
                $rootScope.isBusy = false;
                $scope.$apply();
            }
        }
        $scope.syncTemplates = async function (id) {
            $rootScope.isBusy = true;
            var response = await service.syncTemplates(id);
            if (response.isSucceed) {
                $scope.activedData = response.data;
                $rootScope.isBusy = false;
                $scope.$apply();
            }
            else {
                $rootScope.showErrors(response.errors);
                $rootScope.isBusy = false;
                $scope.$apply();
            }
        };
        
        $scope.export = async function () {
            var id = $routeParams.id;
            $rootScope.isBusy = true;
            var response = await service.export(id, $scope.selectedExport);
            if (response.isSucceed) {
                $rootScope.isBusy = false;
                window.open(response.data, '_blank');
                $scope.$apply();
            }
            else {
                $rootScope.showErrors(response.errors);
                $rootScope.isBusy = false;
                $scope.$apply();
            }
        };
        $scope.saveCallback = function () {
            commonService.initAllSettings().then(function () {
                $location.path('/portal/theme/list');
            });
        }
        $scope.removeCallback = function () {
            commonService.initAllSettings().then(function () {
                $location.path('/portal/theme/list');
            });
        }

        $scope.getExportData = async function(){
            var id = $routeParams.id;
            var resp = await service.getExportData(id);  
            if (resp && resp.isSucceed) {
                $scope.exportData = resp.data;
                $rootScope.isBusy = false;
                $scope.$apply();
            } else {
                if (resp) {
                    $rootScope.showErrors(resp.errors);
                }
                $rootScope.isBusy = false;
                $scope.$apply();
            }          
        };
        
        $scope.generateSEO = function(){
            $scope.activedData.name = $rootScope.generateKeyword($scope.activedData.title, '-');
        }
    }]);

'use strict';
app.factory('ThemeService', ['CommonService', 'BaseService',
    function (commonService, baseService) {

        var serviceFactory = Object.create(baseService);
        serviceFactory.init('theme');

        var _syncTemplates = async function (id) {
            var url = this.prefixUrl + '/sync/' + id;
            var req = {
                method: 'GET',
                url: url
            };
            return await commonService.getApiResult(req, '');
        };
        var _export = async function (id, objData) {
            var url = this.prefixUrl + '/export/' + id;
            var req = {
                method: 'POST',
                url: url,
                data: JSON.stringify(objData)
            };
            return await commonService.getApiResult(req);
        };
        var _getExportData = async function (id) {
            var url = (this.prefixUrl || '/' + this.lang + '/' + this.modelName) + '/export/'+ id;
            var req = {
                method: 'GET',
                url: url
            };
            return await commonService.getApiResult(req);
        };
        serviceFactory.export = _export;
        serviceFactory.syncTemplates = _syncTemplates;
        serviceFactory.getExportData = _getExportData;
        return serviceFactory;

    }]);

'use strict';
app.controller('UrlAliasController',
    [
        '$scope', '$rootScope', 'ngAppSettings', '$routeParams', '$location',
        'UrlAliasService', 'CommonService',
        function ($scope, $rootScope, ngAppSettings, $routeParams, $location,
            service, commonService) {
            BaseCtrl.call(this, $scope, $rootScope, $routeParams, ngAppSettings, service);
            $scope.cates = ['Site', 'System'];
            $scope.others=[];
            $scope.settings = $rootScope.globalSettings;
            $scope.pageId = $routeParams.id;
            $scope.canDrag = $scope.request.orderBy !== 'Priority' || $scope.request.direction !== '0';
            $scope.getList = async function () {
                $rootScope.isBusy = true;
                var id = $routeParams.id;
                $scope.request.query = '&page_id=' + id;
                var response = await service.getList($scope.request);
                $scope.canDrag = $scope.request.orderBy !== 'Priority' || $scope.request.direction !== '0';
                if (response.isSucceed) {
                    $scope.data = response.data;
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
                else {
                    $rootScope.showErrors(response.errors);
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
            };
            $scope.remove = function (id) {
                $rootScope.showConfirm($scope, 'removeConfirmed', [id], null, 'Remove', 'Are you sure');
            };

            $scope.removeConfirmed = async function (id) {
                $rootScope.isBusy = true;
                var result = await service.delete(id);
                if (result.isSucceed) {
                    if ($scope.removeCallback) {
                        $rootScope.executeFunctionByName('removeCallback', $scope.removeCallbackArgs, $scope)
                    }
                    $scope.getList();
                }
                else {
                    $rootScope.showMessage('failed');
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
            };

            $scope.saveCallback = function () {
            }
            $scope.removeCallback = function () {
            }

            $scope.updateInfos = async function (index) {
                $scope.data.items.splice(index, 1);
                $rootScope.isBusy = true;
                var startIndex = $scope.data.items[0].priority -1;
                for (var i = 0; i < $scope.data.items.length; i++) {
                    $scope.data.items[i].priority = startIndex + i + 1;
                }
                var resp = await service.updateInfos($scope.data.items);
                if (resp && resp.isSucceed) {
                    $scope.activedPage = resp.data;
                    $rootScope.showMessage('success', 'success');
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
                else {
                    if (resp) { $rootScope.showErrors(resp.errors); }
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
            }
        }]);

'use strict';
app.factory('UrlAliasService', ['$rootScope', 'CommonService', 'BaseService',
    function ($rootScope, commonService, baseService) {

        var serviceFactory = Object.create(baseService);
        serviceFactory.init('url-alias');
        
        var _updateInfos = async function (pages) {

            var req = {
                method: 'POST',
                url: this.prefixUrl + '/update-infos',
                data: JSON.stringify(pages)
            };
            return await commonService.getApiResult(req);
        };
        serviceFactory.updateInfos = _updateInfos;
        return serviceFactory;

    }]);

'use strict';
app.controller('UserController', ['$scope', '$rootScope', 'ngAppSettings', '$routeParams', '$timeout', '$location', 'AuthService', 'UserServices',
    function ($scope, $rootScope, ngAppSettings, $routeParams, $timeout, $location, authService, userServices) {
        $scope.request = {
            pageSize: '10',
            pageIndex: 0,
            status: '2',
            orderBy: 'CreatedDateTime',
            direction: '1',
            fromDate: null,
            toDate: null,
            keyword: ''
        };
        
        $scope.mediaFile = {
            file: null,
            fullPath: '',
            folder: 'User',
            title: '',
            description: ''
        };
        $scope.activedUser = null;
        $scope.relatedUsers = [];
        $rootScope.isBusy = false;
        $scope.data = {
            pageIndex: 0,
            pageSize: 1,
            totalItems: 0,
        };
        $scope.errors = [];

        $scope.range = function (max) {
            var input = [];
            for (var i = 1; i <= max; i += 1) input.push(i);
            return input;
        };

        $scope.loadUser = async function () {
            $rootScope.isBusy = true;
            var id = $routeParams.id;
            var response = await userServices.getUser(id, 'portal');
            if (response.isSucceed) {
                $scope.activedUser = response.data;
                $rootScope.isBusy = false;
                $scope.$apply();
            }
            else {
                $rootScope.showErrors(response.errors);
                $rootScope.isBusy = false;
                $scope.$apply();
            }
        };
        
        $scope.loadMyProfile = async function () {
            $rootScope.isBusy = true;
            var id = $routeParams.id;
            var response = await userServices.getMyProfile(id, 'portal');
            if (response.isSucceed) {
                $scope.activedUser = response.data;
                $rootScope.isBusy = false;
                $scope.$apply();
            }
            else {
                $rootScope.showErrors(response.errors);
                $rootScope.isBusy = false;
                $scope.$apply();
            }
        };

        $scope.loadUsers = async function (pageIndex) {
            if (pageIndex !== undefined) {
                $scope.request.pageIndex = pageIndex;
            }
            $rootScope.isBusy = true;
            var resp = await userServices.getUsers($scope.request);
            if (resp && resp.isSucceed) {
                $scope.data = resp.data;
                $.each($scope.data.items, function (i, user) {

                    $.each($scope.data, function (i, e) {
                        if (e.userId === user.id) {
                            user.isHidden = true;
                        }
                    });
                });
                $rootScope.isBusy = false;
                $scope.$apply();
            }
            else {
                if (resp) { $rootScope.showErrors(resp.errors); }
                $rootScope.isBusy = false;
                $scope.$apply();
            }
        };

        $scope.removeUser = function (id) {
            $rootScope.showConfirm($scope, 'removeUserConfirmed', [id], null, 'Remove User', 'Are you sure');
        }

        $scope.removeUserConfirmed = async function (id) {
            $rootScope.isBusy = true;
            var result = await userServices.removeUser(id);
            if (result.isSucceed) {
                $scope.loadUsers();
            }
            else {
                $rootScope.showMessage('failed');
                $rootScope.isBusy = false;
                $scope.$apply();
            }
        }

        $scope.saveUser = async function (user) {
            //if (user.avatar !== user.avatarUrl) {
            //    user.avatar = user.avatarUrl;
            //}
            $rootScope.isBusy = true;
            var resp = await userServices.saveUser(user);
            if (resp && resp.isSucceed) {
                //$scope.activedUser = resp.data;
                $rootScope.showMessage('Thành công', 'success');
                $rootScope.isBusy = false;
                $scope.$apply();
            }
            else {
                if (resp) { $rootScope.showErrors(resp.errors); }
                $rootScope.isBusy = false;
                $scope.$apply();
            }
        };

        $scope.register = async function (user) {
            $rootScope.isBusy = true;
            var resp = await userServices.register(user);
            if (resp && resp.isSucceed) {
                $scope.activedUser = resp.data;
                $rootScope.showMessage('Thành công', 'success');
                $rootScope.isBusy = false;
                $scope.$apply();
            }
            else {
                if (resp) { $rootScope.showErrors(resp.errors); }
                $rootScope.isBusy = false;
                $scope.$apply();
            }
        };

        $scope.updateRoleStatus = async function (nav) {
            var userRole = {
                userId: nav.userId,
                roleId: nav.roleId,
                roleName: nav.description,
                isUserInRole: nav.isActived
            };
            $rootScope.isBusy = true;
            var resp = await userServices.updateRoleStatus(userRole);
            if (resp && resp.isSucceed) {
                $rootScope.showMessage('Thành công', 'success');
                $rootScope.isBusy = false;
                $scope.$apply();
            }
            else {
                if (resp) { $rootScope.showErrors(resp.errors); }
                $rootScope.isBusy = false;
                $scope.$apply();
            }
        };
    }]);

'use strict';
app.factory('UserServices', ['$http', 'CommonService', 'ngAppSettings'
    , function ($http, commonService, ngAuthSettings) {

    //var serviceBase = 'http://ngauthenticationapi.azurewebsites.net/';

    var usersServiceFactory = {};
    var apiUrl = '/account/';
    
    var serviceBase = ngAuthSettings.serviceBase;
    
    var _getUserDemographicInfo = function () {
        var url = '/GetUserDemographicInfo';
        var req = {
            method: 'GET',
            url: serviceBase + url
        };

        return commonService.getApiResult(req);
    };



    var _importUsers = function (strBase64) {
        var url = 'import-users';
        var req = {
            method: 'POST',
            url: apiUrl + url,
            data: JSON.stringify({ strBase64: strBase64 })
        };

        return commonService.getApiResult(req);
    };

    var _getUsers = function (request) {

        var req = {
            method: 'POST',
            url: apiUrl + 'list',
            data: request
        };

        return commonService.getApiResult(req);
    };

    var _getUser = async function (id, viewType) {
        var apiUrl = '/account/';
        var url = apiUrl + 'details/' + viewType;
        if (id) {
            url += '/' + id;
        }
        var req = {
            method: 'GET',
            url: url
        };
        return await commonService.getApiResult(req)
    };
    
    var _getMyProfile = async function (id, viewType) {
        var apiUrl = '/account/';
        var url = apiUrl + 'my-profile';
        if (id) {
            url += '/' + id;
        }
        var req = {
            method: 'GET',
            url: url
        };
        return await commonService.getApiResult(req)
    };

    var _updateRoleStatus = function (userInRole) {

        var req = {
            method: 'POST',
            url: serviceBase + '/account/user-in-role',
            data: JSON.stringify(userInRole)

        };

        return commonService.getApiResult(req);
    };

    var _saveUser = async function (user) {
        var apiUrl = '/account/';
        var req = {
            method: 'POST',
            url: apiUrl + 'save',
            data: JSON.stringify(user)
        };
        return await commonService.getApiResult(req)
    };

    var _register = async function (user) {
        var apiUrl = '/account/';
        var req = {
            method: 'POST',
            url: apiUrl + 'register',
            data: JSON.stringify(user)
        };
        return await commonService.getApiResult(req)
    };

    var _removeUser = function (userId) {
        var req = {
            method: 'GET',
            url: apiUrl + 'remove-user/'+userId
        };

        return commonService.getApiResult(req);
    };

    usersServiceFactory.importUsers = _importUsers;
    usersServiceFactory.getUsers = _getUsers;
    usersServiceFactory.getUser = _getUser;
    usersServiceFactory.getMyProfile = _getMyProfile;
    usersServiceFactory.saveUser = _saveUser;
    usersServiceFactory.register = _register;
    usersServiceFactory.removeUser = _removeUser;
    usersServiceFactory.updateRoleStatus = _updateRoleStatus;
    usersServiceFactory.getUserDemographicInfo = _getUserDemographicInfo;
    return usersServiceFactory;

}]);

    'use strict';
    function PageDetailsController($scope, $element, $attrs) {
        var ctrl = this;
        ctrl.activedPage = null;
        ctrl.relatedPages = [];
        ctrl.data = [];
        ctrl.errors = [];
        ctrl.range = function (max) {
            var input = [];
            for (var i = 1; i <= max; i += 1) input.push(i);
            return input;
        };
        ctrl.loadPage = function (pageId) {
            ctrl.isBusy = true;
            var url = '/' + ctrl.currentLanguage + '/page/details/be/' + pageId;//byPage/' + pageId;
            ctrl.settings.method = "GET";
            ctrl.settings.url = url;// + '/true';
            ctrl.settings.data = ctrl.request;
            $.ajax(ctrl.settings).done(function (response) {
                if (response.isSucceed) {
                    ctrl.activedPage = response.data;
                    ctrl.initEditor();
                }
                ctrl.isBusy = false;
                ctrl.$apply();
            });
        };
        ctrl.loadPages = function (pageIndex) {
            ctrl.isBusy = true;
            if (pageIndex !== undefined) {
                ctrl.request.pageIndex = pageIndex;
            }
            if (ctrl.request.fromDate !== null) {
                ctrl.request.fromDate = ctrl.request.fromDate.toISOString();
            }
            if (ctrl.request.toDate !== null) {
                ctrl.request.toDate = ctrl.request.toDate.toISOString();
            }
            var url = '/' + ctrl.currentLanguage + '/page/list';//byPage/' + pageId;
            ctrl.settings.method = "POST";
            ctrl.settings.url = url;// + '/true';
            ctrl.settings.data = ctrl.request;
            $.ajax(ctrl.settings).done(function (response) {
                (ctrl.data = response.data);

                $.each(ctrl.data.items, function (i, page) {
                    $.each(ctrl.activedPages, function (i, e) {
                        if (e.pageId === page.id) {
                            page.isHidden = true;
                        }
                    })
                })
                ctrl.isBusy = false;
                setTimeout(function () {
                    $('[data-toggle="popover"]').popover({
                        html: true,
                        content: function () {
                            var content = $(this).next('.popover-body');
                            return $(content).html();
                        },
                        title: function () {
                            var title = $(this).attr("data-popover-content");
                            return $(title).children(".popover-heading").html();
                        }
                    });
                }, 200);
                ctrl.$apply();
            });
        };

        ctrl.removePage = function (pageId) {
            if (confirm("Are you sure!")) {
                var url = '/' + ctrl.currentLanguage + '/page/delete/' + pageId;
                $.ajax({
                    method: 'GET',
                    url: url,
                    success: function (data) {
                        ctrl.loadPages();
                        ctrl.$apply();
                    },
                    error: function (a, b, c) {
                        console.log(a + " " + b + " " + c);
                    }
                });
            }
        };
        ctrl.savePage = function (page) {
            var url = '/' + ctrl.currentLanguage + '/page/save';
            $.ajax({
                method: 'POST',
                url: url,
                data: page,
                success: function (data) {
                    //ctrl.loadPages();
                    if (data.isSucceed) {
                        alert('success');
                    }
                    else {
                        alert('failed! ' + data.errors);
                    }
                },
                error: function (a, b, c) {
                    console.log(a + " " + b + " " + c);
                }
            });
        };

        ctrl.changeMedia = function (media) {
            var currentItem = null;
            if (ctrl.activedPage.mediaNavs === undefined) {
                ctrl.activedPage.mediaNavs = [];
            }
            $.each(ctrl.activedPage.mediaNavs, function (i, e) {
                if (e.mediaId === media.id) {
                    e.isActived = media.isActived;
                    currentItem = e;
                    return false;
                }
            });
            if (currentItem === null) {
                currentItem = {
                    description: media.description !== 'undefined' ? media.description : '',
                    image: media.fullPath,
                    mediaId: media.id,
                    page: ctrl.activedPage.id,
                    specificulture: media.specificulture,
                    position: 0,
                    priority: ctrl.activedMedias.length + 1,
                    isActived: true
                };
                media.isHidden = true;
                ctrl.activedPage.mediaNavs.push(currentItem);
            }
        }

        ctrl.changePage = function (page) {
            var currentItem = null;
            $.each(ctrl.activedPage.pageNavs, function (i, e) {
                if (e.relatedPageId === page.id) {
                    e.isActived = page.isActived;
                    currentItem = e;
                    return false;
                }
            });
            if (currentItem === null) {
                currentItem = {
                    relatedPageId: page.id,
                    sourcePageId: $('#page-id').val(),
                    specificulture: page.specificulture,
                    priority: ctrl.activedPage.pageNavs.length + 1,
                    page: page,
                    isActived: true
                };
                page.isHidden = true;
                ctrl.activedPage.pageNavs.push(currentItem);
            }
        }


        ctrl.addProperty = function (type) {
            var i = $(".property").length;
            $.ajax({
                method: 'GET',
                url: '/' + ctrl.currentLanguage + '/Portal/' + type + '/AddEmptyProperty/' + i,
                success: function (data) {
                    $('#tbl-properties > tbody').append(data);
                    $(data).find('.prop-data-type').trigger('change');
                },
                error: function (a, b, c) {
                    console.log(a + " " + b + " " + c);
                }
            });
            ctrl.updateHero = function (hero, prop, value) {
                hero[prop] = value;
            };

            ctrl.deleteHero = function (hero) {
                var idx = ctrl.list.indexOf(hero);
                if (idx >= 0) {
                    ctrl.list.splice(idx, 1);
                }
            };
        }

        angular.module(appName).component('pageDetails', {
            templateUrl: 'pageDetails.html',
            controller: PageDetailsController
        });
    }




    'use strict';
    function ProductDetailsController($scope, $element, $attrs) {
        var ctrl = this;
        ctrl.activedData = null;
        ctrl.relatedProducts = [];
        ctrl.data = [];
        ctrl.errors = [];
        ctrl.range = function (max) {
            var input = [];
            for (var i = 1; i <= max; i += 1) input.push(i);
            return input;
        };
        ctrl.loadProduct = function (productId) {
            ctrl.isBusy = true;
            var url = '/' + ctrl.currentLanguage + '/product/details/be/' + productId;//byProduct/' + productId;
            ctrl.settings.method = "GET";
            ctrl.settings.url = url;// + '/true';
            ctrl.settings.data = ctrl.request;
            $.ajax(ctrl.settings).done(function (response) {
                if (response.isSucceed) {
                    ctrl.activedData = response.data;
                    ctrl.initEditor();
                }
                ctrl.isBusy = false;
                ctrl.$apply();
            });
        };
        ctrl.loadProducts = function (pageIndex) {
            ctrl.isBusy = true;
            if (pageIndex !== undefined) {
                ctrl.request.pageIndex = pageIndex;
            }
            if (ctrl.request.fromDate !== null) {
                ctrl.request.fromDate = ctrl.request.fromDate.toISOString();
            }
            if (ctrl.request.toDate !== null) {
                ctrl.request.toDate = ctrl.request.toDate.toISOString();
            }
            var url = '/' + ctrl.currentLanguage + '/product/list';//byProduct/' + productId;
            ctrl.settings.method = "POST";
            ctrl.settings.url = url;// + '/true';
            ctrl.settings.data = ctrl.request;
            $.ajax(ctrl.settings).done(function (response) {
                (ctrl.data = response.data);

                $.each(ctrl.data.items, function (i, product) {
                    $.each(ctrl.activedDatas, function (i, e) {
                        if (e.productId === product.id) {
                            product.isHidden = true;
                        }
                    })
                })
                ctrl.isBusy = false;
                setTimeout(function () {
                    $('[data-toggle="popover"]').popover({
                        html: true,
                        content: function () {
                            var content = $(this).next('.popover-body');
                            return $(content).html();
                        },
                        title: function () {
                            var title = $(this).attr("data-popover-content");
                            return $(title).children(".popover-heading").html();
                        }
                    });
                }, 200);
                ctrl.$apply();
            });
        };

        ctrl.removeProduct = function (productId) {
            if (confirm("Are you sure!")) {
                var url = '/' + ctrl.currentLanguage + '/product/delete/' + productId;
                $.ajax({
                    method: 'GET',
                    url: url,
                    success: function (data) {
                        ctrl.loadProducts();
                        ctrl.$apply();
                    },
                    error: function (a, b, c) {
                        console.log(a + " " + b + " " + c);
                    }
                });
            }
        };
        ctrl.saveProduct = function (product) {
            var url = '/' + ctrl.currentLanguage + '/product/save';
            $.ajax({
                method: 'POST',
                url: url,
                data: product,
                success: function (data) {
                    //ctrl.loadProducts();
                    if (data.isSucceed) {
                        alert('success');
                    }
                    else {
                        alert('failed! ' + data.errors);
                    }
                },
                error: function (a, b, c) {
                    console.log(a + " " + b + " " + c);
                }
            });
        };

        ctrl.changeMedia = function (media) {
            var currentItem = null;
            if (ctrl.activedData.mediaNavs === undefined) {
                ctrl.activedData.mediaNavs = [];
            }
            $.each(ctrl.activedData.mediaNavs, function (i, e) {
                if (e.mediaId === media.id) {
                    e.isActived = media.isActived;
                    currentItem = e;
                    return false;
                }
            });
            if (currentItem === null) {
                currentItem = {
                    description: media.description !== 'undefined' ? media.description : '',
                    image: media.fullPath,
                    mediaId: media.id,
                    product: ctrl.activedData.id,
                    specificulture: media.specificulture,
                    position: 0,
                    priority: ctrl.activedMedias.length + 1,
                    isActived: true
                };
                media.isHidden = true;
                ctrl.activedData.mediaNavs.push(currentItem);
            }
        }

        ctrl.changeProduct = function (product) {
            var currentItem = null;
            $.each(ctrl.activedData.productNavs, function (i, e) {
                if (e.relatedProductId === product.id) {
                    e.isActived = product.isActived;
                    currentItem = e;
                    return false;
                }
            });
            if (currentItem === null) {
                currentItem = {
                    relatedProductId: product.id,
                    sourceProductId: $('#product-id').val(),
                    specificulture: product.specificulture,
                    priority: ctrl.activedData.productNavs.length + 1,
                    product: product,
                    isActived: true
                };
                product.isHidden = true;
                ctrl.activedData.productNavs.push(currentItem);
            }
        }


        ctrl.addProperty = function (type) {
            var i = $(".property").length;
            $.ajax({
                method: 'GET',
                url: '/' + ctrl.currentLanguage + '/Portal/' + type + '/AddEmptyProperty/' + i,
                success: function (data) {
                    $('#tbl-properties > tbody').append(data);
                    $(data).find('.prop-data-type').trigger('change');
                },
                error: function (a, b, c) {
                    console.log(a + " " + b + " " + c);
                }
            });
            ctrl.updateHero = function (hero, prop, value) {
                hero[prop] = value;
            };

            ctrl.deleteHero = function (hero) {
                var idx = ctrl.list.indexOf(hero);
                if (idx >= 0) {
                    ctrl.list.splice(idx, 1);
                }
            };
        }

        angular.module(appName).component('productDetails', {
            templateUrl: 'productDetails.html',
            controller: ProductDetailsController
        });
    }



app.component('appSettingsAuth', {
    templateUrl: '/app/app-portal/pages/app-settings/components/auth/view.html',
    controller: ['ngAppSettings', function (ngAppSettings) {
        var ctrl = this;  
    }],
    bindings: {
        appSettings: '=',
        onDelete: '&',
        onUpdate: '&'
    }
});

app.component('appSettingsDefault', {
    templateUrl: '/app/app-portal/pages/app-settings/components/default/view.html',
    controller: ['$rootScope', 'ngAppSettings', function ($rootScope, ngAppSettings) {
        var ctrl = this;
        ctrl.$onInit = function(){
            ctrl.properties = $.parseJSON(ctrl.appSettings.GlobalSettings.DefaultArticleAttr);
            ctrl.trackedProperties = $.parseJSON(ctrl.appSettings.GlobalSettings.DefaultArticleAttr);
            ctrl.dataTypes = $rootScope.globalSettings.dataTypes;
        }
        ctrl.addArticleProperty = function () {
            ctrl.properties.push({
                priority: 0,
                name: '',
                value: null,
                dataType: '7'
            });
            
        };
        ctrl.$doCheck = function () {
            if (ctrl.trackedProperties != ctrl.properties) {
                ctrl.trackedProperties = angular.copy(ctrl.properties);
                ctrl.appSettings.GlobalSettings.DefaultArticleAttr = JSON.stringify(ctrl.properties);
            }
        }.bind(ctrl);
    }],
    bindings: {
        appSettings: '=',
        cultures: '=',
        statuses: '=',
        onDelete: '&',
        onUpdate: '&'
    }
});

app.component('appSettingsSmtp', {
    templateUrl: '/app/app-portal/pages/app-settings/components/smtp/view.html',
    controller: ['ngAppSettings', function (ngAppSettings) {
        var ctrl = this;  
    }],
    bindings: {
        appSettings: '='
    }
});

app.component('attributeSetMain', {
    templateUrl: '/app/app-portal/pages/attribute-set/components/main/view.html',
    controller: ['$rootScope', function ($rootScope) {
        var ctrl = this;
        ctrl.settings = $rootScope.globalSettings;
        ctrl.gennerateName = function () {
            if (!ctrl.model.id || ctrl.model.name === null || ctrl.model.name === '') {
                ctrl.model.name = $rootScope.generateKeyword(ctrl.model.title, '_');
            }
        };
    }],
    bindings: {
        model: '=',
    }
});

app.component('appSettingsGeneral', {
    templateUrl: '/app/app-portal/pages/app-settings/components/general/view.html',
    controller: ['ngAppSettings', function (ngAppSettings) {
        var ctrl = this;  
    }],
    bindings: {
        appSettings: '=',
        onDelete: '&',
        onUpdate: '&'
    }
});
'use strict';
app.factory('ArticleAttributeValueService', ['BaseService',
    function (baseService) {
        var serviceFactory = angular.copy(baseService);
        serviceFactory.init('article-attribute-value');
        // Define more service methods here
    return serviceFactory;
}]);


app.component('articleAttributeSets', {
    templateUrl: '/app/app-portal/pages/article/components/attribute-sets/view.html',
    controller: ['$rootScope', 'ArticleAttributeValueService', function ($rootScope, valueService) {
        var ctrl = this;
        ctrl.dataTypes = $rootScope.globalSettings.dataTypes;
        
    }],
    bindings: {
        article: '=',
        onDelete: '&',
        onUpdate: '&'
    }
});

app.component('articleGeneral', {
    templateUrl: '/app/app-portal/pages/article/components/general/articleGeneral.html',
    controller: ['$rootScope', 'ngAppSettings', function ($rootScope, ngAppSettings) {
        var ctrl = this;
        ctrl.dataTypes = $rootScope.globalSettings.dataTypes;
        
        ctrl.addProperty = function (type) {
            var i = $(".property").length;
            ctrl.article.properties.push({
                title: '',
                name: '',
                value: null,
                dataType: '7'
            });
        };        
    }],
    bindings: {
        article: '=',
        onDelete: '&',
        onUpdate: '&'
    }
});

app.component('articleMain', {
    templateUrl: '/app/app-portal/pages/article/components/main/articleMain.html',
    controller: ['$rootScope', '$scope',
        function ($rootScope, $scope) {
            var ctrl = this;
            ctrl.translate = $rootScope.translate;            
        }
    ],
    bindings: {
        article: '=',
        generateSeo: '&',
        onUpdate: '&'
    }
});

app.component('articleModules', {
    templateUrl: '/app/app-portal/pages/article/components/modules/articleModules.html',
    controller: ['$rootScope', '$scope', 'ngAppSettings', 'SharedModuleDataService',
        function ($rootScope, $scope, ngAppSettings, moduleDataService) {
            var ctrl = this;
            ctrl.request = angular.copy(ngAppSettings.request);
            ctrl.translate = function (keyword, wrap, defaultValue) {
                return $rootScope.translate(keyword,wrap, defaultValue);
            };

            ctrl.removeData = function (id, moduleId) {
                $rootScope.showConfirm(ctrl, 'removeDataConfirmed', [id, moduleId], null, 'Remove Data', 'Are you sure');
            }
            ctrl.removeDataConfirmed = async function (id, moduleId) {
                $rootScope.isBusy = true;
                var result = await moduleDataService.removeModuleData(id);
                if (result.isSucceed) {
                    ctrl.loadModuleDatas(moduleId);
                }
                else {
                    $rootScope.showMessage('failed');
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
            };
            ctrl.saveDataCallback = function(data){
                if(data){
                    ctrl.loadModuleDatas(data.moduleId);
                }
            }
            ctrl.loadModuleDatas = async function (id, pageIndex) {
                $rootScope.isBusy = true;
                $scope.dataColumns = [];
                var request = angular.copy(ngAppSettings.request);
                request.query = '?module_id=' + id + '&article_id=' + ctrl.article.id;
                if(pageIndex){
                    request.pageIndex = pageIndex;
                }
                var response = await moduleDataService.getModuleDatas(request);
                if (response.isSucceed) {
                    var nav = $rootScope.findObjectByKey(ctrl.article.moduleNavs, 'moduleId', id);
                    if (nav) {
                        nav.module.data = response.data;
                    }
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
                else {
                    $rootScope.showErrors(response.errors);
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
            };

            ctrl.updateDataInfos = async function (items) {
                $rootScope.isBusy = true;
                var resp = await moduleDataService.updateInfos(items);
                if (resp && resp.isSucceed) {
                    $scope.activedPage = resp.data;
                    $rootScope.showMessage('success', 'success');
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
                else {
                    if (resp) { $rootScope.showErrors(resp.errors); }
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
            };
        }],
    bindings: {
        article: '=',
        onDelete: '&',
        onUpdate: '&'
    }
});

app.component('articleMedias', {
    templateUrl: '/app/app-portal/pages/article/components/medias/articleMedias.html',
    controller: function () {
        var ctrl = this;
        ctrl.activeMedia = function (media) {
            var currentItem = null;
            if (ctrl.article.mediaNavs === null) {
                ctrl.article.mediaNavs = [];
            }
            $.each(ctrl.article.mediaNavs, function (i, e) {
                if (e.mediaId === media.id) {
                    e.isActived = media.isActived;
                    currentItem = e;
                    return false;
                }
            });
            if (currentItem === null) {
                currentItem = {
                    description: media.description !== 'undefined' ? media.description : '',
                    image: media.filePath,
                    mediaId: media.id,
                    article: ctrl.article.id,
                    specificulture: media.specificulture,
                    position: 0,
                    priority: ctrl.article.mediaNavs.length + 1,
                    isActived: true
                };
                media.isHidden = true;
                ctrl.article.mediaNavs.push(currentItem);
            }
        }        
    },
    bindings: {
        article: '=',
        medias: '=',
        loadMedia: '&',
        onDelete: '&',
        onUpdate: '&'
    }
});

app.component('articleParents', {
    templateUrl: '/app/app-portal/pages/article/components/parents/articleParents.html',
    bindings: {
        article: '=',
        onDelete: '&',
        onUpdate: '&'
    }
});

app.component('articleSeo', {
    templateUrl: '/app/app-portal/pages/article/components/seo/articleSeo.html',
    bindings: {
        article: '=',
        onDelete: '&',
        onUpdate: '&'
    }
});

app.component('articleRelated', {
    templateUrl: '/app/app-portal/pages/article/components/related/articleRelated.html',
    controller: function () {
        var ctrl = this;
        ctrl.activeArticle = function (model) {
            var currentItem = null;
            $.each(ctrl.article.articleNavs, function (i, e) {
                if (e.relatedArticleId === model.id) {
                    e.isActived = model.isActived;
                    currentItem = e;
                    return false;
                }
            });
            if (currentItem === null) {
                currentItem = {
                    relatedArticleId: model.id,
                    sourceArticleId: ctrl.article.id,
                    specificulture: ctrl.article.specificulture,
                    priority: ctrl.article.articleNavs.length + 1,
                    relatedArticle: pr,
                    isActived: true
                };
                model.isHidden = true;
                ctrl.article.articleNavs.push(currentItem);
            }
        }
    },
    bindings: {
        article: '=',
        list: '=',
        onDelete: '&',
        onUpdate: '&'
    }
});

app.component('customerMain', {
    templateUrl: '/app/app-portal/pages/customer/components/main/customer-main.html',
    bindings: {
        customer: '=',
        onDelete: '&',
        onUpdate: '&'
    }
});

app.component('customerOrders', {
    templateUrl: '/app/app-portal/pages/customer/components/orders/customer-orders.html',
    controller: ['$rootScope', 'OrderServices', function($rootScope, orderServices){
        var ctrl = this;
        ctrl.removeOrder = function (id) {
            $rootScope.showConfirm(ctrl, 'removeOrderConfirmed', [id], null, 'Remove Order', 'Are you sure');
        }

        ctrl.removeOrderConfirmed = async function (id) {
            var result = await orderServices.removeOrder(id);
            if (result.isSucceed) {
                $rootScope.showMessage('success', 'success');
                window.top.location = window.top.location.href;
            }
            else {
                $rootScope.showMessage('failed');
                $rootScope.isBusy = false;
                $scope.$apply();
            }
        }
    }],
    bindings: {
        customer: '=',
        onDelete: '&',
        onUpdate: '&'
    }
});

app.component('pageMain', {
    templateUrl: '/app/app-portal/pages/page/components/main/main.html',
    controller: ['$rootScope', '$scope', 'ngAppSettings', function ($rootScope, $scope) {
        var ctrl = this;
        ctrl.settings = $rootScope.globalSettings;
        ctrl.setPageType = function (type) {
            ctrl.page.type = $index;
        }
        ctrl.generateSeo = function () {
            if (ctrl.page) {
                if (ctrl.page.seoName === null || ctrl.page.seoName === '') {
                    ctrl.page.seoName = $rootScope.generateKeyword(ctrl.page.title, '-');
                }
                if (ctrl.page.seoTitle === null || ctrl.page.seoTitle === '') {
                    ctrl.page.seoTitle = ctrl.page.title
                }
                if (ctrl.page.seoDescription === null || ctrl.page.seoDescription === '') {
                    ctrl.page.seoDescription = ctrl.page.excerpt
                }
                if (ctrl.page.seoKeywords === null || ctrl.page.seoKeywords === '') {
                    ctrl.page.seoKeywords = ctrl.page.title
                }
            }
        }
    }],
    bindings: {
        page: '=',
        onDelete: '&',
        onUpdate: '&'
    }
});

app.component('pageGeneral', {
    templateUrl: '/app/app-portal/pages/page/components/general/general.html',
    controller: function ($scope) {
        var ctrl = this;
        ctrl.dataTypes = [
            {
                title: 'String',
                value:0
            },
            {
                title: 'Int',
                value: 1
            },
            {
                title: 'Image',
                value: 2
            },
            {
                title: 'Boolean',
                value: 7
            }
        ];
        ctrl.configurations = {
            core: {},
            plugins: {
                btnsDef: {
                    // Customizables dropdowns
                    image: {
                        dropdown: ['insertImage', 'upload', 'base64', 'noembed'],
                        ico: 'insertImage'
                    }
                },
                btns: [
                    ['viewHTML'],
                    ['undo', 'redo'],
                    ['formatting'],
                    ['strong', 'em', 'del', 'underline'],
                    ['link'],
                    ['image'],
                    ['justifyLeft', 'justifyCenter', 'justifyRight', 'justifyFull'],
                    ['unorderedList', 'orderedList'],
                    ['foreColor', 'backColor'],
                    ['preformatted'],
                    ['horizontalRule'],
                    ['fullscreen']
                ],
                plugins: {
                    // Add imagur parameters to upload plugin
                    upload: {
                        serverPath: 'https://api.imgur.com/3/image',
                        fileFieldName: 'image',
                        headers: {
                            'Authorization': 'Client-ID 9e57cb1c4791cea'
                        },
                        urlPropertyName: 'data.link'
                    }
                }
            }
        };
        ctrl.addProperty = function (type) {
            var i = $(".property").length;
            ctrl.page.properties.push({
                priority: 0,
                name: '',
                value: null,
                dataType: 0
            });
        };
        ctrl.initEditor = function() {
            setTimeout(function () {
                // Init Code editor
                $.each($('.code-editor'), function (i, e) {
                    var container = $(this);
                    var editor = ace.edit(e);
                    if (container.hasClass('json')) {
                        editor.session.setMode("ace/mode/json");
                    }
                    else {
                        editor.session.setMode("ace/mode/razor");
                    }
                    editor.setTheme("ace/theme/chrome");
                    //editor.setReadOnly(true);

                    editor.session.setUseWrapMode(true);
                    editor.setOptions({
                        maxLines: Infinity
                    });
                    editor.getSession().on('change', function (e) {
                        // e.type, etc
                        $(container).parent().find('.code-content').val(editor.getValue());
                    });
                })
                $.each($('.editor-content'), function (i, e) {
                    var $demoTextarea = $(e);
                    $demoTextarea.trumbowyg(ctrl.configurations.plugins);
                });
            }, 200)
        }
    },
    bindings: {
        page: '=',
        onDelete: '&',
        onUpdate: '&'
    }
});

app.component('moduleMain', {
    templateUrl: '/app/app-portal/pages/module/components/main/main.html',
    controller: ['$rootScope', function ($rootScope) {
        var ctrl = this;
        ctrl.settings = $rootScope.globalSettings;
        ctrl.gennerateName = function () {
            if (!ctrl.module.id || ctrl.module.name === null || ctrl.module.name === '') {
                ctrl.module.name = $rootScope.generateKeyword(ctrl.module.title, '_');
            }
        };
    }],
    bindings: {
        module: '=',
    }
});

app.component('pageModules', {
    templateUrl: '/app/app-portal/pages/page/components/modules/modules.html',
    bindings: {
        page: '=',
        onDelete: '&',
        onUpdate: '&'
    }
});

app.component('pageParents', {
    templateUrl: '/app/app-portal/pages/page/components/parents/parents.html',
    bindings: {
        page: '=',
        onDelete: '&',
        onUpdate: '&'
    }
});

app.component('pagePlugPlay', {
    templateUrl: '/app/app-portal/pages/page/components/plug-play/plug-play.html',
    bindings: {
        page: '=',
        onDelete: '&',
        onUpdate: '&'
    }
});

app.component('pageSeo', {
    templateUrl: '/app/app-portal/pages/page/components/seo/seo.html',
    controller: [
        '$rootScope',
        function($rootScope){
            var ctrl = this;
            ctrl.translate = function (keyword) {
                return $rootScope.translate(keyword);
            };
        }
    ],
    bindings: {
        page: '=',
        onDelete: '&',
        onUpdate: '&'
    }
});

app.component('productRelated', {
    templateUrl: '/app/app-portal/pages/product/components/related/productRelated.html',
    controller: function () {
        var ctrl = this;
        ctrl.activeProduct = function (pr) {
            var currentItem = null;
            $.each(ctrl.product.productNavs, function (i, e) {
                if (e.relatedProductId === pr.id) {
                    e.isActived = pr.isActived;
                    currentItem = e;
                    return false;
                }
            });
            if (currentItem === null) {
                currentItem = {
                    relatedProductId: pr.id,
                    sourceProductId: ctrl.product.id,
                    specificulture: ctrl.product.specificulture,
                    priority: ctrl.product.productNavs.length + 1,
                    relatedProduct: pr,
                    isActived: true
                };
                pr.isHidden = true;
                ctrl.product.productNavs.push(currentItem);
            }
        }
    },
    bindings: {
        product: '=',
        list: '=',
        onDelete: '&',
        onUpdate: '&'
    }
});

app.component('permissionMain', {
    templateUrl: '/app/app-portal/pages/permission/components/main/main.html',
    controller: ['$rootScope', '$scope', 'ngAppSettings', '$routeParams',function ($rootScope, $scope, ngAppSettings, $routeParams) {
        var ctrl = this;
        ctrl.settings = $rootScope.globalSettings;
        ctrl.miIcons = ngAppSettings.miIcons;
        ctrl.setPageType = function (type) {
            ctrl.page.type = $index;
        };
        ctrl.generateKeyword = function (text) {
            if (!$routeParams.id) {
                ctrl.page.textKeyword = 'portal_' + text.replace(/[^a-zA-Z0-9]+/g, '_')
                    .replace(/([A-Z]+)([A-Z][a-z])/g, '$1-$2')
                    .replace(/([a-z])([A-Z])/g, '$1-$2')
                    .replace(/([0-9])([^0-9])/g, '$1-$2')
                    .replace(/([^0-9])([0-9])/g, '$1-$2')
                    .replace(/-+/g, '_')
                    .toLowerCase();
            }
        };
    }],
    bindings: {
        page: '=',
        onDelete: '&',
        onUpdate: '&'
    }
});

app.component('permissionParents', {
    templateUrl: '/app/app-portal/pages/permission/components/parents/parents.html',    
    bindings: {
        page: '=',
        onDelete: '&',
        onUpdate: '&'
    }
});

app.component('permissionPlugPlay', {
    templateUrl: '/app/app-portal/pages/permission/components/plug-play/plug-play.html',
    bindings: {
        page: '=',
        prefixParent: '=',
        prefixChild: '=',
        onDelete: '&',
        onUpdate: '&'
    }
});

app.component('productGeneral', {
    templateUrl: '/app/app-portal/pages/product/components/general/productGeneral.html',
    controller: ['$rootScope', '$scope', 'ngAppSettings', function ($rootScope, $scope, ngAppSettings) {
        var ctrl = this;
        //ctrl.tags = ctrl.product.tags;
        ctrl.dataTypes = $rootScope.globalSettings.dataTypes;
        ctrl.addProperty = function (type) {
            var i = $(".property").length;
            ctrl.product.properties.push({
                priority: 0,
                name: '',
                value: null,
                dataType: 0
            });
        };
        ctrl.initEditor = $rootScope.initEditor;
        ctrl.loadTags = function (query) {
            return [];
        };
    }],
    bindings: {
        product: '=',
        onDelete: '&',
        onUpdate: '&'
    }
});

app.component('productMedias', {
    templateUrl: '/app/app-portal/pages/product/components/medias/productMedias.html',
    controller: ['$rootScope', function ($rootScope) {
        var ctrl = this;
        ctrl.medias = $rootScope.medias;
        ctrl.init = function () {
            if ($rootScope.medias) {
                angular.forEach(ctrl.medias, function (value, key) {
                    value.isActived = ctrl.checkActived(value) !== undefined;
                });
                
            }
        };
        ctrl.checkActived = function (item) {
            if (ctrl.product.mediaNavs) {
                return ctrl.product.mediaNavs.find(function (nav) {
                    return nav.mediaId === item.id;
                });
            }
        };
        ctrl.activeMedia = function (media) {
            var currentItem = null;
            if (ctrl.product.mediaNavs === null) {
                ctrl.product.mediaNavs = [];
            }
            $.each(ctrl.product.mediaNavs, function (i, e) {
                if (e.mediaId === media.id) {
                    e.isActived = media.isActived;
                    currentItem = e;
                    return false;
                }
            });
            if (currentItem === null) {
                currentItem = {
                    description: media.description !== 'undefined' ? media.description : '',
                    image: media.fullPath,
                    mediaId: media.id,
                    product: ctrl.product.id,
                    specificulture: media.specificulture,
                    position: 0,
                    priority: ctrl.product.mediaNavs.length + 1,
                    isActived: true
                };
                media.isHidden = true;
                ctrl.product.mediaNavs.push(currentItem);
            }
        };
    }],
    bindings: {
        product: '=',
        medias: '=',
        loadMedia: '&',
        onDelete: '&',
        onUpdate: '&'
    }
});

app.component('productModules', {
    templateUrl: '/app/app-portal/pages/product/components/modules/productModules.html',
    bindings: {
        product: '=',
        onDelete: '&',
        onUpdate: '&'
    }
});

app.component('productMain', {
    templateUrl: '/app/app-portal/pages/product/components/main/productMain.html',
    controller: ['$rootScope', '$scope', 'ngAppSettings',
        function ($rootScope, $scope, ngAppSettings) {
            var ctrl = this;
            ctrl.translate = $rootScope.translate;
            ctrl.privacies = ngAppSettings.privacies;
            ctrl.formatPrice = function (price) {
                return price.replace(/\B(?=(\d{3})+(?!\d))/g, ",");
            };
            ctrl.generateSeo = function () {
                if (ctrl.product) {
                    if (ctrl.product.seoName === null || ctrl.product.seoName === '') {
                        ctrl.product.seoName = $rootScope.generateKeyword(ctrl.product.title, '-');
                    }
                    if (ctrl.product.seoTitle === null || ctrl.product.seoTitle === '') {
                        ctrl.product.seoTitle = $rootScope.generateKeyword(ctrl.product.title, '-');
                    }
                    if (ctrl.product.seoDescription === null || ctrl.product.seoDescription === '') {
                        ctrl.product.seoDescription = $rootScope.generateKeyword(ctrl.product.title, '-');
                    }
                    if (ctrl.product.seoKeywords === null || ctrl.product.seoKeywords === '') {
                        ctrl.product.seoKeywords = $rootScope.generateKeyword(ctrl.product.title, '-');
                    }
                }
            }
        }
    ],
    bindings: {
        product: '=',
        onDelete: '&',
        onUpdate: '&'
    }
});

app.component('productParents', {
    templateUrl: '/app/app-portal/pages/product/components/parents/productParents.html',
    bindings: {
        product: '=',
        onDelete: '&',
        onUpdate: '&'
    }
});

app.component('productRelated', {
    templateUrl: '/app/app-portal/pages/product/components/related/productRelated.html',
    controller: function () {
        var ctrl = this;
        ctrl.activeProduct = function (pr) {
            var currentItem = null;
            $.each(ctrl.product.productNavs, function (i, e) {
                if (e.relatedProductId === pr.id) {
                    e.isActived = pr.isActived;
                    currentItem = e;
                    return false;
                }
            });
            if (currentItem === null) {
                currentItem = {
                    relatedProductId: pr.id,
                    sourceProductId: ctrl.product.id,
                    specificulture: ctrl.product.specificulture,
                    priority: ctrl.product.productNavs.length + 1,
                    relatedProduct: pr,
                    isActived: true
                };
                pr.isHidden = true;
                ctrl.product.productNavs.push(currentItem);
            }
        }
    },
    bindings: {
        product: '=',
        list: '=',
        onDelete: '&',
        onUpdate: '&'
    }
});

modules.component('rolePageNav', {
    templateUrl: '/app/app-portal/pages/role/components/role-page-navigation/role-page-navigations.html',
    controller: ['$rootScope', '$scope', 'ngAppSettings', 'RoleService', function ($rootScope, $scope, ngAppSettings, roleServices) {
        var ctrl = this;
        ctrl.selected = null;
        ctrl.updateOrders = function (index) {
            ctrl.data.splice(index, 1);
            for (var i = 0; i < ctrl.data.length; i++) {
                ctrl.data[i].priority = i + 1;
            }
        };
        //ctrl.change = async function () {
        //    //var permission = ctrl.page.navPermission;
        //    //$rootScope.isBusy = true;
        //    //var resp = await roleServices.updatePermission(permission);
        //    //if (resp && resp.isSucceed) {
        //    //    $rootScope.showMessage('Thành công', 'success');
        //    //    $rootScope.isBusy = false;
        //    //    $scope.$apply();
        //    //}
        //    //else {
        //    //    if (resp) { $rootScope.showErrors(resp.errors); }
        //    //    $rootScope.isBusy = false;
        //    //    $scope.$apply();
        //    //}
        //};
    }],
    bindings: {
        prefix: '=',
        page: '=',
        callback: '&'
    }
});

app.component('productSeo', {
    templateUrl: '/app/app-portal/pages/product/components/seo/productSeo.html',
    bindings: {
        product: '=',
        onDelete: '&',
        onUpdate: '&'
    }
});

app.component('themeExportModules', {
    templateUrl: '/app/app-portal/pages/theme/components/theme-export-modules/view.html',
    controller: ['$rootScope', '$scope', 'ngAppSettings', function ($rootScope, $scope) {
        var ctrl = this;
        ctrl.updateModuleExport = function(module){
            ctrl.selectedExport.modules = angular.copy($rootScope.filterArray(ctrl.exportData.modules, 'isActived', true)); 
            angular.forEach(ctrl.selectedExport.modules,function(e){
                e.data.items = angular.copy($rootScope.filterArray(e.data.items, 'isActived', true));
            });
            
            
            console.log(ctrl.selectedExport);
        };    
    }],
    bindings: {
        exportData: '=',
        selectedExport: '='
    }
});

app.component('themeExportPages', {
    templateUrl: '/app/app-portal/pages/theme/components/theme-export-pages/view.html',
    controller: ['$rootScope', '$scope', 'ngAppSettings', function ($rootScope, $scope) {
        var ctrl = this;
        ctrl.updatePageExport = function(page){
            ctrl.selectedExport.pages = angular.copy($rootScope.filterArray(ctrl.exportData.pages, 'isActived', true)); 
            angular.forEach(ctrl.selectedExport.pages,function(e){
                e.moduleNavs = angular.copy($rootScope.filterArray(e.moduleNavs, 'isActived', true));
                angular.forEach(e.moduleNavs,function(n){
                    n.module.data.items = angular.copy($rootScope.filterArray(n.module.data.items, 'isActived', true));
                    $rootScope.removeObjectByKey(ctrl.exportData.modules, 'id', n.moduleId);
                    $rootScope.removeObjectByKey(ctrl.selectedExport.modules, 'id', n.moduleId);
                });
            });
            
            
            console.log(ctrl.selectedExport);
        };    
    }],
    bindings: {
        exportData: '=',
        selectedExport: '='
    }
});
modules.component('aceEditor', {
    templateUrl: '/app/app-portal/components/ace-editor/ace-editor.html',
    controller: ['$rootScope', '$scope', 'ngAppSettings',
        function ($rootScope, $scope, ngAppSettings) {
            var ctrl = this;
            ctrl.previousId = null;
            ctrl.editor = null;
            ctrl.id = Math.floor(Math.random() * 100) + 1;
            ctrl.$onChanges = (changes) => {
                if (changes.content) {
                    ctrl.updateEditors();
                }
            };

            this.$doCheck = function () {
                if (ctrl.previousId != null && ctrl.previousId !== ctrl.contentId) {
                    ctrl.previousId = ctrl.contentId;
                    ctrl.updateEditors();
                }
            }.bind(this);
            ctrl.initAce = function () {
                setTimeout(() => {
                    ctrl.previousId = ctrl.contentId;
                    ctrl.updateEditors();
                    $scope.$apply();
                }, 200);

            };
            ctrl.updateContent = function (content) {
                ctrl.editor.setValue(content);
            };
            ctrl.updateEditors = function () {
                $.each($('#code-editor-' + ctrl.id), function (i, e) {
                    //var container = $(this);
                    ace.require("ace/ext/language_tools");
                    if (e) {
                        var editor = ace.edit(e);
                        switch (ctrl.ext) {
                            case '.json':
                                editor.session.setMode("ace/mode/json");
                                break;
                            case '.js':
                                editor.session.setMode("ace/mode/javascript");
                                break;
                            case '.css':
                                editor.session.setMode("ace/mode/css");
                                break;
                            case '.cshtml':
                                editor.session.setMode("ace/mode/razor");
                                break;
                            case '.cs':
                                editor.session.setMode("ace/mode/csharp");
                                break;
                            default:
                                editor.session.setMode("ace/mode/razor");
                                break;
                        }
                        editor.setTheme("ace/theme/chrome");
                        //editor.setReadOnly(true);
                        if (ctrl.content) {
                            editor.setValue(ctrl.content);
                        }
                        editor.$blockScrolling = Infinity;
                        editor.session.setUseWrapMode(true);
                        editor.setOptions({
                            enableBasicAutocompletion: true,
                            enableSnippets: true,
                            enableLiveAutocompletion: false,
                            maxLines: 50,
                            fontSize: 11
                        });
                        editor.getSession().on('change', function (e) {
                            // e.type, etc
                            ctrl.content = editor.getValue();
                        });
                        editor.getSession().on('paste', function (e) {
                            // e.type, etc
                            ctrl.content = editor.getValue();
                        });
                        editor.commands.addCommand({
                            name: 'saveFile',
                            bindKey: {
                            win: 'Ctrl-S',
                            mac: 'Command-S',
                            sender: 'editor|cli'
                            },
                            exec: function(env, args, request) {
                                
                               var btn = document.getElementById('btnToSubmit');
                               btn.click();
                            }
                            });
                        ctrl.editor = editor;
                    }
                });
            };
        }
    ],
    bindings: {
        content: '=',
        contentId: '=',
        ext: '='
    }
});

modules.component('actions', {
    templateUrl: '/app/app-portal/components/actions/actions.html',
    controller: ['$rootScope', '$scope', '$location', function ($rootScope, $scope, $location) {
        var ctrl = this;
        ctrl.translate = function (keyword) {
            return $rootScope.translate(keyword);
        };
        ctrl.back = function () {
            ctrl.backUrl = ctrl.backUrl || '/admin';
            $location.url(ctrl.backUrl);
        };
    }],
    bindings: {
        previewUrl: '=',
        backUrl: '=',
        contentUrl: '=',
    }
});
modules.component('attributeSetValues', {
    templateUrl: '/app/app-portal/components/attribute-set-values/view.html',
    bindings: {
        title: '=',
        attributes: '=',
        data: '='
    },
    controller: ['$rootScope', '$scope',
        function ($rootScope, $scope) {
            var ctrl = this;
            ctrl.defaultAttr = {
                title: '',
                name: '',
                default: null,
                options: [],
                priority: 0,
                dataType: 7,
                isGroupBy: false,
                isSelect: false,
                isDisplay: true,
                width: 3
            };
            ctrl.selectedProp = null;
            ctrl.settings = $rootScope.globalSettings;

            ctrl.$doCheck = function () {
                if (angular.toJson(ctrl.columns) != angular.toJson(ctrl.trackedColumns)) {
                    ctrl.trackedColumns = angular.copy(ctrl.columns);
                    ctrl.trackedProperties = angular.copy(ctrl.properties);
                    ctrl.loadEditors();
                }
            }.bind(ctrl);

            ctrl.loadEditors = function () {
                ctrl.properties = [];
                for (let i = 0; i < ctrl.columns.length; i++) {
                    var col = ctrl.columns[i];
                    var oldObj = $rootScope.findObjectByKey(ctrl.trackedProperties, 'name', col.name) || {};

                    ctrl.properties.push({
                        title: col.title,
                        name: col.name,
                        dataType: col.dataType,
                        value: oldObj.value || col.defaultValue,
                        options: col.options
                    });

                }
            };

            ctrl.addAttr = function () {
                if (ctrl.columns) {
                    var t = angular.copy(ctrl.defaultAttr);
                    ctrl.columns.push(t);
                }
            };

            ctrl.filterData = function(attributeName){
                return $rootScope.findObjectByKey(ctrl.data, 'attributeName', attributeName);
            }
            ctrl.dragStart = function(index){
                ctrl.dragStartIndex = index;
            };
            ctrl.updateOrders = function(index){
                if(index> ctrl.dragStartIndex){
                    ctrl.attributes.splice(ctrl.dragStartIndex, 1);
                }
                else{
                    ctrl.attributes.splice(ctrl.dragStartIndex+1, 1);
                }
                angular.forEach(ctrl.attributes, function(e,i){
                    e.priority = i;
                });
            } 
        }]
});
modules.component('attributeList', {
    templateUrl: '/app/app-portal/components/attribute-list/view.html',
    controller: ['$rootScope', '$scope','AttributeFieldService',
        function ($rootScope, $scope, service) {
            var ctrl = this;
            ctrl.selectedCol = null;
            ctrl.settings = $rootScope.globalSettings;
            ctrl.$onInit = async function(){
                var getDefaultAttr = await service.getSingle([null, 'portal']);
                if (getDefaultAttr.isSucceed) {
                    ctrl.defaultAttr = getDefaultAttr.data;
                    ctrl.defaultAttr.options = [];
                }
            }
            ctrl.addAttr = function () {
                if (ctrl.attributes) {
                    var t = angular.copy(ctrl.defaultAttr);
                    ctrl.attributes.push(t);
                }
            };
    
            ctrl.addOption = function (col, index) {
                var val = $('#option_' + index).val();
                col.options = col.options || [];
                var opt = {
                    'value': val,
                    'dataType': 7
                };
                col.options.push(opt);
                $('#option_' + index).val('');
            };
            ctrl.generateForm = function(){
                var formHtml = document.createElement('module-form');
                formHtml.setAttribute('class','row');
                angular.forEach(ctrl.activedData.attributes, function(e,i){
                    var el;
                    var label = document.createElement('label');
                    label.setAttribute('class', 'control-label');
                    label.setAttribute('ng-bind', '{{data.title}}');
                    
                    switch(e.dataType){
                        case 1:
                        el = document.createElement('input');
                        el.setAttribute('type', 'datetime-local');                                 
                        break;
                        
                        case 2:
                        el = document.createElement('input');
                        el.setAttribute('type', 'date');                                 
                        break;
                        
                        case 3:
                        el = document.createElement('input');
                        el.setAttribute('type', 'time');                                 
                        break;
    
                        case 5:
                        el = document.createElement('input');
                        el.setAttribute('type', 'tel');                                 
                        break;
                       
                        case 6:
                        el = document.createElement('input');
                        el.setAttribute('type', 'number');                                 
                        break;
                       
                        case 8:
                        el = document.createElement('trumbowyg');
                        el.setAttribute('options', '{}');                                 
                        el.setAttribute('type', 'number');                                 
                        break;
                        
                        case 9:
                        el = document.createElement('textarea');
                        break;
    
                        default:
                        el = document.createElement('input');
                        el.setAttribute('type', 'text');
                        formHtml.appendChild(el);
                        break;
                    }
                    el.setAttribute('ng-model', 'data.jItem[' + e.name + '].value');
                    el.setAttribute( 'placeholder', '{{$ctrl.title}}');
                    formHtml.appendChild(label);      
                    formHtml.appendChild(el);      
                    
                });
                console.log(formHtml);
                ctrl.activedData.formView.content = formHtml.innerHTML;
            };
    
            ctrl.generateName = function (col) {
                col.name = $rootScope.generateKeyword(col.title, '_');
            }
            ctrl.removeAttr = function (index) {
                if (ctrl.attributes) {
                    ctrl.attributes.splice(index, 1);
                }
            }
            ctrl.updateOrders = function(index){
                if(index> ctrl.dragStartIndex){
                    ctrl.attributes.splice(ctrl.dragStartIndex, 1);
                }
                else{
                    ctrl.attributes.splice(ctrl.dragStartIndex+1, 1);
                }
                angular.forEach(ctrl.attributes, function(e,i){
                    e.priority = i;
                });
            } 
           
            ctrl.dragStart = function(index){
                ctrl.dragStartIndex = index;
            }            
        }],
    bindings: {
        title: '=',
        attributes: '='
    }
});

modules.component('attributeValueEditor', {
    templateUrl: '/app/app-portal/components/attribute-value-editor/view.html',
    bindings: {
        attributeValue: '=',
        attribute: '=',
        inputClass: '=',
        isShowTitle: '=',
        title: '='
    },
    controller: ['$rootScope', '$scope', 'ngAppSettings', function ($rootScope, $scope, ngAppSettings) {
        var ctrl = this;
        ctrl.icons = ngAppSettings.icons;
        ctrl.dataTypes = $rootScope.globalSettings.dataTypes;
        ctrl.$onInit = function(){
            setTimeout(() => {
                ctrl.attributeValue.priority = ctrl.attribute.priority;                
                console.log(ctrl.encryptedData, ctrl.decryptedData);
                switch(ctrl.attribute.dataType){
                    case 1:
                    case 2:
                    case 3:
                        if(ctrl.attributeValue.datetimeValue){
                            ctrl.attributeValue.dateObj = new Date(ctrl.attributeValue.datetimeValue);
                            $scope.$apply();
                        }
                        break;
                    default:
                        if(ctrl.attribute.isEncrypt){
                            var encryptedData = {
                                key: ctrl.attributeValue.encryptKey,
                                data: ctrl.attributeValue.encryptValue
                            };
                            ctrl.attributeValue.stringValue = $rootScope.decrypt(encryptedData);
                        }
                        if(!ctrl.attributeValue.stringValue){
                            ctrl.attributeValue.stringValue = ctrl.attribute.defaultValue;
                            $scope.$apply();
                        }
                        break;
                }
            }, 200);
        };
        ctrl.updateStringValue = function(dataType){
            switch (dataType) {
                case 1:
                case 2:
                case 3:
                    if(ctrl.attributeValue.dateObj){
                        ctrl.attributeValue.datetimeValue = ctrl.attributeValue.dateObj.toISOString();
                        ctrl.attributeValue.stringValue = ctrl.attributeValue.datetimeValue;
                    }
                    break;
                case 6:
                    if(ctrl.attributeValue.doubleValue){
                        ctrl.attributeValue.stringValue = ctrl.attributeValue.doubleValue.toString();
                    }
                    break;
                case 18:
                    if(ctrl.attributeValue.booleanValue){
                        ctrl.attributeValue.stringValue = ctrl.attributeValue.booleanValue.toString();
                    }
                    break;
            
                default:
                    break;
            }
            console.log(ctrl.attributeValue);
        }
    }]
});

//modules.controller('ImageController', );
modules.component('customImage', {
    templateUrl: '/app/app-portal/components/custom-image/custom-image.html',
    bindings: {
        header: '=',
        title: '=',
        description: '=',
        src: '=',
        srcUrl: '=',
        postedFile: '=',
        type: '=',
        folder: '=',
        auto: '=',
        onDelete: '&',
        onUpdate: '&'
    },
    controller: ['$rootScope', '$scope', 'ngAppSettings', 'MediaService', function ($rootScope, $scope, ngAppSettings, mediaService) {
        var ctrl = this;
        var image_placeholder = '/images/image_placeholder.jpg';
        ctrl.isImage = false;
        ctrl.mediaNavs = [];
        ctrl.init = function () {
            ctrl.srcUrl = ctrl.srcUrl || image_placeholder;
            ctrl.isImage = ctrl.srcUrl.match(/([/|.|\w|\s|-])*\.(?:jpg|gif|png)/g);
            ctrl.maxHeight = ctrl.maxHeight|| '200px';
            ctrl.id = Math.floor(Math.random() * 100);
        };
        
        ctrl.mediaFile = {
            file: null,
            fullPath: '',
            folder: ctrl.folder,
            title: ctrl.title,
            description: ctrl.description
        };
        ctrl.media = null;
        ctrl.$doCheck = function () {
            if (ctrl.src !== ctrl.srcUrl && ctrl.srcUrl != image_placeholder) {
                ctrl.src = ctrl.srcUrl;
            }
        }.bind(ctrl);
        // ctrl.updateSrc = function () {
        //     alert('asdfa');
        //     if (ctrl.src !== ctrl.srcUrl && ctrl.srcUrl != image_placeholder) {
        //         ctrl.src = ctrl.srcUrl;
        //     }
        // };
        ctrl.selectFile = function (file, errFiles) {
            if (file !== undefined && file !== null) {
                ctrl.mediaFile.folder = ctrl.folder ? ctrl.folder : 'Media';
                ctrl.mediaFile.title = ctrl.title ? ctrl.title : '';
                ctrl.mediaFile.description = ctrl.description ? ctrl.description : '';
                ctrl.mediaFile.file = file;

                if (ctrl.auto) {
                    ctrl.uploadFile(file);
                }
                else {
                    ctrl.getBase64(file);
                }
            }
        };

        ctrl.uploadFile = async function (file) {
            if (file !== null) {
                $rootScope.isBusy = true;
                var reader = new FileReader();
                reader.readAsDataURL(file);
                reader.onload = async function () {
                    var getMedia = await mediaService.getSingle(['portal']);
                    if (getMedia.isSucceed) {
                        ctrl.mediaFile.fileName = file.name.substring(0, file.name.lastIndexOf('.'));
                        ctrl.mediaFile.extension = file.name.substring(file.name.lastIndexOf('.'));
                        ctrl.mediaFile.fileStream = reader.result;
                        var media = getMedia.data;
                        media.title = ctrl.title;
                        media.description = ctrl.description;
                        media.mediaFile = ctrl.mediaFile;
                        var resp = await mediaService.save(media);
                        if (resp && resp.isSucceed) {
                            ctrl.src = resp.data.fullPath;
                            ctrl.srcUrl = resp.data.fullPath;
                            $rootScope.isBusy = false;
                            $scope.$apply();
                        }
                        else {
                            if (resp) { $rootScope.showErrors(resp.errors); }
                            $rootScope.isBusy = false;
                            $scope.$apply();
                        }
                    }

                };
                reader.onerror = function (error) {

                };
            }
            else {
                return null;
            }

        }
        ctrl.getBase64 = function (file) {
            if (file !== null && ctrl.postedFile) {
                $rootScope.isBusy = true;
                var reader = new FileReader();
                reader.readAsDataURL(file);
                reader.onload = function () {
                    var index = reader.result.indexOf(',') + 1;
                    var base64 = reader.result.substring(index);
                    ctrl.postedFile.fileName = file.name.substring(0, file.name.lastIndexOf('.'));
                    ctrl.postedFile.extension = file.name.substring(file.name.lastIndexOf('.'));
                    ctrl.postedFile.fileStream = reader.result;
                    ctrl.srcUrl = reader.result;
                    ctrl.src = reader.result;
                    $rootScope.isBusy = false;
                    $scope.$apply();
                };
                reader.onerror = function (error) {
                    $rootScope.isBusy = false;
                    $rootScope.showErrors([error]);
                };
            }
            else {
                return null;
            }
        }

    }],
    
});
modules.component('googleAnalytic', {
  templateUrl: '/app/app-portal/components/google-analytic/view.html',
  controller: [
    '$rootScope', 'CommonService',
    function ($rootScope, commonService) {
      var ctrl = this;
      ctrl.init = function () {
        gapi.analytics.ready(function () {
          if ($rootScope.settings.data.Google_Client_Id) {
            /**
             * Authorize the user immediately if the user has already granted access.
             * If no access has been created, render an authorize button inside the
             * element with the ID "embed-api-auth-container".
             */
            gapi.analytics.auth.authorize({
              container: 'embed-api-auth-container',
              //REPLACE WITH YOUR CLIENT ID
              clientid: $rootScope.settings.data.Google_Client_Id
            });


            /**
             * Create a ViewSelector for the first view to be rendered inside of an
             * element with the id "view-selector-1-container".
             */
            var viewSelector1 = new gapi.analytics.ViewSelector({
              container: 'view-selector-1-container'
            });
            /**
             * Create a new ActiveUsers instance to be rendered inside of an
             * element with the id "active-users-container" and poll for changes every
             * five seconds.
             */
            var activeUsers = new gapi.analytics.ext.ActiveUsers({
              container: 'active-users-container',
              pollingInterval: 5
            });
            /**
             * Add CSS animation to visually show the when users come and go.
             */
            activeUsers.once('success', function () {
              var element = this.container.firstChild;
              var timeout;

              this.on('change', function (data) {
                var element = this.container.firstChild;
                var animationClass = data.delta > 0 ? 'is-increasing' : 'is-decreasing';
                element.className += (' ' + animationClass);

                clearTimeout(timeout);
                timeout = setTimeout(function () {
                  element.className =
                    element.className.replace(/ is-(increasing|decreasing)/g, '');
                }, 3000);
              });
            });

            /**
             * Create a ViewSelector for the second view to be rendered inside of an
             * element with the id "view-selector-2-container".
             */
            var viewSelector2 = new gapi.analytics.ViewSelector({
              container: 'view-selector-2-container'
            });

            // Render both view selectors to the page.
            // viewSelector1.execute();
            //viewSelector2.execute();


            /**
             * Create the first DataChart for top countries over the past 30 days.
             * It will be rendered inside an element with the id "chart-1-container".
             */
            var dataChart1 = new gapi.analytics.googleCharts.DataChart({
              query: {
                // ids: $rootScope.settings.data.Google_Analytic_Ids,
                metrics: 'ga:sessions',
                dimensions: 'ga:date',
                'start-date': '30daysAgo',
                'end-date': 'yesterday'
              },
              chart: {
                container: 'chart-1-container',
                type: 'LINE',
                options: {
                  width: '95%',
                  legendTextStyle: { color: '#FFF' },
                  titleTextStyle: { color: '#FFF' },
                  backgroundColor: { fill: 'transparent' },
                  hAxis: {
                    textStyle: { color: '#FFF' }
                  },
                  vAxis: {
                    textStyle: { color: '#FFF' }
                  },
                  series: {
                    0: { color: $rootScope.globalSettings.portalThemeSettings.primaryColor },
                    1: { color: '#e7711b' },
                    2: { color: '#f1ca3a' },
                    3: { color: '#6f9654' },
                    4: { color: '#1c91c0' },
                    5: { color: '#43459d' },
                  }
                }
              }
            });


            dataChart1.set({ query: { ids: $rootScope.settings.data.Google_Analytic_Ids } }).execute();
            activeUsers.set({ ids: $rootScope.settings.data.Google_Analytic_Ids }).execute();


            /**
             * Create the second DataChart for top countries over the past 30 days.
             * It will be rendered inside an element with the id "chart-2-container".
             */
            var dataChart2 = new gapi.analytics.googleCharts.DataChart({
              query: {
                // ids: $rootScope.settings.data.Google_Analytic_Ids,
                metrics: 'ga:sessions',
                dimensions: 'ga:country',
                'start-date': '30daysAgo',
                'end-date': 'yesterday',
                'max-results': 6,
                sort: '-ga:sessions'
              },
              chart: {
                container: 'chart-2-container',
                type: 'PIE',
                options: {
                  width: '100%',
                  pieHole: 4 / 9
                }
              }
            });

            /**
             * Update the first dataChart when the first view selecter is changed.
             */
            viewSelector1.on('change', function (ids) {
              dataChart1.set({ query: { ids: ids } }).execute();
              // Start tracking active users for this view.
              activeUsers.set({ ids: ids }).execute();
            });

            /**
             * Update the second dataChart when the second view selecter is changed.
             */
            viewSelector2.on('change', function (ids) {
              dataChart2.set({ query: { ids: ids } }).execute();
            });
          }
        });
      }
    }
  ],
  bindings: {
    totalPriceStatus: '=',
    currencyCode: '=',
    totalPrice: '='
  }
});
(function (angular) {
    app.component('headerNav', {
        templateUrl: '/app/app-portal/components/header-nav/headerNav.html',
        controller: ['$rootScope', '$location', 
                    'CommonService', 'AuthService', 'TranslatorService', 'GlobalSettingsService',
            function ($rootScope, $location, 
                    commonService, authService, translatorService, globalSettingsService) {
                var ctrl = this;
                ctrl.globalSettings = $rootScope.globalSettings;
                if (authService.authentication) {
                    ctrl.avatar = authService.authentication.avatar;
                }
                this.$onInit = function(){
                    ctrl.settings = $rootScope.settings;
                    ctrl.settings.cultures = $rootScope.globalSettings.cultures; 
                }
                ctrl.translate = $rootScope.translate;
                ctrl.getConfiguration = function (keyword, isWrap, defaultText) {
                    return  $rootScope.getConfiguration(keyword, isWrap, defaultText);
                }
                ctrl.changeLang = function (lang, langIcon) {
                    ctrl.settings.lang = lang;
                    ctrl.settings.langIcon = langIcon;
                    commonService.fillAllSettings(lang).then(function () {
                        window.top.location = location.href;                        
                    });
                };
                ctrl.logOut = function () {
                    $rootScope.logOut();
                };
                ctrl.addFavorite = function () {
                    $('#dlg-favorite').modal('show');
                }
                ctrl.toggleSidebar = function () {           
                    $('#sidebar').toggleClass('active');
                }
                ctrl.generateSitemap = async function(){
                    $rootScope.isBusy = true;
                    var resp = await commonService.genrateSitemap();
                    if(resp)
                    {
                        window.top.location.href = '/portal/file/details?folder=' + resp.fileFolder + '&filename=' + resp.fileName + resp.extension;
                    }
                    else{
                        $rootScope.isBusy = false;
                        $rootScope.showErrors(['Server error']);
                    }
                }
            }],
        bindings: {
            breadCrumbs: '=',
            settings: '='
        }
    });
})(window.angular);

modules.component('filterList', {
    templateUrl: '/app/app-portal/components/filter-list/filter-list.html',
    controller: ['$scope', '$rootScope', 'ngAppSettings', function ($scope, $rootScope, ngAppSettings) {
        var ctrl = this;
        ctrl.dateRange = {
            fromDate: null,
            toDate: null
        };
        ctrl.init = function(){
            ctrl.orders = ngAppSettings.orders;
            ctrl.directions = ngAppSettings.directions;
            ctrl.pageSizes = ngAppSettings.pageSizes;
            ctrl.statuses = [];
            var statuses = ctrl.request.contentStatuses || ngAppSettings.contentStatuses;
            angular.forEach(statuses, function(val,i){
                ctrl.statuses.push({
                    value:i,
                    title:val
                });
            });
            
        };
        ctrl.updateDate = function () {
            if (Date.parse(ctrl.dateRange.fromDate)) {
                ctrl.request.fromDate = new Date(ctrl.dateRange.fromDate).toISOString();
            }
            else {
                $scope.request.fromDate = null;
            }
            if (Date.parse(ctrl.dateRange.toDate)) {
                ctrl.request.toDate = new Date(ctrl.dateRange.toDate).toISOString();
            }
            else {
                ctrl.request.toDate = null;
            }
            ctrl.callback({ pageIndex: 0 });
        };
    }],
    bindings: {
        request: '=',
        createUrl: '=',
        callback: '&'
    }
});

modules.component('hubMessages', {
    templateUrl: '/app/app-portal/components/hub-messages/hub-messages.html',
    controller: 'HubMessagesController',
    bindings: {
        
    }
});
app.controller('HubMessagesController', ['$scope', function($scope){
    BaseHub.call(this, $scope);
    $scope.init = function(){
        $scope.startConnection('portalhub');
    }
}]);


modules.component('jumbotrons', {
    templateUrl: '/app/app-portal/components/jumbotrons/jumbotrons.html',
    controller: ['$rootScope', '$scope', '$location', function ($rootScope, $scope, $location) {
        var ctrl = this;
        ctrl.translate = function (keyword) {
            return $rootScope.translate(keyword);
        };
        // ctrl.back = function () {
        //     ctrl.backUrl = ctrl.backUrl || '/admin';
        //     $location.path(ctrl.backUrl);
        // };
    }],
    bindings: {
        tagName: '=',
        tagType: '=',
    }
});

modules.component('mainSideBarItem', {
    templateUrl: '/app/app-portal/components/main-side-bar-item/main-side-bar-item.html',
    controller: ['$rootScope', function ($rootScope) {
        var ctrl = this;
        ctrl.translate = $rootScope.translate;
    }],
    bindings: {
        item: '=',
    }
});
modules.component('mainSideBarDynamic', {
    templateUrl: '/app/app-portal/components/main-side-bar-dynamic/main-side-bar-dynamic.html',
    controller: ['$rootScope', '$scope', 'ngAppSettings', 'RoleService', 'TranslatorService', function ($rootScope, $scope, ngAppSettings, roleServices, translatorService) {
        var ctrl = this;
        ctrl.init = function () {
            if (ctrl.roles) {
                ctrl.role = ctrl.roles[0];
            }    
        };
    }],
    bindings: {
        roles: '=',
        activedRole: '=',
        translate: '&'
    }
});
modules.component('mainSideBar', {
    templateUrl: '/app/app-portal/components/main-side-bar/main-side-bar.html',
    controller: ['$rootScope', '$scope', 'ngAppSettings', 'TranslatorService', function ($rootScope, $scope, ngAppSettings, translatorService) {
        var ctrl = this;
        ctrl.init = async function () {
            ctrl.items = [
                {
                    title: 'portal_dashboard',
                    shortTitle: 'portal_short_dashboard',
                    icon: 'mi mi-Tiles',
                    href: '/portal',
                    subMenus: []
                },
                {
                    title: 'portal_articles',
                    shortTitle: ('portal_articles'),
                    icon: 'mi mi-ReadingList',
                    href: '#',
                    subMenus: [
                        {
                            title: ('portal_create'),
                            href: '/portal/article/create',
                            icon: 'mi mi-Add'
                        },
                        {
                            title: 'portal_list',
                            href: '/portal/article/list',
                            icon: 'mi mi-List'
                        }
                    ]
                },
                // {
                //     title: 'portal_products',
                //     shortTitle: 'portal_products',
                //     icon: 'mi mi-Package',
                //     href: '#',
                //     subMenus: [
                //         {
                //             title: ('portal_create'),
                //             href: '/portal/product/create',
                //             icon: 'mi mi-Add'
                //         },
                //         {
                //             title: 'portal_list',
                //             href: '/portal/product/list',
                //             icon: 'mi mi-List'
                //         }
                //     ]
                // },
                // {
                //     title: 'portal_orders',
                //     shortTitle: 'portal_orders',
                //     icon: 'mi mi-CashDrawer',
                //     href: '#',
                //     subMenus: [
                //         {
                //             title: ('portal_create'),
                //             href: '/portal/order/create',
                //             icon: 'mi mi-Add'
                //         },
                //         {
                //             title: 'portal_list',
                //             href: '/portal/order/list',
                //             icon: 'mi mi-List'
                //         }
                //     ]
                // },
                {
                    title: 'portal_pages',
                    shortTitle: 'portal_pages',
                    icon: 'mi mi-Page',
                    href: '#',
                    subMenus: [
                        {
                            title: ('portal_create'),
                            href: '/portal/page/create',
                            icon: 'mi mi-Add'
                        },
                        {
                            title: 'portal_list',
                            href: '/portal/page/list',
                            icon: 'mi mi-List'
                        }
                    ]
                },
                {
                    title: 'portal_modules',
                    shortTitle: 'portal_modules',
                    icon: 'mi mi-ResolutionLegacy',
                    href: '#',
                    subMenus: [
                        {
                            title: ('portal_create'),
                            href: '/portal/module/create',
                            icon: 'mi mi-Add'
                        },
                        {
                            title: 'portal_list',
                            href: '/portal/module/list',
                            icon: 'mi mi-List'
                        }
                    ]
                },
                {
                    title: 'portal_themes',
                    shortTitle: 'portal_themes',
                    icon: 'mi mi-Personalize',
                    href: '#',
                    subMenus: [
                        {
                            title: ('portal_create'),
                            href: '/portal/theme/create',
                            icon: 'mi mi-Add'
                        },
                        {
                            title: 'portal_list',
                            href: '/portal/theme/list',
                            icon: 'mi mi-List'
                        }
                    ]
                },
                {
                    title: 'portal_media',
                    shortTitle: 'Media',
                    icon: 'mi mi-Photo2',
                    href: '#',
                    subMenus: [
                        {
                            title: ('portal_create'),
                            href: '/portal/media/create',
                            icon: 'mi mi-Add'
                        },
                        {
                            title: 'portal_list',
                            href: '/portal/media/list',
                            icon: 'mi mi-List'
                        }
                    ]
                },
                {
                    title: 'portal_file',
                    shortTitle: 'File',
                    icon: 'mi mi-FileExplorer',
                    href: '#',
                    subMenus: [
                        {
                            title: ('portal_create'),
                            href: '/portal/file/create',
                            icon: 'mi mi-Add'
                        },
                        {
                            title: 'portal_list',
                            href: '/portal/file/list',
                            icon: 'mi mi-List'
                        }
                    ]
                },
                {
                    title: 'portal_users',
                    shortTitle: 'Users',
                    icon: 'mi mi-Contact',
                    href: '#',
                    subMenus: [
                        {
                            title: ('portal_create'),
                            href: '/portal/user/create',
                            icon: 'mi mi-Add'
                        },
                        {
                            title: 'portal_list',
                            href: '/portal/user/list',
                            icon: 'mi mi-List'
                        },
                        {
                            title: 'Roles',
                            href: '/portal/role/list',
                            icon: 'mi mi-Permissions'
                        }
                    ]
                },
                {
                    title: 'portal_settings',
                    shortTitle: 'Settings',
                    icon: 'mi mi-Settings mi-spin',
                    href: '#',
                    subMenus: [
                        {
                            title: 'portal_app_settings',
                            href: '/portal/app-settings/details',
                            icon: 'mi mi-ViewAll'
                        },
                        {
                            title: ('portal_create'),
                            href: '/portal/configuration/create',
                            icon: 'mi mi-Add'
                        },
                        {
                            title: 'portal_list',
                            href: '/portal/configuration/list',
                            icon: 'mi mi-List'
                        }
                    ]
                },
                // {
                //     title: 'portal_import',
                //     shortTitle: 'portal_short_import',
                //     icon: 'mi mi-Upload',
                //     href: '/portal/import',
                //     subMenus: []
                // },
                // {
                //     title: 'language',
                //     shortTitle: 'Language',
                //     icon: 'mi mi-TimeLanguage',
                //     href: '#',
                //     subMenus: [
                //         {
                //             title: 'portal_create',
                //             href: '/portal/language/create',
                //             icon: 'mi mi-Add'
                //         },
                //         {
                //             title: 'List',
                //             href: '/portal/language/list',
                //             icon: 'mi mi-List'
                //         }
                //     ]
                // },
                // {
                //     title: 'portal_cultures',
                //     shortTitle: 'portal_short_cultures',
                //     icon: 'mi mi-Globe mi-spin',
                //     href: '#',
                //     subMenus: [
                //         {
                //             title: ('portal_create'),
                //             href: '/portal/culture/create',
                //             icon: 'mi mi-Add'
                //         },
                //         {
                //             title: 'portal_list',
                //             href: '/portal/culture/list',
                //             icon: 'mi mi-List'
                //         }
                //     ]
                // },
                // {
                //     title: 'portal_permissions',
                //     shortTitle: 'portal_short_portal_permissions',
                //     icon: 'mi mi-LockscreenDesktop',
                //     href: '#',
                //     subMenus: [
                //         {
                //             title: ('portal_create'),
                //             href: '/portal/permission/create',
                //             icon: 'mi mi-Add'
                //         },
                //         {
                //             title: 'portal_list',
                //             href: '/portal/permission/list',
                //             icon: 'mi mi-List'
                //         }
                //     ]
                // }
            ];
        };
    }],
    bindings: {
    }
});


modules.component('mainSideBarItemDynamic', {
    templateUrl: '/app/app-portal/components/main-side-bar-item-dynamic/main-side-bar-item-dynamic.html',
    controller: ['$rootScope', function ($rootScope) {
        var ctrl = this;
        ctrl.translate = $rootScope.translate;
    }],
    bindings: {
        iconSize: '=',
        linkStyle: '=',
        itemStyle:'=',
        item: '='
    }
});

modules.component('mediaUpload', {
    templateUrl: '/app/app-portal/components/media-upload/media-upload.html',
    controller: ['$scope', '$rootScope', 'MediaService', 'CommonService',
        function ($scope, $rootScope, service, commonService) {
            var ctrl = this;
            ctrl.activedData = {
                title: '',
                description: '',
                status: 2,
                mediaFile: {
                    file: null,
                    fullPath: '',
                    folderName: 'Media',
                    fileFolder: '',
                    fileName: '',
                    extension: '',
                    content: '',
                    fileStream: ''
                }
            };
            ctrl.save = async function (data) {
                $rootScope.isBusy = true;
                var resp = await service.save(data);
                if (resp && resp.isSucceed) {
                    $scope.activedData = resp.data;
                    $rootScope.showMessage('success', 'success');
                    $rootScope.isBusy = false;
                    if(ctrl.onUpdate){
                        ctrl.onUpdate();
                    }
                    $scope.$apply();
                } else {
                    if (resp) {
                        $rootScope.showErrors(resp.errors);
                    }
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
            }
        }],
    bindings: {
        'onUpdate': '&'
    }
});
'use strict';
app.controller('NavigationController', ['$scope', '$rootScope', 'ngAppSettings', '$routeParams', 'MediaService', 'CommonService',
    function ($scope, $rootScope, ngAppSettings, $routeParams, service, commonService) {
        BaseCtrl.call(this, $scope, $rootScope, $routeParams, ngAppSettings, service);

        $scope.activedData = {
            title: '',
            description: '',
            status: 2,
            mediaFile: {
                file: null,
                fullPath: '',
                folderName: 'Media',
                fileFolder: '',
                fileName: '',
                extension: '',
                content: '',
                fileStream: ''
            }
        };
        $scope.relatedMedias = [];
        $scope.uploadMedia = async function () {
            $rootScope.isBusy = true;
            var resp = await service.uploadMedia($scope.mediaFile);
            if (resp && resp.isSucceed) {
                $scope.activedMedia = resp.data;
                $scope.getList();
                $scope.$apply();
            }
            else {
                if (resp) { $rootScope.showErrors(resp.errors); }
                $rootScope.isBusy = false;
                $scope.$apply();
            }
        };
        $scope.selectFile = function (file, errFiles) {
            if (file !== undefined && file !== null) {
                $scope.mediaFile.folder = 'Media';
                $scope.mediaFile.file = file;
                $scope.getBase64(file);
            }
        };
        $scope.getBase64 = function (file) {
            if (file !== null && $scope.postedFile) {
                $rootScope.isBusy = true;
                var reader = new FileReader();
                reader.readAsDataURL(file);
                reader.onload = function () {
                    var index = reader.result.indexOf(',') + 1;
                    var base64 = reader.result.substring(index);
                    $scope.activedMedia.mediaFile.fileName = $rootScope.generateKeyword(file.name.substring(0, file.name.lastIndexOf('.')), '-');
                    $scope.activedMedia.mediaFile.extension = file.name.substring(file.name.lastIndexOf('.'));
                    $scope.activedMedia.mediaFile.fileStream = reader.result;
                    $rootScope.isBusy = false;
                    $scope.$apply();
                };
                reader.onerror = function (error) {
                    $rootScope.showErrors([error]);
                    $rootScope.isBusy = false;
                };
            }
            else {
                return null;
            }
        };
        $scope.togglePreview = function (item) {
            item.isPreview = item.isPreview === undefined ? true : !item.isPreview;
        };
        $scope.clone = async function (id) {
            $rootScope.isBusy = true;
            var resp = await service.cloneMedia(id);
            if (resp && resp.isSucceed) {
                $scope.activedMedia = resp.data;
                $rootScope.showMessage('Thành công', 'success');
                $rootScope.isBusy = false;
                $scope.$apply();
                //$location.path('/portal/media/details/' + resp.data.id);
            }
            else {
                if (resp) { $rootScope.showErrors(resp.errors); }
                $rootScope.isBusy = false;
                $scope.$apply();
            }
        };
        $scope.saveCallback = function(){
            $scope.getList();
        }
        $scope.removeCallback = function(){
            $scope.getList();
        }
    }]);


modules.component('mixSelectIcons', {
    templateUrl: '/app/app-portal/components/mix-select-icons/mix-select-icons.html',
    controller: ['$rootScope', '$scope', '$location', function ($rootScope, $scope, $location) {
        var ctrl = this;
        ctrl.translate = function (keyword) {
            return $rootScope.translate(keyword);
        };
        ctrl.select = function(ico){
            ctrl.data = ico;
        }
    }],
    bindings: {
        data: '=',
        prefix: '=',
        options: '=',
    }
});
modules.component('modalFavorite', {
    templateUrl: '/app/app-portal/components/modal-favorite/modal-favorite.html',
    controller: 'PermissionController',
    bindings: {
        message: '='
    }
});
modules.component('modalNavArticles', {
    templateUrl: '/app/app-portal/components/modal-nav-articles/modal-nav-articles.html',
    controller: ['$rootScope', '$scope', 'ngAppSettings', 'ArticleService',
        function ($rootScope, $scope, ngAppSettings, articleService) {
            var ctrl = this;
            ctrl.request = angular.copy(ngAppSettings.request);            
            ctrl.navs = [];
            ctrl.data = { items: [] }
            ctrl.loadArticles = async function (pageIndex) {   
                ctrl.request.query = ctrl.query + ctrl.srcId;    
                if (pageIndex !== undefined) {
                    ctrl.request.pageIndex = pageIndex;
                }
                if (ctrl.request.fromDate !== null) {
                    var d = new Date(ctrl.request.fromDate);
                    ctrl.request.fromDate = d.toISOString();
                }
                if (ctrl.request.toDate !== null) {
                    var d = new Date(ctrl.request.toDate);
                    ctrl.request.toDate = d.toISOString();
                }
                var response = await articleService.getList(ctrl.request);
                if (response.isSucceed) {
                    ctrl.data = response.data;
                    ctrl.navs = [];
                    angular.forEach(response.data.items, function (e) {
                        var item = {
                            priority: e.priority,
                            description: e.title,
                            articleId: e.id,                            
                            image: e.thumbnailUrl,
                            specificulture: e.specificulture,
                            article: e,
                            status: 2,
                            isActived: false
                        };
                        item[ctrl.srcField] = ctrl.srcId;
                        ctrl.navs.push(item);
                    });
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
                else {
                    $rootScope.showErrors(response.errors);
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
            }
            ctrl.saveSelected = function(){
                ctrl.selected = $rootScope.filterArray(ctrl.navs, 'isActived', true);
                setTimeout(() => {
                    ctrl.save().then(() => {
                        ctrl.loadArticles();
                    });   
                     
                }, 500);
                
            }
        }

    ],
    bindings: {
        srcField: '=',
        srcId: '=',
        query:'=',
        selected:'=',
        save: '&'
    }
});
modules.component('monacoEditor', {
    templateUrl: '/app/app-portal/components/monaco-editor/view.html',
    controller: ['$rootScope', '$scope', '$element',
        function ($rootScope, $scope, $element) {
            var ctrl = this;
            ctrl.previousId = null;
            ctrl.editor = null;
            ctrl.minHeight =  320;
            ctrl.isVisible = false;
            ctrl.id = Math.floor(Math.random() * 100) + 1;
            ctrl.$onChanges = (changes) => {
                if (changes.content) {
                    ctrl.updateContent(changes.content);
                }
                if(changes.isVisible){
                    ctrl.updateEditors();
                }
            };

            this.$doCheck = function () {
                if (ctrl.previousId != null && ctrl.previousId !== ctrl.contentId) {
                    ctrl.previousId = ctrl.contentId;
                    ctrl.updateContent(ctrl.content);
                }
                if(ctrl.isVisible && ctrl.editor){
                    setTimeout(() => {
                        var h = ctrl.editor.getModel().getLineCount() * 18;
                        $($element).height(h);
                        ctrl.editor.layout();        
                    }, 200);                    
                    
                }
            }.bind(this);
            ctrl.initEditor = function () {
                
                setTimeout(() => {
                    ctrl.previousId = ctrl.contentId;
                    ctrl.updateEditors();
                    $scope.$apply();
                }, 200);

            };
            ctrl.updateContent = function (content) {
                ctrl.editor.setValue(content);
                var h = ctrl.editor.getModel().getLineCount() * 18;
                $($element).height(h);
                ctrl.editor.layout();    
            };
            ctrl.updateEditors = function () {
                $.each($($element).find('.code-editor'), function (i, e) {
                    //var container = $(this);
                    if (e) {
                        var model = {
                            value: ctrl.content || ctrl.defaultContent,                            
                            contextmenu: false,
                            // theme: "vs-dark",
                            formatOnType: true,
                            formatOnPaste: true,
                            wordWrap: 'on',
                        };
                        switch (ctrl.ext) {
                            case '.json':
                                model.language = 'json';
                                break;
                            case '.js':
                                model.language = 'javascript';
                                break;
                            case '.css':
                                model.language = 'css';
                                break;
                            case '.cshtml':
                                model.language = 'razor';
                                break;
                            case '.cs':
                                model.language = 'csharp';
                                break;
                            default:
                                model.language = 'razor';
                                break;
                        }
                        ctrl.editor = monaco.editor.create(e, model);
                        
                        ctrl.editor.model.onDidChangeContent(()=>{
                            ctrl.content = ctrl.editor.model.getValue();
                        });
                        ctrl.editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_S, function() {
                            var btn = document.getElementById('btnToSubmit');
                            btn.click();
                        });
                        setTimeout(() => {
                            var h = ctrl.editor.getModel().getLineCount() * 18;
                            h = h < ctrl.minHeight ? ctrl.minHeight : h;
                            $(e).height(h);
                            ctrl.editor.layout();    
                        }, 200);
                        
                    }
                });
            };
        }
    ],
    bindings: {
        content: '=',
        defaultContent: '=?',        
        contentId: '=',
        isVisible: '=',
        ext: '='
    }
});
modules.component('portalThemeSettings', {
    templateUrl: '/app/app-portal/components/portal-theme-settings/view.html',
    bindings: {
        showLink: '='
    },
    controller: ['$rootScope','$scope','AppSettingsServices',
        function ($rootScope, $scope, appSettingsServices) {
            var ctrl = this;
            this.$onInit = function () {
                ctrl.portalThemeSettings = $rootScope.globalSettings.portalThemeSettings;
            }
            ctrl.applyThemeSettings = function () {
                $rootScope.globalSettings.portalThemeSettings = ctrl.portalThemeSettings;
            }
            ctrl.saveThemeSettings = async function () {
                var resp = await appSettingsServices.saveGlobalSettings('PortalThemeSettings', ctrl.portalThemeSettings);
                if (resp && resp.isSucceed) {
                    $rootScope.showMessage('success', 'success');
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
                else {
                    if (resp) { $rootScope.showErrors(resp.errors); }
                    $scope.$apply();
                }
            }
        }]
});
modules.component('setAttribute', {
    templateUrl: '/app/app-portal/components/set-attribute/view.html',
    controller: ['$rootScope', '$scope',
        function ($rootScope, $scope) {
            var ctrl = this;
            ctrl.selectedCol = null;
            ctrl.settings = $rootScope.globalSettings;
            ctrl.defaultAttr = {
                title: '',
                name: '',
                defaultValue: null,
                options: [],
                priority: 0,
                dataType: 7,
                isGroupBy: false,
                isSelect: false,
                isDisplay: true,
                width: 3
            };
            
            ctrl.addAttr = function () {
                if (ctrl.columns) {
                    var t = angular.copy(ctrl.defaultAttr);
                    ctrl.columns.push(t);
                }
            };
    
            ctrl.addOption = function (col, index) {
                var val = angular.element('#option_' + index).val();
                col.options.push(val);
                angular.element('#option_' + index).val('');
            };
            ctrl.generateForm = function(){
                var formHtml = document.createElement('module-form');
                formHtml.setAttribute('class','row');
                angular.forEach(ctrl.activedData.columns, function(e,i){
                    var el;
                    var label = document.createElement('label');
                    label.setAttribute('class', 'control-label');
                    label.setAttribute('ng-bind', '{{data.title}}');
                    
                    switch(e.dataType){
                        case 1:
                        el = document.createElement('input');
                        el.setAttribute('type', 'datetime-local');                                 
                        break;
                        
                        case 2:
                        el = document.createElement('input');
                        el.setAttribute('type', 'date');                                 
                        break;
                        
                        case 3:
                        el = document.createElement('input');
                        el.setAttribute('type', 'time');                                 
                        break;
    
                        case 5:
                        el = document.createElement('input');
                        el.setAttribute('type', 'tel');                                 
                        break;
                       
                        case 6:
                        el = document.createElement('input');
                        el.setAttribute('type', 'number');                                 
                        break;
                       
                        case 8:
                        el = document.createElement('trumbowyg');
                        el.setAttribute('options', '{}');                                 
                        el.setAttribute('type', 'number');                                 
                        break;
                        
                        case 9:
                        el = document.createElement('textarea');
                        break;
    
                        default:
                        el = document.createElement('input');
                        el.setAttribute('type', 'text');
                        formHtml.appendChild(el);
                        break;
                    }
                    el.setAttribute('ng-model', 'data.jItem[' + e.name + '].value');
                    el.setAttribute( 'placeholder', '{{$ctrl.title}}');
                    formHtml.appendChild(label);      
                    formHtml.appendChild(el);      
                    
                });
                console.log(formHtml);
                ctrl.activedData.formView.content = formHtml.innerHTML;
            };
    
            ctrl.generateName = function (col) {
                col.name = $rootScope.generateKeyword(col.title, '_');
            }
            ctrl.removeAttr = function (index) {
                if (ctrl.columns) {
                    ctrl.columns.splice(index, 1);
                }
            }
        }],
    bindings: {
        title: '=',
        columns: '='
    }
});
modules.component('templateEditor', {
    templateUrl: '/app/app-portal/components/template-editor/templateEditor.html',
    controller: ['$scope', '$rootScope', '$routeParams', 'ngAppSettings', 'GlobalSettingsService', 'TemplateService',
        function ($scope, $rootScope, $routeParams, ngAppSettings, globalSettingsService, service) {
            BaseCtrl.call(this, $scope, $rootScope, $routeParams, ngAppSettings, service);
            var ctrl = this;
            ctrl.isNull = false;
            ctrl.selectPane = function(pane){
                ctrl.activedPane = pane;
            }
            ctrl.selectTemplate = function (template) {
                ctrl.template = template;
                $scope.$broadcast('updateContentCodeEditors', []);
            };
            ctrl.new = function(){
                ctrl.template.id = 0;
            }
            ctrl.init = async function(){
                if(ctrl.folderType && !ctrl.folderType){
                    var themeId = globalSettingsService.get('themeId');
                    var resp = await service.getSingle(['portal', themeId, ctrl.folderType]);
                    if (resp && resp.isSucceed) {
                        resp.data.fileName = 'new';
                        ctrl.templates.splice(0,0,resp.data);
                        $rootScope.isBusy = false;
                        $scope.$apply();
                    }
                    else {
                        if (resp) { $rootScope.showErrors(resp.errors);$rootScope.isBusy = false;$scope.$apply(); }
                    }
                    
                }
            }
        }],
    bindings: {
        template: '=',
        templates: '=',
        folderType: '='
    }
});


modules.component('urlAlias', {
    templateUrl: '/app/app-portal/components/url-alias/url-alias.html',
    controller: ['$rootScope', '$scope', 'UrlAliasService',
        function ($rootScope, $scope, service) {
            var ctrl = this;
            ctrl.$onInit = function(){
                ctrl.updateUrl();
            }
            ctrl.updateUrl =  function(){
                ctrl.url = $rootScope.globalSettings.domain + '/'
                 + $rootScope.settings.lang + '/'  + ctrl.urlAlias.alias;
            }
            ctrl.remove = function () {
                if (ctrl.urlAlias.id > 0) {
                    $rootScope.showConfirm(ctrl, 'removeConfirmed', [ctrl.urlAlias.id], null, 'Remove', 'Are you sure');
                } else {
                    if (ctrl.removeCallback) {
                        ctrl.removeCallback({ index: ctrl.index });
                    }
                }
            };

            ctrl.removeConfirmed = async function (id) {
                $rootScope.isBusy = true;
                var result = await service.delete(id);
                if (result.isSucceed) {
                    if (ctrl.removeCallback) {
                        ctrl.removeCallback({ index: ctrl.index });
                    }
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
                else {
                    $rootScope.showMessage('failed');
                    $rootScope.isBusy = false;
                    $scope.$apply();
                }
            };

        }],
    bindings: {
        urlAlias: '=',
        index: '=',
        callback: '&',
        removeCallback: '&',
    }
});
modules.component('setAttributeValue', {
    templateUrl: '/app/app-portal/components/set-attribute-value/view.html',
    bindings: {
        title: '=',
        columns: '=',
        properties: '='
    },
    controller: ['$rootScope', '$scope',
        function ($rootScope, $scope) {
            var ctrl = this;
            ctrl.defaultAttr = {
                title: '',
                name: '',
                default: null,
                options: [],
                priority: 0,
                dataType: 7,
                isGroupBy: false,
                isSelect: false,
                isDisplay: true,
                width: 3
            };
            ctrl.selectedProp = null;
            ctrl.settings = $rootScope.globalSettings;

            ctrl.$doCheck = function () {
                if (angular.toJson(ctrl.columns) != angular.toJson(ctrl.trackedColumns)) {
                    ctrl.trackedColumns = angular.copy(ctrl.columns);
                    ctrl.trackedProperties = angular.copy(ctrl.properties);
                    ctrl.loadEditors();
                }
            }.bind(ctrl);

            ctrl.loadEditors = function () {
                ctrl.properties = [];
                for (let i = 0; i < ctrl.columns.length; i++) {
                    var col = ctrl.columns[i];
                    var oldObj = $rootScope.findObjectByKey(ctrl.trackedProperties, 'name', col.name) || {};

                    ctrl.properties.push({
                        title: col.title,
                        name: col.name,
                        dataType: col.dataType,
                        value: oldObj.value || col.defaultValue,
                        options: col.options
                    });

                }
            };

            ctrl.addAttr = function () {
                if (ctrl.columns) {
                    var t = angular.copy(ctrl.defaultAttr);
                    ctrl.columns.push(t);
                }
            };
        }]
});
!function(t){var e={};function i(n){if(e[n])return e[n].exports;var s=e[n]={i:n,l:!1,exports:{}};return t[n].call(s.exports,s,s.exports,i),s.l=!0,s.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)i.d(n,s,function(e){return t[e]}.bind(null,s));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=40)}({40:function(t,e){gapi.analytics.ready(function(){gapi.analytics.createComponent("ActiveUsers",{initialize:function(){this.activeUsers=0,gapi.analytics.auth.once("signOut",this.handleSignOut_.bind(this))},execute:function(){this.polling_&&this.stop(),this.render_(),gapi.analytics.auth.isAuthorized()?this.pollActiveUsers_():gapi.analytics.auth.once("signIn",this.pollActiveUsers_.bind(this))},stop:function(){clearTimeout(this.timeout_),this.polling_=!1,this.emit("stop",{activeUsers:this.activeUsers})},render_:function(){var t=this.get();this.container="string"==typeof t.container?document.getElementById(t.container):t.container,this.container.innerHTML=t.template||this.template,this.container.querySelector("b").innerHTML=this.activeUsers},pollActiveUsers_:function(){var t=this.get(),e=1e3*(t.pollingInterval||5);if(isNaN(e)||e<5e3)throw new Error("Frequency must be 5 seconds or more.");this.polling_=!0,gapi.client.analytics.data.realtime.get({ids:t.ids,metrics:"rt:activeUsers"}).then(function(t){var i=t.result,n=i.totalResults?+i.rows[0][0]:0,s=this.activeUsers;this.emit("success",{activeUsers:this.activeUsers}),n!=s&&(this.activeUsers=n,this.onChange_(n-s)),1==this.polling_&&(this.timeout_=setTimeout(this.pollActiveUsers_.bind(this),e))}.bind(this))},onChange_:function(t){var e=this.container.querySelector("b");e&&(e.innerHTML=this.activeUsers),this.emit("change",{activeUsers:this.activeUsers,delta:t}),t>0?this.emit("increase",{activeUsers:this.activeUsers,delta:t}):this.emit("decrease",{activeUsers:this.activeUsers,delta:t})},handleSignOut_:function(){this.stop(),gapi.analytics.auth.once("signIn",this.handleSignIn_.bind(this))},handleSignIn_:function(){this.pollActiveUsers_(),gapi.analytics.auth.once("signOut",this.handleSignOut_.bind(this))},template:'<div class="ActiveUsers">Active Users: <b class="ActiveUsers-value"></b></div>'})})}});
//# sourceMappingURL=active-users.js.map