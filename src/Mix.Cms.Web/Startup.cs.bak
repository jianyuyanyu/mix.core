using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Identity.UI.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Razor;
using Microsoft.AspNetCore.StaticFiles;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Mix.Cms.Lib.Models.Account;
using Mix.Cms.Lib.Models.Cms;
using Mix.Cms.Lib.Services;
using Mix.Identity.Services;
using Newtonsoft.Json.Serialization;

namespace Mix.Cms.Web
{
    public partial class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
            this.env = env;

        }

        public IConfiguration Configuration { get; }
        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddDbContext<MixCmsContext>();
            services.AddDbContext<MixDbContext>();
            if (!MixService.GetConfig<bool>("IsInit"))
            {
                using (var ctx = new MixCmsContext())
                {
                    ctx.Database.Migrate();
                }
            }
            // Enforce Request using https schema
            if (env.IsDevelopment())
            {
                if (MixService.GetConfig<bool>("IsHttps"))
                {
                    services.AddHttpsRedirection(options =>
                    {
                        options.RedirectStatusCode = StatusCodes.Status308PermanentRedirect;
                        options.HttpsPort = 5001;
                    });
                }
            }
            else
            {
                if (MixService.GetConfig<bool>("IsHttps"))
                {
                    services.AddHttpsRedirection(options =>
                {
                    options.RedirectStatusCode = StatusCodes.Status308PermanentRedirect;
                    options.HttpsPort = 443;
                });
                }
            }

            #region Addictionals Config for Mixcore Cms

            /* Addictional Config for Mixcore Cms  */

            /* Mix: Add db contexts */
            services.AddDbContext<MixCmsContext>();
            services.AddDbContext<MixDbContext>();
            /* Mix: End Add db contexts */

            /* Mix: Inject Services */
            services.AddTransient<IEmailSender, AuthEmailMessageSender>();
            services.AddTransient<ISmsSender, AuthSmsMessageSender>();
            services.AddSingleton<MixService>();
            services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();

            // add signalr
            services.AddSignalR();
            services.AddOData();
            services.AddODataQueryFilter();
            // Config server caching
            services.AddMvc(options =>
            {
                options.CacheProfiles.Add("Default",
                    new CacheProfile()
                    {
                        Duration = 60
                    });
                options.CacheProfiles.Add("Never",
                    new CacheProfile()
                    {
                        Location = ResponseCacheLocation.None,
                        NoStore = true
                    });                
            }).AddJsonOptions(options => options.SerializerSettings.ContractResolver = new Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver())
            .SetCompatibilityVersion(CompatibilityVersion.Version_2_2);
            
            services.Configure<RazorViewEngineOptions>(options => {
                options.AllowRecompilingViewsOnFileChange = true;
            });
            services.AddMemoryCache();

            ConfigAuthorization(services, Configuration);


            /* End Addictional Config for Mixcore Cms  */

            #endregion
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseExceptionHandler("/Home/Error");
                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
                app.UseHsts();
            }
            app.UseStaticFiles();

            app.UseRouting();
            app.UseAuthentication();
            app.UseAuthorization();
            
            #region Addictionals Config for Mixcore Cms
            if (MixService.GetConfig<bool>("IsHttps"))
            {
                app.UseHttpsRedirection();
            }

            var cachePeriod = env.IsDevelopment() ? "600" : "604800";

            FileExtensionContentTypeProvider provider = new FileExtensionContentTypeProvider();
            provider.Mappings[".webmanifest"] = "application/manifest+json";
            app.UseStaticFiles(new StaticFileOptions
            {
                using (var ctx = new MixCmsContext())
                {
                    // Requires the following import:
                    // using Microsoft.AspNetCore.Http;
                    ctx.Context.Response.Headers.Append("Cache-Control", $"public, max-age={cachePeriod}");
                },
                ContentTypeProvider = provider
            });
            app.UseCookiePolicy();
            app.UseSignalR(route =>
            {
                route.MapHub<PortalHub>("/portalhub");

                route.MapHub<ServiceHub>("/servicehub");//route.MapHub<MixChatHub>("/MixChatHub");
            });

            app.UseAuthentication();
            
            ConfigRoutes(app);
        }
    }
}
