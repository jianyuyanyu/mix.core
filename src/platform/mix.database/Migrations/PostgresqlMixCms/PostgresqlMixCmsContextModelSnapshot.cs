// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mix.Database.Entities.v2;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Mix.Database.Migrations.PostgresqlMixCms
{
    [DbContext(typeof(PostgresqlMixCmsContext))]
    partial class PostgresqlMixCmsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MixSiteId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.HasKey("Id")
                        .HasName("PK_MixConfiguration");

                    b.HasIndex("MixSiteId");

                    b.ToTable("MixConfiguration");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixConfigurationContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Content")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DefaultContent")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("MixConfigurationId")
                        .HasColumnType("integer");

                    b.Property<int>("MixCultureId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Specificulture")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.HasKey("Id")
                        .HasName("PK_MixConfigurationContent");

                    b.HasIndex("MixConfigurationId");

                    b.HasIndex("MixCultureId");

                    b.ToTable("MixConfigurationContent");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixCulture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Alias")
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("Icon")
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Lcid")
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<int>("MixSiteId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Specificulture")
                        .HasColumnType("varchar(50)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.HasKey("Id")
                        .HasName("PK_MixCulture");

                    b.HasIndex("MixSiteId");

                    b.ToTable("MixCulture");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MixDatabaseId")
                        .HasColumnType("integer");

                    b.Property<string>("MixDatabaseName")
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.HasKey("Id")
                        .HasName("PK_MixData");

                    b.HasIndex("MixDatabaseId");

                    b.ToTable("MixData");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixDataContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Image")
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Layout")
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<int>("MixCultureId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MixDataContentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MixDataContentId1")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MixDataId")
                        .HasColumnType("uuid");

                    b.Property<int>("MixDatabaseId")
                        .HasColumnType("integer");

                    b.Property<string>("MixDatabaseName")
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PublishedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SeoDescription")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("SeoKeywords")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("SeoName")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("SeoTitle")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("Specificulture")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("Template")
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.HasKey("Id")
                        .HasName("PK_MixDataContent");

                    b.HasIndex("MixCultureId");

                    b.HasIndex("MixDataContentId1");

                    b.HasIndex("MixDataId");

                    b.ToTable("MixDataContent");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixDataContentAssociation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DataContentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GuidParentId")
                        .HasColumnType("uuid");

                    b.Property<int>("IntParentId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MixCultureId")
                        .HasColumnType("integer");

                    b.Property<int>("MixDatabaseId")
                        .HasColumnType("integer");

                    b.Property<string>("MixDatabaseName")
                        .HasColumnType("text");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("ParentType")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Specificulture")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.HasKey("Id")
                        .HasName("PK_MixDataContentAssociation");

                    b.HasIndex("MixCultureId");

                    b.ToTable("MixDataContentAssociation");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixDataContentValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool?>("BooleanValue")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<DateTime?>("DateTimeValue")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("DoubleValue")
                        .HasColumnType("double precision");

                    b.Property<string>("EncryptKey")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("EncryptType")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("EncryptValue")
                        .HasColumnType("text")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<int?>("IntegerValue")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MixCultureId")
                        .HasColumnType("integer");

                    b.Property<Guid>("MixDataContentId")
                        .HasColumnType("uuid");

                    b.Property<int>("MixDatabaseColumnId")
                        .HasColumnType("integer");

                    b.Property<string>("MixDatabaseColumnName")
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("MixDatabaseName")
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Specificulture")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("StringValue")
                        .HasColumnType("text")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.HasKey("Id")
                        .HasName("PK_MixDataContentValue");

                    b.HasIndex("MixCultureId");

                    b.HasIndex("MixDataContentId");

                    b.HasIndex("MixDatabaseColumnId");

                    b.ToTable("MixDataContentValue");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixDatabase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MixSiteId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.HasKey("Id")
                        .HasName("PK_MixDatabase");

                    b.HasIndex("MixSiteId");

                    b.ToTable("MixDatabase");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixDatabaseColumn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Configurations")
                        .HasColumnType("text")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("text")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MixDatabaseId")
                        .HasColumnType("integer");

                    b.Property<string>("MixDatabaseName")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.HasKey("Id")
                        .HasName("PK_MixDatabaseColumn");

                    b.HasIndex("MixDatabaseId");

                    b.ToTable("MixDatabaseColumn");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixDomain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MixSiteId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.HasKey("Id")
                        .HasName("PK_MixDomain");

                    b.HasIndex("MixSiteId");

                    b.ToTable("MixDomain");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MixSiteId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.HasKey("Id")
                        .HasName("PK_MixLanguage");

                    b.HasIndex("MixSiteId");

                    b.ToTable("MixLanguage");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixLanguageContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Content")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DefaultContent")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MixCultureId")
                        .HasColumnType("integer");

                    b.Property<int?>("MixLanguageId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Specificulture")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.HasKey("Id")
                        .HasName("PK_MixLanguageContent");

                    b.HasIndex("MixCultureId");

                    b.HasIndex("MixLanguageId");

                    b.ToTable("MixLanguageContent");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_unicode_ci")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .UseCollation("utf8_unicode_ci")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime");

                    b.Property<int>("MixSiteId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .UseCollation("utf8_unicode_ci")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.HasKey("Id")
                        .HasName("PK_MixModule");

                    b.HasIndex("MixSiteId");

                    b.ToTable("MixModule");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixModuleContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("ClassName")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Image")
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Layout")
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<int>("MixCultureId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MixDataContentId")
                        .HasColumnType("uuid");

                    b.Property<string>("MixDatabaseName")
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<int?>("MixModuleId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("PageSize")
                        .HasColumnType("integer");

                    b.Property<int>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PublishedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SeoDescription")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("SeoKeywords")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("SeoName")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("SeoTitle")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("Specificulture")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("SystemName")
                        .HasColumnType("varchar(250)")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("Template")
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.HasKey("Id")
                        .HasName("PK_MixModuleContent");

                    b.HasIndex("MixCultureId");

                    b.HasIndex("MixDataContentId");

                    b.HasIndex("MixModuleId");

                    b.ToTable("MixModuleContent");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("MixPostContentId")
                        .HasColumnType("integer");

                    b.Property<int>("MixSiteId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.HasKey("Id")
                        .HasName("PK_MixPage");

                    b.HasIndex("MixPostContentId");

                    b.HasIndex("MixSiteId");

                    b.ToTable("MixPage");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixPageContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("ClassName")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Image")
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Layout")
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<int>("MixCultureId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MixDataContentId")
                        .HasColumnType("uuid");

                    b.Property<string>("MixDatabaseName")
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<int?>("MixPageId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("PageSize")
                        .HasColumnType("integer");

                    b.Property<int>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PublishedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SeoDescription")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("SeoKeywords")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("SeoName")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("SeoTitle")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("Specificulture")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("Template")
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.HasKey("Id")
                        .HasName("PK_MixPageContent");

                    b.HasIndex("MixCultureId");

                    b.HasIndex("MixDataContentId");

                    b.HasIndex("MixPageId");

                    b.ToTable("MixPageContent");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MixSiteId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.HasKey("Id")
                        .HasName("PK_MixPost");

                    b.HasIndex("MixSiteId");

                    b.ToTable("MixPost");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixPostContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("ClassName")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Image")
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Layout")
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<int>("MixCultureId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MixDataContentId")
                        .HasColumnType("uuid");

                    b.Property<string>("MixDatabaseName")
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<int?>("MixModuleContentId")
                        .HasColumnType("integer");

                    b.Property<int?>("MixPageContentId")
                        .HasColumnType("integer");

                    b.Property<int?>("MixPostContentId")
                        .HasColumnType("integer");

                    b.Property<int?>("MixPostId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PublishedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SeoDescription")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("SeoKeywords")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("SeoName")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("SeoTitle")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("Specificulture")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("Template")
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.HasKey("Id")
                        .HasName("PK_MixPostContent");

                    b.HasIndex("MixCultureId");

                    b.HasIndex("MixDataContentId");

                    b.HasIndex("MixModuleContentId");

                    b.HasIndex("MixPageContentId");

                    b.HasIndex("MixPostContentId");

                    b.HasIndex("MixPostId");

                    b.ToTable("MixPostContent");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixSite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.HasKey("Id")
                        .HasName("PK_MixSite");

                    b.ToTable("MixSite");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixTheme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("MixDataContentId")
                        .HasColumnType("uuid");

                    b.Property<string>("MixDatabaseName")
                        .HasColumnType("text");

                    b.Property<int>("MixSiteId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PreviewUrl")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.HasKey("Id")
                        .HasName("PK_MixTheme");

                    b.HasIndex("MixDataContentId");

                    b.HasIndex("MixSiteId");

                    b.ToTable("MixTheme");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixUrlAlias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MixSiteId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.HasKey("Id")
                        .HasName("PK_MixUrlAlias");

                    b.HasIndex("MixSiteId");

                    b.ToTable("MixUrlAlias");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixUrlAliasContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MixCultureId")
                        .HasColumnType("integer");

                    b.Property<int?>("MixUrlAliasId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("SourceId")
                        .HasColumnType("varchar(50)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("Specificulture")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("SystemName")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.HasKey("Id")
                        .HasName("PK_MixUrlAliasContent");

                    b.HasIndex("MixCultureId");

                    b.HasIndex("MixUrlAliasId");

                    b.ToTable("MixUrlAliasContent");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixViewTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("FileFolder")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("FolderType")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MixThemeId")
                        .HasColumnType("integer");

                    b.Property<string>("MixThemeName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("MobileContent")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Scripts")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("SpaContent")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("Styles")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.HasKey("Id")
                        .HasName("PK_MixViewTemplate");

                    b.HasIndex("MixThemeId");

                    b.ToTable("MixViewTemplate");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixConfiguration", b =>
                {
                    b.HasOne("Mix.Database.Entities.Cms.v2.MixSite", "MixSite")
                        .WithMany()
                        .HasForeignKey("MixSiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MixSite");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixConfigurationContent", b =>
                {
                    b.HasOne("Mix.Database.Entities.Cms.v2.MixConfiguration", "MixConfiguration")
                        .WithMany("MixConfigurationContents")
                        .HasForeignKey("MixConfigurationId");

                    b.HasOne("Mix.Database.Entities.Cms.v2.MixCulture", "MixCulture")
                        .WithMany()
                        .HasForeignKey("MixCultureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MixConfiguration");

                    b.Navigation("MixCulture");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixCulture", b =>
                {
                    b.HasOne("Mix.Database.Entities.Cms.v2.MixSite", "MixSite")
                        .WithMany()
                        .HasForeignKey("MixSiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MixSite");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixData", b =>
                {
                    b.HasOne("Mix.Database.Entities.Cms.v2.MixDatabase", "MixDatabase")
                        .WithMany()
                        .HasForeignKey("MixDatabaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MixDatabase");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixDataContent", b =>
                {
                    b.HasOne("Mix.Database.Entities.Cms.v2.MixCulture", "MixCulture")
                        .WithMany()
                        .HasForeignKey("MixCultureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mix.Database.Entities.Cms.v2.MixDataContent", "MixDataContent")
                        .WithMany()
                        .HasForeignKey("MixDataContentId1");

                    b.HasOne("Mix.Database.Entities.Cms.v2.MixData", "MixData")
                        .WithMany("MixDataContents")
                        .HasForeignKey("MixDataId");

                    b.Navigation("MixCulture");

                    b.Navigation("MixData");

                    b.Navigation("MixDataContent");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixDataContentAssociation", b =>
                {
                    b.HasOne("Mix.Database.Entities.Cms.v2.MixCulture", "MixCulture")
                        .WithMany()
                        .HasForeignKey("MixCultureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MixCulture");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixDataContentValue", b =>
                {
                    b.HasOne("Mix.Database.Entities.Cms.v2.MixCulture", "MixCulture")
                        .WithMany()
                        .HasForeignKey("MixCultureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mix.Database.Entities.Cms.v2.MixDataContent", "MixDataContent")
                        .WithMany("MixDataContentValues")
                        .HasForeignKey("MixDataContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mix.Database.Entities.Cms.v2.MixDatabaseColumn", "MixDatabaseColumn")
                        .WithMany()
                        .HasForeignKey("MixDatabaseColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MixCulture");

                    b.Navigation("MixDatabaseColumn");

                    b.Navigation("MixDataContent");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixDatabase", b =>
                {
                    b.HasOne("Mix.Database.Entities.Cms.v2.MixSite", "MixSite")
                        .WithMany("MixDatabases")
                        .HasForeignKey("MixSiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MixSite");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixDatabaseColumn", b =>
                {
                    b.HasOne("Mix.Database.Entities.Cms.v2.MixDatabase", "MixDatabase")
                        .WithMany("MixDatabaseColumns")
                        .HasForeignKey("MixDatabaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MixDatabase");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixDomain", b =>
                {
                    b.HasOne("Mix.Database.Entities.Cms.v2.MixSite", "MixSite")
                        .WithMany()
                        .HasForeignKey("MixSiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MixSite");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixLanguage", b =>
                {
                    b.HasOne("Mix.Database.Entities.Cms.v2.MixSite", "MixSite")
                        .WithMany()
                        .HasForeignKey("MixSiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MixSite");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixLanguageContent", b =>
                {
                    b.HasOne("Mix.Database.Entities.Cms.v2.MixCulture", "MixCulture")
                        .WithMany()
                        .HasForeignKey("MixCultureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mix.Database.Entities.Cms.v2.MixLanguage", "MixLanguage")
                        .WithMany("MixLanguageContents")
                        .HasForeignKey("MixLanguageId");

                    b.Navigation("MixCulture");

                    b.Navigation("MixLanguage");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixModule", b =>
                {
                    b.HasOne("Mix.Database.Entities.Cms.v2.MixSite", "MixSite")
                        .WithMany("MixModules")
                        .HasForeignKey("MixSiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MixSite");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixModuleContent", b =>
                {
                    b.HasOne("Mix.Database.Entities.Cms.v2.MixCulture", "MixCulture")
                        .WithMany()
                        .HasForeignKey("MixCultureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mix.Database.Entities.Cms.v2.MixDataContent", "MixDataContent")
                        .WithMany()
                        .HasForeignKey("MixDataContentId");

                    b.HasOne("Mix.Database.Entities.Cms.v2.MixModule", "MixModule")
                        .WithMany("MixModuleContents")
                        .HasForeignKey("MixModuleId");

                    b.Navigation("MixCulture");

                    b.Navigation("MixDataContent");

                    b.Navigation("MixModule");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixPage", b =>
                {
                    b.HasOne("Mix.Database.Entities.Cms.v2.MixPostContent", null)
                        .WithMany("MixPages")
                        .HasForeignKey("MixPostContentId");

                    b.HasOne("Mix.Database.Entities.Cms.v2.MixSite", "MixSite")
                        .WithMany("MixPages")
                        .HasForeignKey("MixSiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MixSite");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixPageContent", b =>
                {
                    b.HasOne("Mix.Database.Entities.Cms.v2.MixCulture", "MixCulture")
                        .WithMany()
                        .HasForeignKey("MixCultureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mix.Database.Entities.Cms.v2.MixDataContent", "MixDataContent")
                        .WithMany()
                        .HasForeignKey("MixDataContentId");

                    b.HasOne("Mix.Database.Entities.Cms.v2.MixPage", "MixPage")
                        .WithMany("MixPageContents")
                        .HasForeignKey("MixPageId");

                    b.Navigation("MixCulture");

                    b.Navigation("MixDataContent");

                    b.Navigation("MixPage");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixPost", b =>
                {
                    b.HasOne("Mix.Database.Entities.Cms.v2.MixSite", "MixSite")
                        .WithMany("MixPosts")
                        .HasForeignKey("MixSiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MixSite");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixPostContent", b =>
                {
                    b.HasOne("Mix.Database.Entities.Cms.v2.MixCulture", "MixCulture")
                        .WithMany()
                        .HasForeignKey("MixCultureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mix.Database.Entities.Cms.v2.MixDataContent", "MixDataContent")
                        .WithMany()
                        .HasForeignKey("MixDataContentId");

                    b.HasOne("Mix.Database.Entities.Cms.v2.MixModuleContent", null)
                        .WithMany("MixPostContents")
                        .HasForeignKey("MixModuleContentId");

                    b.HasOne("Mix.Database.Entities.Cms.v2.MixPageContent", null)
                        .WithMany("MixPostContents")
                        .HasForeignKey("MixPageContentId");

                    b.HasOne("Mix.Database.Entities.Cms.v2.MixPostContent", null)
                        .WithMany("MixPostContents")
                        .HasForeignKey("MixPostContentId");

                    b.HasOne("Mix.Database.Entities.Cms.v2.MixPost", "MixPost")
                        .WithMany("MixPostContents")
                        .HasForeignKey("MixPostId");

                    b.Navigation("MixCulture");

                    b.Navigation("MixDataContent");

                    b.Navigation("MixPost");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixTheme", b =>
                {
                    b.HasOne("Mix.Database.Entities.Cms.v2.MixDataContent", "MixDataContent")
                        .WithMany()
                        .HasForeignKey("MixDataContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mix.Database.Entities.Cms.v2.MixSite", "MixSite")
                        .WithMany()
                        .HasForeignKey("MixSiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MixDataContent");

                    b.Navigation("MixSite");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixUrlAlias", b =>
                {
                    b.HasOne("Mix.Database.Entities.Cms.v2.MixSite", "MixSite")
                        .WithMany()
                        .HasForeignKey("MixSiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MixSite");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixUrlAliasContent", b =>
                {
                    b.HasOne("Mix.Database.Entities.Cms.v2.MixCulture", "MixCulture")
                        .WithMany()
                        .HasForeignKey("MixCultureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mix.Database.Entities.Cms.v2.MixUrlAlias", "MixUrlAlias")
                        .WithMany()
                        .HasForeignKey("MixUrlAliasId");

                    b.Navigation("MixCulture");

                    b.Navigation("MixUrlAlias");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixViewTemplate", b =>
                {
                    b.HasOne("Mix.Database.Entities.Cms.v2.MixTheme", "MixTheme")
                        .WithMany("MixViewTemplates")
                        .HasForeignKey("MixThemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MixTheme");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixConfiguration", b =>
                {
                    b.Navigation("MixConfigurationContents");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixData", b =>
                {
                    b.Navigation("MixDataContents");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixDataContent", b =>
                {
                    b.Navigation("MixDataContentValues");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixDatabase", b =>
                {
                    b.Navigation("MixDatabaseColumns");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixLanguage", b =>
                {
                    b.Navigation("MixLanguageContents");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixModule", b =>
                {
                    b.Navigation("MixModuleContents");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixModuleContent", b =>
                {
                    b.Navigation("MixPostContents");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixPage", b =>
                {
                    b.Navigation("MixPageContents");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixPageContent", b =>
                {
                    b.Navigation("MixPostContents");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixPost", b =>
                {
                    b.Navigation("MixPostContents");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixPostContent", b =>
                {
                    b.Navigation("MixPages");

                    b.Navigation("MixPostContents");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixSite", b =>
                {
                    b.Navigation("MixDatabases");

                    b.Navigation("MixModules");

                    b.Navigation("MixPages");

                    b.Navigation("MixPosts");
                });

            modelBuilder.Entity("Mix.Database.Entities.Cms.v2.MixTheme", b =>
                {
                    b.Navigation("MixViewTemplates");
                });
#pragma warning restore 612, 618
        }
    }
}
