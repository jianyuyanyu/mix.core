// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mix.Database.Entities.Account;

#nullable disable

namespace Mix.Database.Migrations.SqlServerAccount
{
    [DbContext(typeof(SqlServerAccountContext))]
    [Migration("20231122101111_AddOAuth")]
    partial class AddOAuth
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Mix.Database.Entities.Account.AspNetRoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("varchar(250)")
                        .UseCollation("Vietnamese_CI_AS")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("varchar(250)")
                        .UseCollation("Vietnamese_CI_AS")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<Guid?>("MixRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.HasKey("Id");

                    b.HasIndex("MixRoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Mix.Database.Entities.Account.AspNetUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("varchar(250)")
                        .UseCollation("Vietnamese_CI_AS")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("varchar(250)")
                        .UseCollation("Vietnamese_CI_AS")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<Guid?>("MixUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MixUserId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.HasKey("Id");

                    b.HasIndex("MixUserId");

                    b.HasIndex("MixUserId1");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Mix.Database.Entities.Account.AspNetUserLogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(50)")
                        .UseCollation("Vietnamese_CI_AS")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(50)")
                        .UseCollation("Vietnamese_CI_AS")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<Guid?>("MixUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MixUserId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("varchar(250)")
                        .UseCollation("Vietnamese_CI_AS")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("PK_AspNetUserLogins_1");

                    b.HasIndex("MixUserId");

                    b.HasIndex("MixUserId1");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Mix.Database.Entities.Account.AspNetUserRoles", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<int>("MixTenantId")
                        .HasColumnType("int");

                    b.Property<Guid?>("MixRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MixUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MixUserId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId", "MixTenantId");

                    b.HasIndex("MixRoleId");

                    b.HasIndex("MixUserId");

                    b.HasIndex("MixUserId1");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Mix.Database.Entities.Account.AspNetUserTokens", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(50)")
                        .UseCollation("Vietnamese_CI_AS")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)")
                        .UseCollation("Vietnamese_CI_AS")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<Guid?>("MixUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("Vietnamese_CI_AS")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.HasIndex("MixUserId");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Mix.Database.Entities.Account.MixRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("varchar(250)")
                        .UseCollation("Vietnamese_CI_AS")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(250)")
                        .UseCollation("Vietnamese_CI_AS")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(250)")
                        .UseCollation("Vietnamese_CI_AS")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.HasKey("Id");

                    b.ToTable("MixRoles");
                });

            modelBuilder.Entity("Mix.Database.Entities.Account.MixUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("varchar(250)")
                        .UseCollation("Vietnamese_CI_AS")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(250)")
                        .UseCollation("Vietnamese_CI_AS")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActived")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("varchar(250)")
                        .UseCollation("Vietnamese_CI_AS")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(250)")
                        .UseCollation("Vietnamese_CI_AS")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(250)")
                        .UseCollation("Vietnamese_CI_AS")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("varchar(250)")
                        .UseCollation("Vietnamese_CI_AS")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(50)")
                        .UseCollation("Vietnamese_CI_AS")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RegisterType")
                        .HasColumnType("varchar(50)")
                        .UseCollation("Vietnamese_CI_AS")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("varchar(50)")
                        .UseCollation("Vietnamese_CI_AS")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(250)")
                        .UseCollation("Vietnamese_CI_AS")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("(NormalizedUserName IS NOT NULL)");

                    b.ToTable("MixUsers");
                });

            modelBuilder.Entity("Mix.Database.Entities.Account.MixUserTenant", b =>
                {
                    b.Property<Guid>("MixUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("MixUserId", "TenantId");

                    b.HasIndex("MixUserId");

                    b.HasIndex("TenantId");

                    b.ToTable("MixUserTenants");
                });

            modelBuilder.Entity("Mix.Database.Entities.Account.OAuthClient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(50)")
                        .UseCollation("Vietnamese_CI_AS")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AllowedOrigin")
                        .HasColumnType("varchar(250)")
                        .UseCollation("Vietnamese_CI_AS")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<int>("ApplicationType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .UseCollation("Vietnamese_CI_AS")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<int>("RefreshTokenLifeTime")
                        .HasColumnType("int");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .UseCollation("Vietnamese_CI_AS")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.HasKey("Id");

                    b.ToTable("OAuthClient");
                });

            modelBuilder.Entity("Mix.Database.Entities.Account.OAuthToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("ClientId")
                        .HasColumnType("varchar(50)")
                        .UseCollation("Vietnamese_CI_AS")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReferenceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Revoked")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TokenType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TokenTypeHint")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OAuthToken");
                });

            modelBuilder.Entity("Mix.Database.Entities.Account.RefreshTokens", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .UseCollation("Vietnamese_CI_AS")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(250)")
                        .UseCollation("Vietnamese_CI_AS")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<DateTime>("ExpiresUtc")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("IssuedUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Username")
                        .HasColumnType("varchar(250)")
                        .UseCollation("Vietnamese_CI_AS")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.HasKey("Id");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Mix.Database.Entities.Account.AspNetRoleClaims", b =>
                {
                    b.HasOne("Mix.Database.Entities.Account.MixRole", null)
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("MixRoleId");
                });

            modelBuilder.Entity("Mix.Database.Entities.Account.AspNetUserClaims", b =>
                {
                    b.HasOne("Mix.Database.Entities.Account.MixUser", null)
                        .WithMany("AspNetUserClaimsUser")
                        .HasForeignKey("MixUserId");

                    b.HasOne("Mix.Database.Entities.Account.MixUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("MixUserId1");
                });

            modelBuilder.Entity("Mix.Database.Entities.Account.AspNetUserLogins", b =>
                {
                    b.HasOne("Mix.Database.Entities.Account.MixUser", null)
                        .WithMany("AspNetUserLoginsApplicationUser")
                        .HasForeignKey("MixUserId");

                    b.HasOne("Mix.Database.Entities.Account.MixUser", null)
                        .WithMany("AspNetUserLoginsUser")
                        .HasForeignKey("MixUserId1");
                });

            modelBuilder.Entity("Mix.Database.Entities.Account.AspNetUserRoles", b =>
                {
                    b.HasOne("Mix.Database.Entities.Account.MixRole", null)
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("MixRoleId");

                    b.HasOne("Mix.Database.Entities.Account.MixUser", null)
                        .WithMany("AspNetUserRolesApplicationUser")
                        .HasForeignKey("MixUserId");

                    b.HasOne("Mix.Database.Entities.Account.MixUser", null)
                        .WithMany("AspNetUserRolesUser")
                        .HasForeignKey("MixUserId1");
                });

            modelBuilder.Entity("Mix.Database.Entities.Account.AspNetUserTokens", b =>
                {
                    b.HasOne("Mix.Database.Entities.Account.MixUser", null)
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("MixUserId");
                });

            modelBuilder.Entity("Mix.Database.Entities.Account.MixRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");

                    b.Navigation("AspNetUserRoles");
                });

            modelBuilder.Entity("Mix.Database.Entities.Account.MixUser", b =>
                {
                    b.Navigation("AspNetUserClaimsUser");

                    b.Navigation("AspNetUserLoginsApplicationUser");

                    b.Navigation("AspNetUserLoginsUser");

                    b.Navigation("AspNetUserRolesApplicationUser");

                    b.Navigation("AspNetUserRolesUser");

                    b.Navigation("AspNetUserTokens");

                    b.Navigation("Claims");
                });
#pragma warning restore 612, 618
        }
    }
}
