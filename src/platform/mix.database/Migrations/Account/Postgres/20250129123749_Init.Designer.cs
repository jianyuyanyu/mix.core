// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mix.Database.Entities.Account;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Mix.Database.Migrations.Account.Postgres
{
    [DbContext(typeof(PostgresSqlAccountContext))]
    [Migration("20250129123749_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Mix.Database.Entities.Account.AspNetRoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("claim_type")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("claim_value")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("role_id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.HasKey("Id");

                    b.ToTable("asp_net_role_claims", (string)null);
                });

            modelBuilder.Entity("Mix.Database.Entities.Account.AspNetUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("claim_type")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("claim_value")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<Guid>("MixUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("mix_user_id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.HasKey("Id");

                    b.HasIndex("MixUserId");

                    b.HasIndex("UserId");

                    b.ToTable("asp_net_user_claims", (string)null);
                });

            modelBuilder.Entity("Mix.Database.Entities.Account.AspNetUserLogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("login_provider")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("provider_key")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("provider_display_name")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("PK_AspNetUserLogins_1");

                    b.HasIndex("UserId");

                    b.ToTable("asp_net_user_login", (string)null);
                });

            modelBuilder.Entity("Mix.Database.Entities.Account.AspNetUserRoles", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("role_id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("TenantId")
                        .HasColumnType("int")
                        .HasColumnName("tenant_id");

                    b.HasKey("UserId", "RoleId", "TenantId");

                    b.HasIndex("RoleId");

                    b.ToTable("asp_net_user_roles", (string)null);
                });

            modelBuilder.Entity("Mix.Database.Entities.Account.AspNetUserTokens", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("login_provider")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("Value")
                        .HasColumnType("varchar(4000)")
                        .HasColumnName("value")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("asp_net_user_tokens", (string)null);
                });

            modelBuilder.Entity("Mix.Database.Entities.Account.MixRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("concurrency_stamp")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("name")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("normalized_name")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.HasKey("Id");

                    b.ToTable("mix_roles", (string)null);
                });

            modelBuilder.Entity("Mix.Database.Entities.Account.MixUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("concurrency_stamp")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date_time");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("email")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("modified_by")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("normalized_email")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("normalized_user_name")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("password_hash")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("phone_number")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("RegisterType")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("register_type")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("security_stamp")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("user_name")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("email_index");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("user_name_index")
                        .HasFilter("(\"normalized_user_name\" IS NOT NULL)");

                    b.ToTable("mix_users", (string)null);
                });

            modelBuilder.Entity("Mix.Database.Entities.Account.MixUserTenant", b =>
                {
                    b.Property<Guid>("MixUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("mix_user_id");

                    b.Property<int>("TenantId")
                        .HasColumnType("int")
                        .HasColumnName("tenant_id");

                    b.HasKey("MixUserId", "TenantId");

                    b.HasIndex("MixUserId");

                    b.HasIndex("TenantId");

                    b.ToTable("mix_user_tenant", (string)null);
                });

            modelBuilder.Entity("Mix.Database.Entities.Account.OAuthClient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("AllowedOrigins")
                        .HasColumnType("varchar(4000)")
                        .HasColumnName("allowed_origins")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("AllowedProtectedResources")
                        .HasColumnType("varchar(4000)")
                        .HasColumnName("allowed_protected_resources")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("AllowedScopes")
                        .HasColumnType("varchar(4000)")
                        .HasColumnName("allowed_scopes")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("ApplicationType")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("application_type")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("ClientUri")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("client_uri")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date_time");

                    b.Property<string>("GrantTypes")
                        .HasColumnType("text")
                        .HasColumnName("grant_types");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasColumnName("name")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("priority");

                    b.Property<string>("RedirectUris")
                        .HasColumnType("varchar(4000)")
                        .HasColumnName("redirect_uris")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<int>("RefreshTokenLifeTime")
                        .HasColumnType("integer")
                        .HasColumnName("refresh_token_life_time");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("secret")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<bool>("UsePkce")
                        .HasColumnType("boolean")
                        .HasColumnName("use_pkce");

                    b.HasKey("Id")
                        .HasName("pk_o_auth_client");

                    b.ToTable("o_auth_client", (string)null);
                });

            modelBuilder.Entity("Mix.Database.Entities.Account.OAuthToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("ClientId")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("client_id")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date_time");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("modified_by");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("priority");

                    b.Property<string>("ReferenceId")
                        .HasColumnType("text")
                        .HasColumnName("reference_id");

                    b.Property<bool>("Revoked")
                        .HasColumnType("boolean")
                        .HasColumnName("revoked");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("SubjectId")
                        .HasColumnType("text")
                        .HasColumnName("subject_id");

                    b.Property<string>("Token")
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.Property<string>("TokenStatus")
                        .HasColumnType("text")
                        .HasColumnName("token_status");

                    b.Property<string>("TokenType")
                        .HasColumnType("text")
                        .HasColumnName("token_type");

                    b.Property<string>("TokenTypeHint")
                        .HasColumnType("text")
                        .HasColumnName("token_type_hint");

                    b.HasKey("Id")
                        .HasName("pk_o_auth_token");

                    b.ToTable("o_auth_token", (string)null);
                });

            modelBuilder.Entity("Mix.Database.Entities.Account.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date_time");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("Group")
                        .HasColumnType("text")
                        .HasColumnName("group");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Key")
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenant_id");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("modified_by");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("priority");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.HasKey("Id")
                        .HasName("pk_permission");

                    b.ToTable("permission", (string)null);
                });

            modelBuilder.Entity("Mix.Database.Entities.Account.RefreshTokens", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("client_id")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("email")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<DateTime>("ExpiresUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expired_utc");

                    b.Property<DateTime>("IssuedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("issued_utc");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("user_name")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.HasKey("Id");

                    b.ToTable("refresh_tokens", (string)null);
                });

            modelBuilder.Entity("Mix.Database.Entities.Account.SysMixDatabaseAssociation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ChildDatabaseName")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("child_database_name")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<int>("ChildId")
                        .HasColumnType("integer")
                        .HasColumnName("child_id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date_time");

                    b.Property<Guid?>("GuidChildId")
                        .HasColumnType("uuid")
                        .HasColumnName("guid_child_id");

                    b.Property<Guid?>("GuidParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("guid_parent_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenant_id");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("modified_by");

                    b.Property<string>("ParentDatabaseName")
                        .HasColumnType("varchar(250)")
                        .HasColumnName("parent_database_name")
                        .UseCollation("und-x-icu")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.Property<int>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("priority");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status")
                        .HasAnnotation("MySql:CharSet", "utf8");

                    b.HasKey("Id")
                        .HasName("pk_sys_mix_database_association");

                    b.ToTable("sys_mix_database_association", (string)null);
                });

            modelBuilder.Entity("Mix.Database.Entities.Account.AspNetUserClaims", b =>
                {
                    b.HasOne("Mix.Database.Entities.Account.MixUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("MixUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mix.Database.Entities.Account.MixUser", b =>
                {
                    b.Navigation("Claims");
                });
#pragma warning restore 612, 618
        }
    }
}
