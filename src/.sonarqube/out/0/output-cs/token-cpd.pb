Ûç
RC:\_workspace\github\mixcore\mix.heart\src\Mix.Heart\Common\Helper\CommonHelper.cs
	namespace 	
Mix
 
. 
Common 
. 
Helper 
{ 
public 

static 
class 
CommonHelper $
{ 
private 
static 
readonly 
char  $
[$ %
]% &
Base62Chars' 2
=3 4
$str L
. 
ToCharArray 
( 
) 
; 
private 
static 
readonly 
Random  &
Random' -
=. /
new0 3
Random4 :
(: ;
); <
;< =
public$$ 
static$$ 
RSAParameters$$ #
GenerateKey$$$ /
($$/ 0
)$$0 1
{%% 	
using&& 
(&& 
var&& 
key&& 
=&& 
new&&  $
RSACryptoServiceProvider&&! 9
(&&9 :
$num&&: >
)&&> ?
)&&? @
{'' 
return(( 
key(( 
.(( 
ExportParameters(( +
(((+ ,
true((, 0
)((0 1
;((1 2
})) 
}** 	
public11 
static11 
string11 
	GetBase6211 &
(11& '
int11' *
length11+ 1
)111 2
{22 	
var33 
sb33 
=33 
new33 
StringBuilder33 &
(33& '
length33' -
)33- .
;33. /
for55 
(55 
int55 
i55 
=55 
$num55 
;55 
i55 
<55 
length55  &
;55& '
i55( )
++55) +
)55+ ,
{66 
sb77 
.77 
Append77 
(77 
Base62Chars77 %
[77% &
Random77& ,
.77, -
Next77- 1
(771 2
$num772 4
)774 5
]775 6
)776 7
;777 8
}88 
return:: 
sb:: 
.:: 
ToString:: 
(:: 
)::  
;::  !
};; 	
publicBB 
staticBB 
stringBB 
GetFullPathBB (
(BB( )
stringBB) /
[BB/ 0
]BB0 1
subPathsBB2 :
)BB: ;
{CC 	
stringDD 
	strFormatDD 
=DD 
stringDD %
.DD% &
EmptyDD& +
;DD+ ,
forEE 
(EE 
intEE 
iEE 
=EE 
$numEE 
;EE 
iEE 
<EE 
subPathsEE  (
.EE( )
LengthEE) /
;EE/ 0
iEE1 2
++EE2 4
)EE4 5
{FF 
	strFormatHH 
+=HH 
$strHH !
+HH" #
iHH$ %
+HH& '
$strHH( +
+HH, -
(HH. /
iHH/ 0
<HH1 2
subPathsHH3 ;
.HH; <
LengthHH< B
-HHC D
$numHHE F
?HHG H
$strHHI L
:HHM N
stringHHO U
.HHU V
EmptyHHV [
)HH[ \
;HH\ ]
}II 
returnJJ 
stringJJ 
.JJ 
FormatJJ  
(JJ  !
	strFormatJJ! *
,JJ* +
subPathsJJ, 4
)JJ4 5
.JJ5 6
ReplaceJJ6 =
(JJ= >
$strJJ> B
,JJB C
$strJJD G
)JJG H
;JJH I
}KK 	
publicRR 
staticRR 
stringRR 
GetRandomNameRR *
(RR* +
stringRR+ 1
filenameRR2 :
)RR: ;
{SS 	
stringTT 
extTT 
=TT 
filenameTT !
.TT! "
SplitTT" '
(TT' (
$charTT( +
)TT+ ,
[TT, -
$numTT- .
]TT. /
;TT/ 0
returnUU 
stringUU 
.UU 
FormatUU  
(UU  !
$strUU! *
,UU* +
GuidUU, 0
.UU0 1
NewGuidUU1 8
(UU8 9
)UU9 :
.UU: ;
ToStringUU; C
(UUC D
$strUUD G
)UUG H
,UUH I
extUUJ M
)UUM N
;UUN O
}VV 	
public]] 
static]] 
async]] 
System]] "
.]]" #
	Threading]]# ,
.]], -
Tasks]]- 2
.]]2 3
Task]]3 7
<]]7 8
string]]8 >
>]]> ?
GetWebResponseAsync]]@ S
(]]S T
string]]T Z
url]][ ^
)]]^ _
{^^ 	
HttpWebRequest__ 

webRequest__ %
=__& '
(__( )
HttpWebRequest__) 7
)__7 8

WebRequest__8 B
.__B C
Create__C I
(__I J
url__J M
)__M N
;__N O
using`` 
(`` 
WebResponse`` 
response`` '
=``( )
await``* /

webRequest``0 :
.``: ;
GetResponseAsync``; K
(``K L
)``L M
.``M N
ConfigureAwait``N \
(``\ ]
false``] b
)``b c
)``c d
{aa 
usingbb 
(bb 
Streambb 
	resStreambb '
=bb( )
responsebb* 2
.bb2 3
GetResponseStreambb3 D
(bbD E
)bbE F
)bbF G
{cc 
StreamReaderdd  
readerdd! '
=dd( )
newdd* -
StreamReaderdd. :
(dd: ;
	resStreamdd; D
,ddD E
EncodingddF N
.ddN O
UTF8ddO S
)ddS T
;ddT U
returnee 
readeree !
.ee! "
	ReadToEndee" +
(ee+ ,
)ee, -
;ee- .
}ff 
}gg 
}hh 	
publicoo 
staticoo 
Streamoo 
	LoadImageoo &
(oo& '
stringoo' -

strImage64oo. 8
)oo8 9
{pp 	
tryss 
{tt 
stringuu 
imgDatauu 
=uu  

strImage64uu! +
.uu+ ,
	Substringuu, 5
(uu5 6

strImage64uu6 @
.uu@ A
IndexOfuuA H
(uuH I
$charuuI L
)uuL M
+uuN O
$numuuP Q
)uuQ R
;uuR S
bytevv 
[vv 
]vv 

imageBytesvv !
=vv" #
Convertvv$ +
.vv+ ,
FromBase64Stringvv, <
(vv< =
imgDatavv= D
)vvD E
;vvE F
returnww 
newww 
MemoryStreamww '
(ww' (

imageBytesww( 2
,ww2 3
$numww4 5
,ww5 6

imageBytesww7 A
.wwA B
LengthwwB H
)wwH I
;wwI J
}xx 
catchyy 
{zz 
return{{ 
null{{ 
;{{ 
}|| 
}}} 	
public
ÑÑ 
static
ÑÑ 
string
ÑÑ #
ParseJsonPropertyName
ÑÑ 2
(
ÑÑ2 3
string
ÑÑ3 9
input
ÑÑ: ?
)
ÑÑ? @
{
ÖÖ 	
if
ÜÜ 
(
ÜÜ 
!
ÜÜ 
string
ÜÜ 
.
ÜÜ 
IsNullOrEmpty
ÜÜ %
(
ÜÜ% &
input
ÜÜ& +
)
ÜÜ+ ,
)
ÜÜ, -
{
áá 
return
àà 
Char
àà 
.
àà 
ToLower
àà #
(
àà# $
input
àà$ )
[
àà) *
$num
àà* +
]
àà+ ,
)
àà, -
+
àà. /
input
àà0 5
.
àà5 6
	Substring
àà6 ?
(
àà? @
$num
àà@ A
)
ààA B
;
ààB C
}
ââ 
else
ää 
{
ãã 
return
åå 
string
åå 
.
åå 
Empty
åå #
;
åå# $
}
çç 
}
éé 	
public
ïï 
static
ïï 
string
ïï 
ReadFromFile
ïï )
(
ïï) *
string
ïï* 0
filename
ïï1 9
)
ïï9 :
{
ññ 	
string
óó 
s
óó 
=
óó 
$str
óó 
;
óó 
try
òò 
{
ôô 

FileStream
öö 
file
öö 
=
öö  !
new
öö" %

FileStream
öö& 0
(
öö0 1
filename
öö1 9
,
öö9 :
FileMode
öö; C
.
ööC D
Open
ööD H
,
ööH I

FileAccess
ööJ T
.
ööT U
Read
ööU Y
)
ööY Z
;
ööZ [
StreamReader
õõ 
sr
õõ 
=
õõ  !
new
õõ" %
StreamReader
õõ& 2
(
õõ2 3
file
õõ3 7
)
õõ7 8
;
õõ8 9
s
úú 
=
úú 
sr
úú 
.
úú 
	ReadToEnd
úú  
(
úú  !
)
úú! "
;
úú" #
sr
ùù 
.
ùù 
Dispose
ùù 
(
ùù 
)
ùù 
;
ùù 
file
ûû 
.
ûû 
Dispose
ûû 
(
ûû 
)
ûû 
;
ûû 
}
üü 
catch
†† 
{
°° 
s
¢¢ 
=
¢¢ 
$str
¢¢ 
;
¢¢ 
}
££ 
return
§§ 
s
§§ 
;
§§ 
}
•• 	
public
¨¨ 
static
¨¨ 
bool
¨¨ 

RemoveFile
¨¨ %
(
¨¨% &
string
¨¨& ,
filePath
¨¨- 5
)
¨¨5 6
{
≠≠ 	
bool
ÆÆ 
result
ÆÆ 
=
ÆÆ 
false
ÆÆ 
;
ÆÆ  
if
ØØ 
(
ØØ 
File
ØØ 
.
ØØ 
Exists
ØØ 
(
ØØ 
filePath
ØØ $
)
ØØ$ %
)
ØØ% &
{
∞∞ 
File
±± 
.
±± 
Delete
±± 
(
±± 
filePath
±± $
)
±±$ %
;
±±% &
result
≤≤ 
=
≤≤ 
true
≤≤ 
;
≤≤ 
}
≥≥ 
return
¥¥ 
result
¥¥ 
;
¥¥ 
}
µµ 	
public
ææ 
static
ææ 
bool
ææ 
SaveFileBase64
ææ )
(
ææ) *
string
ææ* 0
folder
ææ1 7
,
ææ7 8
string
ææ9 ?
filename
ææ@ H
,
ææH I
string
ææJ P
	strBase64
ææQ Z
)
ææZ [
{
øø 	
try
¬¬ 
{
√√ 
string
ƒƒ 
fullPath
ƒƒ 
=
ƒƒ  !
GetFullPath
ƒƒ" -
(
ƒƒ- .
new
ƒƒ. 1
string
ƒƒ2 8
[
ƒƒ8 9
]
ƒƒ9 :
{
≈≈ 
folder
∆∆ 
,
∆∆ 
filename
«« 
}
»» 
)
»» 
;
»» 
string
…… 
fileData
…… 
=
……  !
	strBase64
……" +
.
……+ ,
	Substring
……, 5
(
……5 6
	strBase64
……6 ?
.
……? @
IndexOf
……@ G
(
……G H
$char
……H K
)
……K L
+
……M N
$num
……O P
)
……P Q
;
……Q R
byte
   
[
   
]
   
bytes
   
=
   
Convert
   &
.
  & '
FromBase64String
  ' 7
(
  7 8
fileData
  8 @
)
  @ A
;
  A B
if
ÃÃ 
(
ÃÃ 
!
ÃÃ 
	Directory
ÃÃ 
.
ÃÃ 
Exists
ÃÃ %
(
ÃÃ% &
folder
ÃÃ& ,
)
ÃÃ, -
)
ÃÃ- .
{
ÕÕ 
	Directory
ŒŒ 
.
ŒŒ 
CreateDirectory
ŒŒ -
(
ŒŒ- .
folder
ŒŒ. 4
)
ŒŒ4 5
;
ŒŒ5 6
}
œœ 
if
—— 
(
—— 
File
—— 
.
—— 
Exists
—— 
(
——  
fullPath
——  (
)
——( )
)
——) *
{
““ 
File
”” 
.
”” 
Delete
”” 
(
””  
fullPath
””  (
)
””( )
;
””) *
}
‘‘ 

FileStream
÷÷ 
fs
÷÷ 
=
÷÷ 
new
÷÷  #

FileStream
÷÷$ .
(
÷÷. /
fullPath
÷÷/ 7
,
÷÷7 8
FileMode
÷÷9 A
.
÷÷A B
Create
÷÷B H
)
÷÷H I
;
÷÷I J
BinaryWriter
◊◊ 
w
◊◊ 
=
◊◊  
new
◊◊! $
BinaryWriter
◊◊% 1
(
◊◊1 2
fs
◊◊2 4
)
◊◊4 5
;
◊◊5 6
try
ÿÿ 
{
ŸŸ 
w
⁄⁄ 
.
⁄⁄ 
Write
⁄⁄ 
(
⁄⁄ 
bytes
⁄⁄ !
)
⁄⁄! "
;
⁄⁄" #
}
€€ 
finally
‹‹ 
{
›› 
fs
ﬁﬁ 
.
ﬁﬁ 
Close
ﬁﬁ 
(
ﬁﬁ 
)
ﬁﬁ 
;
ﬁﬁ 
w
ﬂﬂ 
.
ﬂﬂ 
Close
ﬂﬂ 
(
ﬂﬂ 
)
ﬂﬂ 
;
ﬂﬂ 
}
‡‡ 
return
·· 
true
·· 
;
·· 
}
‚‚ 
catch
„„ 
{
‰‰ 
return
ÂÂ 
false
ÂÂ 
;
ÂÂ 
}
ÊÊ 
}
ÁÁ 	
public
ÔÔ 
static
ÔÔ 
async
ÔÔ 
System
ÔÔ "
.
ÔÔ" #
	Threading
ÔÔ# ,
.
ÔÔ, -
Tasks
ÔÔ- 2
.
ÔÔ2 3
Task
ÔÔ3 7
<
ÔÔ7 8
string
ÔÔ8 >
>
ÔÔ> ?
UploadFileAsync
ÔÔ@ O
(
ÔÔO P
string
ÔÔP V
fullPath
ÔÔW _
,
ÔÔ_ `
	IFormFile
ÔÔa j
file
ÔÔk o
)
ÔÔo p
{
 	
try
ÒÒ 
{
ÚÚ 
if
ÛÛ 
(
ÛÛ 
!
ÛÛ 
	Directory
ÛÛ 
.
ÛÛ 
Exists
ÛÛ %
(
ÛÛ% &
fullPath
ÛÛ& .
)
ÛÛ. /
)
ÛÛ/ 0
{
ÙÙ 
	Directory
ıı 
.
ıı 
CreateDirectory
ıı -
(
ıı- .
fullPath
ıı. 6
)
ıı6 7
;
ıı7 8
}
ˆˆ 
if
¯¯ 
(
¯¯ 
file
¯¯ 
!=
¯¯ 
null
¯¯  
)
¯¯  !
{
˘˘ 
string
¸¸ 
fileName
¸¸ #
=
¸¸$ %
string
¸¸& ,
.
¸¸, -
Format
¸¸- 3
(
¸¸3 4
$str
¸¸4 =
,
¸¸= >
Guid
˝˝ 
.
˝˝ 
NewGuid
˝˝ $
(
˝˝$ %
)
˝˝% &
.
˝˝& '
ToString
˝˝' /
(
˝˝/ 0
$str
˝˝0 3
)
˝˝3 4
,
˝˝4 5
file
˛˛ 
.
˛˛ 
FileName
˛˛ %
.
˛˛% &
Split
˛˛& +
(
˛˛+ ,
$char
˛˛, /
)
˛˛/ 0
.
˛˛0 1
Last
˛˛1 5
(
˛˛5 6
)
˛˛6 7
)
˛˛7 8
;
˛˛8 9
using
ˇˇ 
(
ˇˇ 
var
ˇˇ 

fileStream
ˇˇ )
=
ˇˇ* +
new
ˇˇ, /

FileStream
ˇˇ0 :
(
ˇˇ: ;
Path
ˇˇ; ?
.
ˇˇ? @
Combine
ˇˇ@ G
(
ˇˇG H
fullPath
ˇˇH P
,
ˇˇP Q
fileName
ˇˇR Z
)
ˇˇZ [
,
ˇˇ[ \
FileMode
ˇˇ] e
.
ˇˇe f
Create
ˇˇf l
,
ˇˇl m

FileAccess
ˇˇn x
.
ˇˇx y
	ReadWriteˇˇy Ç
)ˇˇÇ É
)ˇˇÉ Ñ
{
ÄÄ 
await
ÅÅ 
file
ÅÅ "
.
ÅÅ" #
CopyToAsync
ÅÅ# .
(
ÅÅ. /

fileStream
ÅÅ/ 9
)
ÅÅ9 :
.
ÅÅ: ;
ConfigureAwait
ÅÅ; I
(
ÅÅI J
false
ÅÅJ O
)
ÅÅO P
;
ÅÅP Q
return
ÇÇ 
fileName
ÇÇ '
;
ÇÇ' (
}
ÉÉ 
}
ÑÑ 
else
ÖÖ 
{
ÜÜ 
return
áá 
string
áá !
.
áá! "
Empty
áá" '
;
áá' (
}
àà 
}
ââ 
catch
ää 
{
ãã 
return
åå 
string
åå 
.
åå 
Empty
åå #
;
åå# $
}
çç 
}
éé 	
public
ïï 
static
ïï 
void
ïï 
WriteBytesToFile
ïï +
(
ïï+ ,
string
ïï, 2
fullPath
ïï3 ;
,
ïï; <
string
ïï= C
	strBase64
ïïD M
)
ïïM N
{
ññ 	
string
óó 
fileData
óó 
=
óó 
	strBase64
óó '
.
óó' (
	Substring
óó( 1
(
óó1 2
	strBase64
óó2 ;
.
óó; <
IndexOf
óó< C
(
óóC D
$char
óóD G
)
óóG H
+
óóI J
$num
óóK L
)
óóL M
;
óóM N
byte
òò 
[
òò 
]
òò 
bytes
òò 
=
òò 
Convert
òò "
.
òò" #
FromBase64String
òò# 3
(
òò3 4
fileData
òò4 <
)
òò< =
;
òò= >
if
ôô 
(
ôô 
File
ôô 
.
ôô 
Exists
ôô 
(
ôô 
fullPath
ôô $
)
ôô$ %
)
ôô% &
{
öö 
File
õõ 
.
õõ 
Delete
õõ 
(
õõ 
fullPath
õõ $
)
õõ$ %
;
õõ% &
}
úú 

FileStream
ûû 
fs
ûû 
=
ûû 
new
ûû 

FileStream
ûû  *
(
ûû* +
fullPath
ûû+ 3
,
ûû3 4
FileMode
ûû5 =
.
ûû= >
Create
ûû> D
)
ûûD E
;
ûûE F
BinaryWriter
üü 
w
üü 
=
üü 
new
üü  
BinaryWriter
üü! -
(
üü- .
fs
üü. 0
)
üü0 1
;
üü1 2
try
†† 
{
°° 
w
¢¢ 
.
¢¢ 
Write
¢¢ 
(
¢¢ 
bytes
¢¢ 
)
¢¢ 
;
¢¢ 
}
££ 
finally
§§ 
{
•• 
fs
¶¶ 
.
¶¶ 
Close
¶¶ 
(
¶¶ 
)
¶¶ 
;
¶¶ 
w
ßß 
.
ßß 
Close
ßß 
(
ßß 
)
ßß 
;
ßß 
}
®® 
}
©© 	
}
™™ 
}´´ ô
LC:\_workspace\github\mixcore\mix.heart\src\Mix.Heart\Common\Helper\Helper.cs
	namespace 	
Mix
 
. 
UI 
. 
Base 
{		 
public 

static 
class 
	ApiHelper !
<! "
T" #
># $
{ 
public 
static 
RepositoryResponse (
<( )
T) *
>* +
	GetResult, 5
(5 6
int6 9
status: @
,@ A
TB C
dataD H
,H I
stringJ P
responseKeyQ \
,\ ]
List^ b
<b c
stringc i
>i j
errorsk q
)q r
{ 	
RepositoryResponse 
< 
T  
>  !
result" (
=) *
new+ .
RepositoryResponse/ A
<A B
TB C
>C D
(D E
)E F
{ 
Status 
= 
status 
,  
ResponseKey 
= 
responseKey )
,) *
Data 
= 
data 
, 
Errors 
= 
errors 
,  
}   
;   
return"" 
result"" 
;"" 
}## 	
}$$ 
}%% ã=
OC:\_workspace\github\mixcore\mix.heart\src\Mix.Heart\Common\Helper\SEOHelper.cs
	namespace 	
Mix
 
. 
Common 
. 
Helper 
{		 
public 

static 
class 
	SeoHelper !
{ 
public 
static 
string "
DeleteSpecialCharaters 3
(3 4
string4 :
str; >
)> ?
{ 	
const 
string 
replaceChar $
=% &
$str' )
;) *
string 
[ 
] 
pattern 
= 
{  
$str! $
,$ %
$str& )
,) *
$str+ /
,/ 0
$str1 4
,4 5
$str6 9
,9 :
$str; >
}? @
;@ A
foreach 
( 
string 
item  
in! #
pattern$ +
)+ ,
{ 
str 
= 
str 
. 
Replace !
(! "
item" &
,& '
replaceChar( 3
)3 4
;4 5
} 
return 
str 
; 
} 	
public&& 
static&& 
string&& 
GetSEOString&& )
(&&) *
string&&* 0
s&&1 2
)&&2 3
{'' 	
return(( 
!(( 
string(( 
.(( 
IsNullOrEmpty(( (
(((( )
s(() *
)((* +
?((, -
WhiteSpaceToHyphen((. @
(((@ A
ConvertToUnSign((A P
(((P Q"
DeleteSpecialCharaters((Q g
(((g h
s((h i
)((i j
)((j k
)((k l
:((m n
s((o p
;((p q
})) 	
public44 
static44 
string44 
ConvertToUnSign44 ,
(44, -
string44- 3
text444 8
)448 9
{55 	
if66 
(66 
text66 
!=66 
null66 
)66 
{77 
for88 
(88 
int88 
i88 
=88 
$num88 
;88  
i88! "
<88# $
$num88% '
;88' (
i88) *
++88* ,
)88, -
{99 
text:: 
=:: 
text:: 
.::  
Replace::  '
(::' (
(::( )
(::) *
char::* .
)::. /
i::/ 0
)::0 1
.::1 2
ToString::2 :
(::: ;
)::; <
,::< =
$str::> @
)::@ A
;::A B
};; 
for== 
(== 
int== 
i== 
=== 
$num== 
;==  
i==! "
<==# $
$num==% '
;==' (
i==) *
++==* ,
)==, -
{>> 
text?? 
=?? 
text?? 
.??  
Replace??  '
(??' (
(??( )
(??) *
char??* .
)??. /
i??/ 0
)??0 1
.??1 2
ToString??2 :
(??: ;
)??; <
,??< =
$str??> @
)??@ A
;??A B
}@@ 
forBB 
(BB 
intBB 
iBB 
=BB 
$numBB 
;BB  
iBB! "
<BB# $
$numBB% '
;BB' (
iBB) *
++BB* ,
)BB, -
{CC 
textDD 
=DD 
textDD 
.DD  
ReplaceDD  '
(DD' (
(DD( )
(DD) *
charDD* .
)DD. /
iDD/ 0
)DD0 1
.DD1 2
ToStringDD2 :
(DD: ;
)DD; <
,DD< =
$strDD> @
)DD@ A
;DDA B
}EE 
forGG 
(GG 
intGG 
iGG 
=GG 
$numGG  
;GG  !
iGG" #
<GG$ %
$numGG& )
;GG) *
iGG+ ,
++GG, .
)GG. /
{HH 
textII 
=II 
textII 
.II  
ReplaceII  '
(II' (
(II( )
(II) *
charII* .
)II. /
iII/ 0
)II0 1
.II1 2
ToStringII2 :
(II: ;
)II; <
,II< =
$strII> @
)II@ A
;IIA B
}JJ 
}KK 
elseLL 
{MM 
textNN 
=NN 
$strNN 
;NN 
}OO 
SystemQQ 
.QQ 
TextQQ 
.QQ 
RegularExpressionsQQ *
.QQ* +
RegexQQ+ 0
regexQQ1 6
=QQ7 8
newQQ9 <
SystemQQ= C
.QQC D
TextQQD H
.QQH I
RegularExpressionsQQI [
.QQ[ \
RegexQQ\ a
(QQa b
$str	QQb Ö
)
QQÖ Ü
;
QQÜ á
stringSS 
strFormDSS 
=SS 
textSS "
.SS" #
	NormalizeSS# ,
(SS, -
SystemSS- 3
.SS3 4
TextSS4 8
.SS8 9
NormalizationFormSS9 J
.SSJ K
FormDSSK P
)SSP Q
;SSQ R
returnUU 
regexUU 
.UU 
ReplaceUU  
(UU  !
strFormDUU! )
,UU) *
StringUU+ 1
.UU1 2
EmptyUU2 7
)UU7 8
.UU8 9
ReplaceUU9 @
(UU@ A
$charUUA I
,UUI J
$charUUK N
)UUN O
.UUO P
ReplaceUUP W
(UUW X
$charUUX `
,UU` a
$charUUb e
)UUe f
;UUf g
}VV 	
public`` 
static`` 
string`` 
WhiteSpaceToHyphen`` /
(``/ 0
string``0 6
str``7 :
)``: ;
{aa 	
charbb 
replaceCharbb 
=bb 
$charbb "
;bb" #
stringcc 
patterncc 
=cc 
$strcc "
;cc" #
MatchCollectiondd 
matchsdd "
=dd# $
Regexdd% *
.dd* +
Matchesdd+ 2
(dd2 3
strdd3 6
,dd6 7
patterndd8 ?
,dd? @
RegexOptionsddA M
.ddM N

IgnoreCaseddN X
)ddX Y
;ddY Z
foreachee 
(ee 
Matchee 
mee 
inee 
matchsee  &
)ee& '
{ff 
strgg 
=gg 
strgg 
.gg 
Replacegg !
(gg! "
mgg" #
.gg# $
Valuegg$ )
[gg) *
$numgg* +
]gg+ ,
,gg, -
replaceChargg. 9
)gg9 :
;gg: ;
}hh 
replaceCharii 
=ii 
$charii 
;ii 
patternjj 
=jj 
$strjj 
;jj 
matchskk 
=kk 
Regexkk 
.kk 
Matcheskk "
(kk" #
strkk# &
,kk& '
patternkk( /
,kk/ 0
RegexOptionskk1 =
.kk= >

IgnoreCasekk> H
)kkH I
;kkI J
foreachll 
(ll 
Matchll 
mll 
inll 
matchsll  &
)ll& '
{mm 
strnn 
=nn 
strnn 
.nn 
Replacenn !
(nn! "
mnn" #
.nn# $
Valuenn$ )
[nn) *
$numnn* +
]nn+ ,
,nn, -
replaceCharnn. 9
)nn9 :
;nn: ;
}oo 
returnpp 
strpp 
.pp 
ToLowerpp 
(pp 
)pp  
;pp  !
}qq 	
}rr 
}ss áT
VC:\_workspace\github\mixcore\mix.heart\src\Mix.Heart\Common\Helper\UnitOfWorkHelper.cs
	namespace

 	
Mix


 
.

 
Common

 
.

 
Helper

 
{ 
public 

class 
UnitOfWorkHelper !
<! "

TDbContext" ,
>, -
where. 3

TDbContext4 >
:? @
	DbContextA J
{ 
public 
static 

TDbContext  
InitContext! ,
(, -
)- .
{ 	
Type 
	classType 
= 
typeof #
(# $

TDbContext$ .
). /
;/ 0
ConstructorInfo 
classConstructor ,
=- .
	classType/ 8
.8 9
GetConstructor9 G
(G H
newH K
TypeL P
[P Q
]Q R
{S T
}U V
)V W
;W X

TDbContext 
context 
=  
(! "

TDbContext" ,
), -
classConstructor- =
.= >
Invoke> D
(D E
newE H
objectI O
[O P
]P Q
{R S
}T U
)U V
;V W
return 
context 
; 
} 	
public 
static 
void 
HandleTransaction ,
(, -
bool- 1
	isSucceed2 ;
,; <
bool= A
isRootB H
,H I!
IDbContextTransactionJ _
transaction` k
)k l
{ 	
if 
( 
	isSucceed 
) 
{ 
if 
( 
isRoot 
) 
{ 
transaction!! 
.!!  
Commit!!  &
(!!& '
)!!' (
;!!( )
}"" 
}## 
else$$ 
{%% 
if&& 
(&& 
isRoot&& 
)&& 
{'' 
transaction)) 
.))  
Rollback))  (
())( )
)))) *
;))* +
}** 
}++ 
},, 	
public.. 
static.. 
RepositoryResponse.. (
<..( )
TResult..) 0
>..0 1
HandleException..2 A
<..A B
TResult..B I
>..I J
(..J K
	Exception..K T
ex..U W
,..W X
bool..Y ]
isRoot..^ d
,..d e!
IDbContextTransaction..f {
transaction	..| á
)
..á à
where// 
TResult// 
:// 
class// !
{00 	
if11 
(11 
isRoot11 
)11 
{22 
transaction44 
.44 
Rollback44 $
(44$ %
)44% &
;44& '
}55 
List66 
<66 
string66 
>66 
errors66 
=66  !
new66" %
List66& *
<66* +
string66+ 1
>661 2
(662 3
)663 4
;664 5
LogException77 
(77 
ex77 
)77 
;77 
errors88 
.88 
Add88 
(88 
ex88 
.88 
InnerException88 (
!=88) +
null88, 0
?881 2
ex883 5
.885 6
InnerException886 D
.88D E
Message88E L
:88M N
ex88O Q
.88Q R
Message88R Y
)88Y Z
;88Z [
return99 
new99 
RepositoryResponse99 )
<99) *
TResult99* 1
>991 2
(992 3
)993 4
{:: 
	IsSucceed;; 
=;; 
false;; !
,;;! "
Data<< 
=<< 
null<< 
,<< 
	Exception== 
=== 
(== 
ex== 
.==  
InnerException==  .
??==/ 1
ex==2 4
)==4 5
,==5 6
Errors>> 
=>> 
errors>> 
}?? 
;?? 
}@@ 	
publicBB 
staticBB 
RepositoryResponseBB (
<BB( )
TResultBB) 0
>BB0 1!
HandleObjectExceptionBB2 G
<BBG H
TResultBBH O
>BBO P
(BBP Q
	ExceptionBBQ Z
exBB[ ]
,BB] ^
boolBB_ c
isRootBBd j
,BBj k"
IDbContextTransaction	BBl Å
transaction
BBÇ ç
)
BBç é
whereCC 
TResultCC 
:CC 
IConvertibleCC (
{DD 	
ifEE 
(EE 
isRootEE 
)EE 
{FF 
transactionHH 
.HH 
RollbackHH $
(HH$ %
)HH% &
;HH& '
}II 
ListJJ 
<JJ 
stringJJ 
>JJ 
errorsJJ 
=JJ  !
newJJ" %
ListJJ& *
<JJ* +
stringJJ+ 1
>JJ1 2
(JJ2 3
)JJ3 4
;JJ4 5
LogExceptionKK 
(KK 
exKK 
)KK 
;KK 
errorsLL 
.LL 
AddLL 
(LL 
exLL 
.LL 
InnerExceptionLL (
!=LL) +
nullLL, 0
?LL1 2
exLL3 5
.LL5 6
InnerExceptionLL6 D
.LLD E
MessageLLE L
:LLM N
exLLO Q
.LLQ R
MessageLLR Y
)LLY Z
;LLZ [
returnMM 
newMM 
RepositoryResponseMM )
<MM) *
TResultMM* 1
>MM1 2
(MM2 3
)MM3 4
{NN 
	IsSucceedOO 
=OO 
falseOO !
,OO! "
DataPP 
=PP 
defaultPP 
,PP 
	ExceptionQQ 
=QQ 
(QQ 
exQQ 
.QQ  
InnerExceptionQQ  .
??QQ/ 1
exQQ2 4
)QQ4 5
,QQ5 6
ErrorsRR 
=RR 
errorsRR 
}SS 
;SS 
}TT 	
publicVV 
staticVV 
voidVV 
LogExceptionVV '
(VV' (
	ExceptionVV( 1
exVV2 4
)VV4 5
{WW 	
stringXX 
fullPathXX 
=XX 
stringXX $
.XX$ %
FormatXX% +
(XX+ ,
$"XX, .
{XX. /
EnvironmentXX/ :
.XX: ;
CurrentDirectoryXX; K
}XXK L
/logsXXL Q
"XXQ R
)XXR S
;XXS T
ifYY 
(YY 
!YY 
stringYY 
.YY 
IsNullOrEmptyYY %
(YY% &
fullPathYY& .
)YY. /
&&YY0 2
!YY3 4
	DirectoryYY4 =
.YY= >
ExistsYY> D
(YYD E
fullPathYYE M
)YYM N
)YYN O
{ZZ 
	Directory[[ 
.[[ 
CreateDirectory[[ )
([[) *
fullPath[[* 2
)[[2 3
;[[3 4
}\\ 
string]] 
filePath]] 
=]] 
$"]]  
{]]  !
fullPath]]! )
}]]) *
/log_exceptions.txt]]* =
"]]= >
;]]> ?
try__ 
{`` 
FileInfoaa 
fileaa 
=aa 
newaa  #
FileInfoaa$ ,
(aa, -
filePathaa- 5
)aa5 6
;aa6 7
stringbb 
contentbb 
=bb  
$strbb! %
;bb% &
ifcc 
(cc 
filecc 
.cc 
Existscc 
)cc  
{dd 
usingee 
(ee 
StreamReaderee '
see( )
=ee* +
fileee, 0
.ee0 1
OpenTextee1 9
(ee9 :
)ee: ;
)ee; <
{ff 
contentgg 
=gg  !
sgg" #
.gg# $
	ReadToEndgg$ -
(gg- .
)gg. /
;gg/ 0
}hh 
Fileii 
.ii 
Deleteii 
(ii  
filePathii  (
)ii( )
;ii) *
}jj 
JArrayll 
arrExceptionsll $
=ll% &
JArrayll' -
.ll- .
Parsell. 3
(ll3 4
contentll4 ;
)ll; <
;ll< =
JObjectmm 
jexmm 
=mm 
newmm !
JObjectmm" )
{nn 
newoo 
	JPropertyoo !
(oo! "
$stroo" 3
,oo3 4
DateTimeoo5 =
.oo= >
UtcNowoo> D
)ooD E
,ooE F
newpp 
	JPropertypp !
(pp! "
$strpp" +
,pp+ ,
JObjectpp- 4
.pp4 5

FromObjectpp5 ?
(pp? @
expp@ B
)ppB C
)ppC D
}qq 
;qq 
arrExceptionsrr 
.rr 
Addrr !
(rr! "
jexrr" %
)rr% &
;rr& '
contentss 
=ss 
arrExceptionsss '
.ss' (
ToStringss( 0
(ss0 1
)ss1 2
;ss2 3
usinguu 
(uu 
varuu 
writeruu !
=uu" #
Fileuu$ (
.uu( )

CreateTextuu) 3
(uu3 4
filePathuu4 <
)uu< =
)uu= >
{vv 
writerww 
.ww 
	WriteLineww $
(ww$ %
contentww% ,
)ww, -
;ww- .
}xx 
}yy 
catchzz 
{{{ 
}}} 
}~~ 	
public
ÄÄ 
static
ÄÄ 
void
ÄÄ 
InitTransaction
ÄÄ *
(
ÄÄ* +

TDbContext
ÄÄ+ 5
_context
ÄÄ6 >
,
ÄÄ> ?#
IDbContextTransaction
ÄÄ@ U
_transaction
ÄÄV b
,
ÄÄb c
out
ÄÄd g

TDbContext
ÄÄh r
context
ÄÄs z
,
ÄÄz {
out
ÄÄ| %
IDbContextTransactionÄÄÄ ï
transactionÄÄñ °
,ÄÄ° ¢
outÄÄ£ ¶
boolÄÄß ´
isRootÄÄ¨ ≤
)ÄÄ≤ ≥
{
ÅÅ 	
isRoot
ÇÇ 
=
ÇÇ 
_context
ÇÇ 
==
ÇÇ  
null
ÇÇ! %
;
ÇÇ% &
context
ÉÉ 
=
ÉÉ 
_context
ÉÉ 
??
ÉÉ !
InitContext
ÉÉ" -
(
ÉÉ- .
)
ÉÉ. /
;
ÉÉ/ 0
transaction
ÑÑ 
=
ÑÑ 
_transaction
ÑÑ &
??
ÑÑ' )
context
ÑÑ* 1
.
ÑÑ1 2
Database
ÑÑ2 :
.
ÑÑ: ;
BeginTransaction
ÑÑ; K
(
ÑÑK L
)
ÑÑL M
;
ÑÑM N
}
ÖÖ 	
}
ÜÜ 
}áá ø
LC:\_workspace\github\mixcore\mix.heart\src\Mix.Heart\Common\Utility\Const.cs
	namespace 	
Mix
 
. 
Common 
. 
Utility 
{ 
public 

static 
class 
Const 
{ 
public 
const 
string $
CONST_DEFAULT_CONNECTION 4
=5 6
$str7 J
;J K
public 
const 
string !
CONST_CHAT_CONNECTION 1
=2 3
$str4 D
;D E
public 
const 
string !
CONST_FILE_APPSETTING 1
=2 3
$str4 F
;F G
public 
const 
string )
CONST_PATH_HOME_ACCESS_DENIED 9
=: ;
$str< Q
;Q R
public   
const   
string   !
CONST_PATH_HOME_ERROR   1
=  2 3
$str  4 A
;  A B
public%% 
const%% 
string%% !
CONST_SECTION_LOGGING%% 1
=%%2 3
$str%%4 =
;%%= >
public** 
const** 
string** 
CONST_ROUTE_DEFAULT** /
=**0 1
$str**2 ;
;**; <
public// 
const// 
string// 
CONST_APPID// '
=//( )
$str//* ;
;//; <
public44 
const44 
string44 
CONST_APPSECRET44 +
=44, -
$str44. ?
;44? @
public99 
const99 
string99 0
$CONST_DOMAIN_NOTIFICATION_KEY_COMMIT99 @
=99A B
$str99C K
;99K L
public>> 
const>> 
string>> 6
*CONST_DOMAIN_NOTIFICATION_KEY_COMMIT_VALUE>> F
=>>G H
$str>>I t
;>>t u
publicCC 
constCC 
stringCC %
CONST_DOMAIN_NOTIFICATIONCC 5
=CC6 7
$strCC8 L
;CCL M
publicHH 
constHH 
stringHH .
"CONST_DEFAULT_EXTENSIONS_FILE_PATHHH >
=HH? @
$strHHA [
;HH[ \
publicMM 
constMM 
stringMM -
!CONST_DEFAULT_EXTENSION_FILE_NAMEMM =
=MM> ?
$strMM@ Q
;MMQ R
}NN 
}OO ä
KC:\_workspace\github\mixcore\mix.heart\src\Mix.Heart\Common\Utility\Enum.cs
	namespace 	
Mix
 
. 
Common 
. 
Utility 
{ 
public 

class 
Enums 
{ 
public		 
enum		 
SWStatus		 
{

 	
Deleted 
= 
$num 
, 
Preview 
= 
$num 
, 
	Published 
= 
$num 
, 
Draft 
= 
$num 
, 
Schedule 
= 
$num 
} 	
public 
enum 
ResponseKey 
{ 	
NotFound 
, 
OK 
, 

BadRequest 
} 	
} 
} ◊
XC:\_workspace\github\mixcore\mix.heart\src\Mix.Heart\Domain\Core\Models\SignalRModels.cs
	namespace 	
Mix
 
. 
Domain 
. 
Core 
. 
Models  
{ 
public 

class 
SignalRClient 
{ 
public 
string 
UserId 
{ 
get "
;" #
set$ '
;' (
}) *
public 
string 
NickName 
{  
get! $
;$ %
set& )
;) *
}+ ,
public$$ 
string$$ 
ConnectionId$$ "
{$$# $
get$$% (
;$$( )
set$$* -
;$$- .
}$$/ 0
public,, 
DateTime,, 

JoinedDate,, "
{,,# $
get,,% (
;,,( )
set,,* -
;,,- .
},,/ 0
}-- 
}.. ˝
[C:\_workspace\github\mixcore\mix.heart\src\Mix.Heart\Domain\Core\Models\SupportedCulture.cs
	namespace 	
Mix
 
. 
Domain 
. 
Core 
. 
Models  
{ 
public 

class 
SupportedCulture !
{ 
[ 	
JsonProperty	 
( 
$str 
) 
] 
public 
int 
Id 
{ 
get 
; 
set  
;  !
}" #
[ 	
JsonProperty	 
( 
$str &
)& '
]' (
public 
string 
Specificulture $
{% &
get' *
;* +
set, /
;/ 0
}1 2
[&& 	
JsonProperty&&	 
(&& 
$str&& 
)&& 
]&& 
public'' 
string'' 
Lcid'' 
{'' 
get''  
;''  !
set''" %
;''% &
}''' (
[// 	
JsonProperty//	 
(// 
$str// 
)// 
]// 
public00 
string00 
Alias00 
{00 
get00 !
;00! "
set00# &
;00& '
}00( )
[88 	
JsonProperty88	 
(88 
$str88  
)88  !
]88! "
public99 
string99 
FullName99 
{99  
get99! $
;99$ %
set99& )
;99) *
}99+ ,
[AA 	
JsonPropertyAA	 
(AA 
$strAA #
)AA# $
]AA$ %
publicBB 
stringBB 
DescriptionBB !
{BB" #
getBB$ '
;BB' (
setBB) ,
;BB, -
}BB. /
[JJ 	
JsonPropertyJJ	 
(JJ 
$strJJ 
)JJ 
]JJ 
publicKK 
stringKK 
IconKK 
{KK 
getKK  
;KK  !
setKK" %
;KK% &
}KK' (
[SS 	
JsonPropertySS	 
(SS 
$strSS #
)SS# $
]SS$ %
publicTT 
boolTT 
IsSupportedTT 
{TT  !
getTT" %
;TT% &
setTT' *
;TT* +
}TT, -
}UU 
}VV Ù
bC:\_workspace\github\mixcore\mix.heart\src\Mix.Heart\Domain\Core\Repository\DefaultRepositories.cs
	namespace 	
Mix
 
. 
Domain 
. 
Data 
. 

Repository $
{		 
public 

class 
DefaultRepository "
<" #

TDbContext# -
,- .
TModel/ 5
,5 6
TView7 <
>< =
:> ?
Mix 
. 
Domain 
. 
Data 
. 

Repository "
." #
ViewRepositoryBase# 5
<5 6

TDbContext6 @
,@ A
TModelB H
,H I
TViewJ O
>O P
where 

TDbContext 
: 
	DbContext $
where 
TModel 
: 
class 
where 
TView 
: 
Mix 
. 
Domain  
.  !
Data! %
.% &

ViewModels& 0
.0 1
ViewModelBase1 >
<> ?

TDbContext? I
,I J
TModelK Q
,Q R
TViewS X
>X Y
{ 
private 
static 
volatile 
DefaultRepository  1
<1 2

TDbContext2 <
,< =
TModel> D
,D E
TViewF K
>K L
instanceM U
;U V
private 
static 
readonly 
object  &
syncRoot' /
=0 1
new2 5
Object6 <
(< =
)= >
;> ?
private$$ 
DefaultRepository$$ !
($$! "
)$$" #
{%% 	
}&& 	
public.. 
static.. 
DefaultRepository.. '
<..' (

TDbContext..( 2
,..2 3
TModel..4 :
,..: ;
TView..< A
>..A B
Instance..C K
{..L M
get// 
{// 
if00 
(00 
instance00 
==00 
null00  $
)00$ %
{11 
lock22 
(22 
syncRoot22 "
)22" #
{33 
if44 
(44 
instance44 $
==44% '
null44( ,
)44, -
instance55 $
=55% &
new55' *
DefaultRepository55+ <
<55< =

TDbContext55= G
,55G H
TModel55I O
,55O P
TView55Q V
>55V W
(55W X
)55X Y
;55Y Z
}66 
}77 
return99 
instance99 
;99  
}:: 
};; 	
}<< 
}== Ê†
aC:\_workspace\github\mixcore\mix.heart\src\Mix.Heart\Domain\Core\Repository\ViewRepositoryBase.cs
	namespace 	
Mix
 
. 
Domain 
. 
Data 
. 

Repository $
{ 
public 

abstract 
class 
ViewRepositoryBase ,
<, -

TDbContext- 7
,7 8
TModel9 ?
,? @
TViewA F
>F G
where 

TDbContext 
: 
	DbContext $
where 
TModel 
: 
class 
where 
TView 
: 

ViewModels  
.  !
ViewModelBase! .
<. /

TDbContext/ 9
,9 :
TModel; A
,A B
TViewC H
>H I
{ 
	protected!! 
ViewRepositoryBase!! $
(!!$ %
)!!% &
{"" 	
}$$ 	
public-- 
virtual-- 
bool-- 
CheckIsExists-- )
(--) *
TModel--* 0
entity--1 7
,--7 8

TDbContext--9 C
_context--D L
=--M N
null--O S
,--S T!
IDbContextTransaction--U j
_transaction--k w
=--x y
null--z ~
)--~ 
{.. 	
UnitOfWorkHelper// 
<// 

TDbContext// '
>//' (
.//( )
InitTransaction//) 8
(//8 9
_context//9 A
,//A B
_transaction//C O
,//O P
out//Q T

TDbContext//U _
context//` g
,//g h
out//i l"
IDbContextTransaction	//m Ç
transaction
//É é
,
//é è
out
//ê ì
bool
//î ò
isRoot
//ô ü
)
//ü †
;
//† °
try00 
{11 
return33 
context33 
.33 
Set33 "
<33" #
TModel33# )
>33) *
(33* +
)33+ ,
.33, -
Any33- 0
(330 1
e331 2
=>333 5
e336 7
==338 :
entity33; A
)33A B
;33B C
}77 
catch88 
(88 
	Exception88 
ex88 
)88  
{99 
LogErrorMessage:: 
(::  
ex::  "
)::" #
;::# $
if;; 
(;; 
isRoot;; 
);; 
{<< 
transaction== 
.==  
Rollback==  (
(==( )
)==) *
;==* +
}>> 
return?? 
false?? 
;?? 
}@@ 
finallyAA 
{BB 
ifCC 
(CC 
isRootCC 
)CC 
{DD 
transactionFF 
.FF  
DisposeFF  '
(FF' (
)FF( )
;FF) *
contextGG 
.GG 
DisposeGG #
(GG# $
)GG$ %
;GG% &
}HH 
}II 
}JJ 	
publicSS 
boolSS 
CheckIsExistsSS !
(SS! "
SystemSS" (
.SS( )
FuncSS) -
<SS- .
TModelSS. 4
,SS4 5
boolSS6 :
>SS: ;
	predicateSS< E
,SSE F

TDbContextSSG Q
_contextSSR Z
=SS[ \
nullSS] a
,SSa b!
IDbContextTransactionSSc x
_transaction	SSy Ö
=
SSÜ á
null
SSà å
)
SSå ç
{TT 	
UnitOfWorkHelperUU 
<UU 

TDbContextUU '
>UU' (
.UU( )
InitTransactionUU) 8
(UU8 9
_contextUU9 A
,UUA B
_transactionUUC O
,UUO P
outUUQ T

TDbContextUUU _
contextUU` g
,UUg h
outUUi l"
IDbContextTransaction	UUm Ç
transaction
UUÉ é
,
UUé è
out
UUê ì
bool
UUî ò
isRoot
UUô ü
)
UUü †
;
UU† °
tryVV 
{WW 
returnYY 
contextYY 
.YY 
SetYY "
<YY" #
TModelYY# )
>YY) *
(YY* +
)YY+ ,
.YY, -
AnyYY- 0
(YY0 1
	predicateYY1 :
)YY: ;
;YY; <
}]] 
catch^^ 
(^^ 
	Exception^^ 
ex^^ 
)^^  
{__ 
LogErrorMessage`` 
(``  
ex``  "
)``" #
;``# $
ifaa 
(aa 
isRootaa 
)aa 
{bb 
transactioncc 
.cc  
Rollbackcc  (
(cc( )
)cc) *
;cc* +
}dd 
returnee 
falseee 
;ee 
}ff 
finallygg 
{hh 
ifii 
(ii 
isRootii 
)ii 
{jj 
transactionll 
.ll  
Disposell  '
(ll' (
)ll( )
;ll) *
contextmm 
.mm 
Disposemm #
(mm# $
)mm$ %
;mm% &
}nn 
}oo 
}pp 	
publicyy 
virtualyy 
RepositoryResponseyy )
<yy) *
TViewyy* /
>yy/ 0
CreateModelyy1 <
(yy< =
TViewyy= B
viewyyC G
,zz 	

TDbContextzz
 
_contextzz 
=zz 
nullzz  $
,zz$ %!
IDbContextTransactionzz& ;
_transactionzz< H
=zzI J
nullzzK O
)zzO P
{{{ 	
bool|| 
isRoot|| 
=|| 
_context|| "
==||# %
null||& *
;||* +

TDbContext}} 
context}} 
=}}  
_context}}! )
??}}* ,
InitContext}}- 8
(}}8 9
)}}9 :
;}}: ;
var~~ 
transaction~~ 
=~~ 
_transaction~~ *
??~~+ -
context~~. 5
.~~5 6
Database~~6 >
.~~> ?
BeginTransaction~~? O
(~~O P
)~~P Q
;~~Q R
RepositoryResponse 
< 
TView $
>$ %
result& ,
=- .
new/ 2
RepositoryResponse3 E
<E F
TViewF K
>K L
(L M
)M N
{O P
	IsSucceedQ Z
=[ \
true] a
}b c
;c d
try
ÄÄ 
{
ÅÅ 
context
ÇÇ 
.
ÇÇ 
Entry
ÇÇ 
(
ÇÇ 
view
ÇÇ "
.
ÇÇ" #
Model
ÇÇ# (
)
ÇÇ( )
.
ÇÇ) *
State
ÇÇ* /
=
ÇÇ0 1
EntityState
ÇÇ2 =
.
ÇÇ= >
Added
ÇÇ> C
;
ÇÇC D
result
ÉÉ 
.
ÉÉ 
	IsSucceed
ÉÉ  
=
ÉÉ! "
context
ÉÉ# *
.
ÉÉ* +
SaveChanges
ÉÉ+ 6
(
ÉÉ6 7
)
ÉÉ7 8
>
ÉÉ9 :
$num
ÉÉ; <
;
ÉÉ< =
result
ÑÑ 
.
ÑÑ 
Data
ÑÑ 
=
ÑÑ 
view
ÑÑ "
;
ÑÑ" #
UnitOfWorkHelper
ÖÖ  
<
ÖÖ  !

TDbContext
ÖÖ! +
>
ÖÖ+ ,
.
ÖÖ, -
HandleTransaction
ÖÖ- >
(
ÖÖ> ?
result
ÖÖ? E
.
ÖÖE F
	IsSucceed
ÖÖF O
,
ÖÖO P
isRoot
ÖÖQ W
,
ÖÖW X
transaction
ÖÖY d
)
ÖÖd e
;
ÖÖe f
return
ÜÜ 
result
ÜÜ 
;
ÜÜ 
}
áá 
catch
àà 
(
àà 
	Exception
àà 
ex
àà 
)
àà  
{
ââ 
LogErrorMessage
ää 
(
ää  
ex
ää  "
)
ää" #
;
ää# $
result
ãã 
.
ãã 
	IsSucceed
ãã  
=
ãã! "
false
ãã# (
;
ãã( )
result
åå 
.
åå 
	Exception
åå  
=
åå! "
ex
åå# %
;
åå% &
if
çç 
(
çç 
isRoot
çç 
)
çç 
{
éé 
transaction
èè 
.
èè  
Rollback
èè  (
(
èè( )
)
èè) *
;
èè* +
}
êê 
return
ëë 
result
ëë 
;
ëë 
}
íí 
finally
ìì 
{
îî 
if
ïï 
(
ïï 
isRoot
ïï 
)
ïï 
{
ññ 
transaction
òò 
.
òò  
Dispose
òò  '
(
òò' (
)
òò( )
;
òò) *
context
ôô 
.
ôô 
Dispose
ôô #
(
ôô# $
)
ôô$ %
;
ôô% &
}
öö 
}
õõ 
}
úú 	
public
•• 
virtual
•• 
async
•• 
Task
•• !
<
••! " 
RepositoryResponse
••" 4
<
••4 5
TView
••5 :
>
••: ;
>
••; <
CreateModelAsync
••= M
(
••M N
TView
••N S
view
••T X
,
¶¶ 	

TDbContext
¶¶
 
_context
¶¶ 
=
¶¶ 
null
¶¶  $
,
¶¶$ %#
IDbContextTransaction
¶¶& ;
_transaction
¶¶< H
=
¶¶I J
null
¶¶K O
)
¶¶O P
{
ßß 	
UnitOfWorkHelper
®® 
<
®® 

TDbContext
®® '
>
®®' (
.
®®( )
InitTransaction
®®) 8
(
®®8 9
_context
®®9 A
,
®®A B
_transaction
®®C O
,
®®O P
out
®®Q T

TDbContext
®®U _
context
®®` g
,
®®g h
out
®®i l$
IDbContextTransaction®®m Ç
transaction®®É é
,®®é è
out®®ê ì
bool®®î ò
isRoot®®ô ü
)®®ü †
;®®† ° 
RepositoryResponse
©© 
<
©© 
TView
©© $
>
©©$ %
result
©©& ,
=
©©- .
new
©©/ 2 
RepositoryResponse
©©3 E
<
©©E F
TView
©©F K
>
©©K L
(
©©L M
)
©©M N
{
©©O P
	IsSucceed
©©Q Z
=
©©[ \
true
©©] a
}
©©b c
;
©©c d
try
™™ 
{
´´ 
context
¨¨ 
.
¨¨ 
Entry
¨¨ 
(
¨¨ 
view
¨¨ "
.
¨¨" #
Model
¨¨# (
)
¨¨( )
.
¨¨) *
State
¨¨* /
=
¨¨0 1
EntityState
¨¨2 =
.
¨¨= >
Added
¨¨> C
;
¨¨C D
result
≠≠ 
.
≠≠ 
	IsSucceed
≠≠  
=
≠≠! "
await
≠≠# (
context
≠≠) 0
.
≠≠0 1
SaveChangesAsync
≠≠1 A
(
≠≠A B
)
≠≠B C
.
≠≠C D
ConfigureAwait
≠≠D R
(
≠≠R S
false
≠≠S X
)
≠≠X Y
>
≠≠Z [
$num
≠≠\ ]
;
≠≠] ^
result
ÆÆ 
.
ÆÆ 
Data
ÆÆ 
=
ÆÆ 
view
ÆÆ "
;
ÆÆ" #
UnitOfWorkHelper
ØØ  
<
ØØ  !

TDbContext
ØØ! +
>
ØØ+ ,
.
ØØ, -
HandleTransaction
ØØ- >
(
ØØ> ?
result
ØØ? E
.
ØØE F
	IsSucceed
ØØF O
,
ØØO P
isRoot
ØØQ W
,
ØØW X
transaction
ØØY d
)
ØØd e
;
ØØe f
return
∞∞ 
result
∞∞ 
;
∞∞ 
}
±± 
catch
≤≤ 
(
≤≤ 
	Exception
≤≤ 
ex
≤≤ 
)
≤≤  
{
≥≥ 
return
¥¥ 
UnitOfWorkHelper
¥¥ '
<
¥¥' (

TDbContext
¥¥( 2
>
¥¥2 3
.
¥¥3 4
HandleException
¥¥4 C
<
¥¥C D
TView
¥¥D I
>
¥¥I J
(
¥¥J K
ex
¥¥K M
,
¥¥M N
isRoot
¥¥O U
,
¥¥U V
transaction
¥¥W b
)
¥¥b c
;
¥¥c d
}
µµ 
finally
∂∂ 
{
∑∑ 
if
∏∏ 
(
∏∏ 
isRoot
∏∏ 
)
∏∏ 
{
ππ 
transaction
ªª 
.
ªª  
Dispose
ªª  '
(
ªª' (
)
ªª( )
;
ªª) *
context
ºº 
.
ºº 
Dispose
ºº #
(
ºº# $
)
ºº$ %
;
ºº% &
}
ΩΩ 
}
ææ 
}
øø 	
public
»» 
virtual
»»  
RepositoryResponse
»» )
<
»») *
TView
»»* /
>
»»/ 0
	EditModel
»»1 :
(
»»: ;
TView
»»; @
view
»»A E
,
…… 	

TDbContext
……
 
_context
…… 
=
…… 
null
……  $
,
……$ %#
IDbContextTransaction
……& ;
_transaction
……< H
=
……I J
null
……K O
)
……O P
{
   	
UnitOfWorkHelper
ÀÀ 
<
ÀÀ 

TDbContext
ÀÀ '
>
ÀÀ' (
.
ÀÀ( )
InitTransaction
ÀÀ) 8
(
ÀÀ8 9
_context
ÀÀ9 A
,
ÀÀA B
_transaction
ÀÀC O
,
ÀÀO P
out
ÀÀQ T

TDbContext
ÀÀU _
context
ÀÀ` g
,
ÀÀg h
out
ÀÀi l$
IDbContextTransactionÀÀm Ç
transactionÀÀÉ é
,ÀÀé è
outÀÀê ì
boolÀÀî ò
isRootÀÀô ü
)ÀÀü †
;ÀÀ† ° 
RepositoryResponse
ÃÃ 
<
ÃÃ 
TView
ÃÃ $
>
ÃÃ$ %
result
ÃÃ& ,
=
ÃÃ- .
new
ÃÃ/ 2 
RepositoryResponse
ÃÃ3 E
<
ÃÃE F
TView
ÃÃF K
>
ÃÃK L
(
ÃÃL M
)
ÃÃM N
{
ÃÃO P
	IsSucceed
ÃÃQ Z
=
ÃÃ[ \
true
ÃÃ] a
}
ÃÃb c
;
ÃÃc d
try
ÕÕ 
{
ŒŒ 
context
–– 
.
–– 
Set
–– 
<
–– 
TModel
–– "
>
––" #
(
––# $
)
––$ %
.
––% &
Update
––& ,
(
––, -
view
––- 1
.
––1 2
Model
––2 7
)
––7 8
;
––8 9
result
—— 
.
—— 
	IsSucceed
——  
=
——! "
context
——# *
.
——* +
SaveChanges
——+ 6
(
——6 7
)
——7 8
>
——9 :
$num
——; <
;
——< =
result
““ 
.
““ 
Data
““ 
=
““ 
view
““ "
;
““" #
UnitOfWorkHelper
””  
<
””  !

TDbContext
””! +
>
””+ ,
.
””, -
HandleTransaction
””- >
(
””> ?
result
””? E
.
””E F
	IsSucceed
””F O
,
””O P
isRoot
””Q W
,
””W X
transaction
””Y d
)
””d e
;
””e f
return
’’ 
result
’’ 
;
’’ 
}
÷÷ 
catch
◊◊ 
(
◊◊ 
	Exception
◊◊ 
ex
◊◊ 
)
◊◊  
{
ÿÿ 
return
ŸŸ 
UnitOfWorkHelper
ŸŸ '
<
ŸŸ' (

TDbContext
ŸŸ( 2
>
ŸŸ2 3
.
ŸŸ3 4
HandleException
ŸŸ4 C
<
ŸŸC D
TView
ŸŸD I
>
ŸŸI J
(
ŸŸJ K
ex
ŸŸK M
,
ŸŸM N
isRoot
ŸŸO U
,
ŸŸU V
transaction
ŸŸW b
)
ŸŸb c
;
ŸŸc d
}
⁄⁄ 
finally
€€ 
{
‹‹ 
if
›› 
(
›› 
isRoot
›› 
)
›› 
{
ﬁﬁ 
transaction
‡‡ 
.
‡‡  
Dispose
‡‡  '
(
‡‡' (
)
‡‡( )
;
‡‡) *
context
·· 
.
·· 
Dispose
·· #
(
··# $
)
··$ %
;
··% &
}
‚‚ 
}
„„ 
}
‰‰ 	
public
ÌÌ 
virtual
ÌÌ 
async
ÌÌ 
Task
ÌÌ !
<
ÌÌ! " 
RepositoryResponse
ÌÌ" 4
<
ÌÌ4 5
TView
ÌÌ5 :
>
ÌÌ: ;
>
ÌÌ; <
EditModelAsync
ÌÌ= K
(
ÌÌK L
TView
ÌÌL Q
view
ÌÌR V
,
ÌÌV W

TDbContext
ÌÌX b
_context
ÌÌc k
=
ÌÌl m
null
ÌÌn r
,
ÌÌr s$
IDbContextTransactionÌÌt â
_transactionÌÌä ñ
=ÌÌó ò
nullÌÌô ù
)ÌÌù û
{
ÓÓ 	
UnitOfWorkHelper
ÔÔ 
<
ÔÔ 

TDbContext
ÔÔ '
>
ÔÔ' (
.
ÔÔ( )
InitTransaction
ÔÔ) 8
(
ÔÔ8 9
_context
ÔÔ9 A
,
ÔÔA B
_transaction
ÔÔC O
,
ÔÔO P
out
ÔÔQ T

TDbContext
ÔÔU _
context
ÔÔ` g
,
ÔÔg h
out
ÔÔi l$
IDbContextTransactionÔÔm Ç
transactionÔÔÉ é
,ÔÔé è
outÔÔê ì
boolÔÔî ò
isRootÔÔô ü
)ÔÔü †
;ÔÔ† ° 
RepositoryResponse
 
<
 
TView
 $
>
$ %
result
& ,
=
- .
new
/ 2 
RepositoryResponse
3 E
<
E F
TView
F K
>
K L
(
L M
)
M N
{
O P
	IsSucceed
Q Z
=
[ \
true
] a
}
b c
;
c d
try
ÒÒ 
{
ÚÚ 
context
ÙÙ 
.
ÙÙ 
Set
ÙÙ 
<
ÙÙ 
TModel
ÙÙ "
>
ÙÙ" #
(
ÙÙ# $
)
ÙÙ$ %
.
ÙÙ% &
Update
ÙÙ& ,
(
ÙÙ, -
view
ÙÙ- 1
.
ÙÙ1 2
Model
ÙÙ2 7
)
ÙÙ7 8
;
ÙÙ8 9
result
ıı 
.
ıı 
	IsSucceed
ıı  
=
ıı! "
await
ıı# (
context
ıı) 0
.
ıı0 1
SaveChangesAsync
ıı1 A
(
ııA B
)
ııB C
.
ııC D
ConfigureAwait
ııD R
(
ııR S
false
ııS X
)
ııX Y
>
ııZ [
$num
ıı\ ]
;
ıı] ^
result
ˆˆ 
.
ˆˆ 
Data
ˆˆ 
=
ˆˆ 
view
ˆˆ "
;
ˆˆ" #
UnitOfWorkHelper
˜˜  
<
˜˜  !

TDbContext
˜˜! +
>
˜˜+ ,
.
˜˜, -
HandleTransaction
˜˜- >
(
˜˜> ?
result
˜˜? E
.
˜˜E F
	IsSucceed
˜˜F O
,
˜˜O P
isRoot
˜˜Q W
,
˜˜W X
transaction
˜˜Y d
)
˜˜d e
;
˜˜e f
return
¯¯ 
result
¯¯ 
;
¯¯ 
}
˘˘ 
catch
˙˙ 
(
˙˙ 
	Exception
˙˙ 
ex
˙˙ 
)
˙˙  
{
˚˚ 
return
¸¸ 
UnitOfWorkHelper
¸¸ '
<
¸¸' (

TDbContext
¸¸( 2
>
¸¸2 3
.
¸¸3 4
HandleException
¸¸4 C
<
¸¸C D
TView
¸¸D I
>
¸¸I J
(
¸¸J K
ex
¸¸K M
,
¸¸M N
isRoot
¸¸O U
,
¸¸U V
transaction
¸¸W b
)
¸¸b c
;
¸¸c d
}
˝˝ 
finally
˛˛ 
{
ˇˇ 
if
ÄÄ 
(
ÄÄ 
isRoot
ÄÄ 
)
ÄÄ 
{
ÅÅ 
context
ÉÉ 
.
ÉÉ 
Dispose
ÉÉ #
(
ÉÉ# $
)
ÉÉ$ %
;
ÉÉ% &
}
ÑÑ 
}
ÖÖ 
}
ÜÜ 	
public
èè 
virtual
èè  
RepositoryResponse
èè )
<
èè) *
TView
èè* /
>
èè/ 0
GetSingleModel
èè1 ?
(
èè? @

Expression
êê 
<
êê 
Func
êê 
<
êê 
TModel
êê 
,
êê 
bool
êê  $
>
êê$ %
>
êê% &
	predicate
êê' 0
,
ëë 	

TDbContext
ëë
 
_context
ëë 
=
ëë 
null
ëë  $
,
ëë$ %#
IDbContextTransaction
ëë& ;
_transaction
ëë< H
=
ëëI J
null
ëëK O
)
ëëO P
{
íí 	
UnitOfWorkHelper
ìì 
<
ìì 

TDbContext
ìì '
>
ìì' (
.
ìì( )
InitTransaction
ìì) 8
(
ìì8 9
_context
ìì9 A
,
ììA B
_transaction
ììC O
,
ììO P
out
ììQ T

TDbContext
ììU _
context
ìì` g
,
ììg h
out
ììi l$
IDbContextTransactionììm Ç
transactionììÉ é
,ììé è
outììê ì
boolììî ò
isRootììô ü
)ììü †
;ìì† °
try
îî 
{
ïï 
context
ññ 
=
ññ 
_context
ññ "
??
ññ# %
InitContext
ññ& 1
(
ññ1 2
)
ññ2 3
;
ññ3 4
transaction
óó 
=
óó 
_transaction
óó *
??
óó+ -
context
óó. 5
.
óó5 6
Database
óó6 >
.
óó> ?
BeginTransaction
óó? O
(
óóO P
)
óóP Q
;
óóQ R
TModel
ôô 
model
ôô 
=
ôô 
context
ôô &
.
ôô& '
Set
ôô' *
<
ôô* +
TModel
ôô+ 1
>
ôô1 2
(
ôô2 3
)
ôô3 4
.
ôô4 5
SingleOrDefault
ôô5 D
(
ôôD E
	predicate
ôôE N
)
ôôN O
;
ôôO P
if
öö 
(
öö 
model
öö 
!=
öö 
null
öö !
)
öö! "
{
õõ 
context
úú 
.
úú 
Entry
úú !
(
úú! "
model
úú" '
)
úú' (
.
úú( )
State
úú) .
=
úú/ 0
EntityState
úú1 <
.
úú< =
Detached
úú= E
;
úúE F
var
ùù 

viewResult
ùù "
=
ùù# $
	ParseView
ùù% .
(
ùù. /
model
ùù/ 4
,
ùù4 5
context
ùù6 =
,
ùù= >
transaction
ùù? J
)
ùùJ K
;
ùùK L
return
ûû 
new
ûû  
RepositoryResponse
ûû 1
<
ûû1 2
TView
ûû2 7
>
ûû7 8
(
ûû8 9
)
ûû9 :
{
üü 
	IsSucceed
†† !
=
††" #
true
††$ (
,
††( )
Data
°° 
=
°° 

viewResult
°° )
}
¢¢ 
;
¢¢ 
}
££ 
else
§§ 
{
•• 
return
¶¶ 
new
¶¶  
RepositoryResponse
¶¶ 1
<
¶¶1 2
TView
¶¶2 7
>
¶¶7 8
(
¶¶8 9
)
¶¶9 :
{
ßß 
	IsSucceed
®® !
=
®®" #
false
®®$ )
,
®®) *
Data
©© 
=
©© 
default
©© &
}
™™ 
;
™™ 
}
´´ 
}
¨¨ 
catch
≠≠ 
(
≠≠ 
	Exception
≠≠ 
ex
≠≠ 
)
≠≠  
{
ÆÆ 
return
ØØ 
UnitOfWorkHelper
ØØ '
<
ØØ' (

TDbContext
ØØ( 2
>
ØØ2 3
.
ØØ3 4
HandleException
ØØ4 C
<
ØØC D
TView
ØØD I
>
ØØI J
(
ØØJ K
ex
ØØK M
,
ØØM N
isRoot
ØØO U
,
ØØU V
transaction
ØØW b
)
ØØb c
;
ØØc d
}
∞∞ 
finally
±± 
{
≤≤ 
if
≥≥ 
(
≥≥ 
isRoot
≥≥ 
)
≥≥ 
{
¥¥ 
context
∂∂ 
?
∂∂ 
.
∂∂ 
Dispose
∂∂ $
(
∂∂$ %
)
∂∂% &
;
∂∂& '
}
∑∑ 
}
∏∏ 
}
ππ 	
public
¬¬ 
virtual
¬¬ 
async
¬¬ 
Task
¬¬ !
<
¬¬! " 
RepositoryResponse
¬¬" 4
<
¬¬4 5
TView
¬¬5 :
>
¬¬: ;
>
¬¬; <!
GetSingleModelAsync
¬¬= P
(
¬¬P Q

Expression
√√ 
<
√√ 
Func
√√ 
<
√√ 
TModel
√√ 
,
√√ 
bool
√√  $
>
√√$ %
>
√√% &
	predicate
√√' 0
,
ƒƒ 	

TDbContext
ƒƒ
 
_context
ƒƒ 
=
ƒƒ 
null
ƒƒ  $
,
ƒƒ$ %#
IDbContextTransaction
ƒƒ& ;
_transaction
ƒƒ< H
=
ƒƒI J
null
ƒƒK O
)
ƒƒO P
{
≈≈ 	
UnitOfWorkHelper
∆∆ 
<
∆∆ 

TDbContext
∆∆ '
>
∆∆' (
.
∆∆( )
InitTransaction
∆∆) 8
(
∆∆8 9
_context
∆∆9 A
,
∆∆A B
_transaction
∆∆C O
,
∆∆O P
out
∆∆Q T

TDbContext
∆∆U _
context
∆∆` g
,
∆∆g h
out
∆∆i l$
IDbContextTransaction∆∆m Ç
transaction∆∆É é
,∆∆é è
out∆∆ê ì
bool∆∆î ò
isRoot∆∆ô ü
)∆∆ü †
;∆∆† °
try
«« 
{
»» 
TModel
…… 
model
…… 
=
…… 
await
…… $
context
……% ,
.
……, -
Set
……- 0
<
……0 1
TModel
……1 7
>
……7 8
(
……8 9
)
……9 :
.
……: ;"
SingleOrDefaultAsync
……; O
(
……O P
	predicate
……P Y
)
……Y Z
.
……Z [
ConfigureAwait
……[ i
(
……i j
false
……j o
)
……o p
;
……p q
if
   
(
   
model
   
!=
   
null
   !
)
  ! "
{
ÀÀ 
context
ÃÃ 
.
ÃÃ 
Entry
ÃÃ !
(
ÃÃ! "
model
ÃÃ" '
)
ÃÃ' (
.
ÃÃ( )
State
ÃÃ) .
=
ÃÃ/ 0
EntityState
ÃÃ1 <
.
ÃÃ< =
Detached
ÃÃ= E
;
ÃÃE F
var
ŒŒ 

viewResult
ŒŒ "
=
ŒŒ# $
	ParseView
ŒŒ% .
(
ŒŒ. /
model
ŒŒ/ 4
,
ŒŒ4 5
context
ŒŒ6 =
,
ŒŒ= >
transaction
ŒŒ? J
)
ŒŒJ K
;
ŒŒK L
return
œœ 
new
œœ  
RepositoryResponse
œœ 1
<
œœ1 2
TView
œœ2 7
>
œœ7 8
(
œœ8 9
)
œœ9 :
{
–– 
	IsSucceed
—— !
=
——" #
true
——$ (
,
——( )
Data
““ 
=
““ 

viewResult
““ )
}
”” 
;
”” 
}
‘‘ 
else
’’ 
{
÷÷ 
return
◊◊ 
new
◊◊  
RepositoryResponse
◊◊ 1
<
◊◊1 2
TView
◊◊2 7
>
◊◊7 8
(
◊◊8 9
)
◊◊9 :
{
ÿÿ 
	IsSucceed
ŸŸ !
=
ŸŸ" #
false
ŸŸ$ )
,
ŸŸ) *
Data
⁄⁄ 
=
⁄⁄ 
default
⁄⁄ &
}
€€ 
;
€€ 
}
‹‹ 
}
›› 
catch
ﬁﬁ 
(
ﬁﬁ 
	Exception
ﬁﬁ 
ex
ﬁﬁ 
)
ﬁﬁ  
{
ﬂﬂ 
return
‡‡ 
UnitOfWorkHelper
‡‡ '
<
‡‡' (

TDbContext
‡‡( 2
>
‡‡2 3
.
‡‡3 4
HandleException
‡‡4 C
<
‡‡C D
TView
‡‡D I
>
‡‡I J
(
‡‡J K
ex
‡‡K M
,
‡‡M N
isRoot
‡‡O U
,
‡‡U V
transaction
‡‡W b
)
‡‡b c
;
‡‡c d
}
·· 
finally
‚‚ 
{
„„ 
if
‰‰ 
(
‰‰ 
isRoot
‰‰ 
)
‰‰ 
{
ÂÂ 
context
ÁÁ 
.
ÁÁ 
Dispose
ÁÁ #
(
ÁÁ# $
)
ÁÁ$ %
;
ÁÁ% &
}
ËË 
}
ÈÈ 
}
ÍÍ 	
public
 
virtual
 

TDbContext
 !
InitContext
" -
(
- .
)
. /
{
ÒÒ 	
Type
ÚÚ 
	classType
ÚÚ 
=
ÚÚ 
typeof
ÚÚ #
(
ÚÚ# $

TDbContext
ÚÚ$ .
)
ÚÚ. /
;
ÚÚ/ 0
ConstructorInfo
ÛÛ 
classConstructor
ÛÛ ,
=
ÛÛ- .
	classType
ÛÛ/ 8
.
ÛÛ8 9
GetConstructor
ÛÛ9 G
(
ÛÛG H
new
ÛÛH K
Type
ÛÛL P
[
ÛÛP Q
]
ÛÛQ R
{
ÛÛS T
}
ÛÛU V
)
ÛÛV W
;
ÛÛW X

TDbContext
ÙÙ 
context
ÙÙ 
=
ÙÙ  
(
ÙÙ! "

TDbContext
ÙÙ" ,
)
ÙÙ, -
classConstructor
ÙÙ- =
.
ÙÙ= >
Invoke
ÙÙ> D
(
ÙÙD E
new
ÙÙE H
object
ÙÙI O
[
ÙÙO P
]
ÙÙP Q
{
ÙÙR S
}
ÙÙT U
)
ÙÙU V
;
ÙÙV W
return
ˆˆ 
context
ˆˆ 
;
ˆˆ 
}
˜˜ 	
public
˝˝ 
virtual
˝˝ 
void
˝˝ 
LogErrorMessage
˝˝ +
(
˝˝+ ,
	Exception
˝˝, 5
ex
˝˝6 8
)
˝˝8 9
{
˛˛ 	
}
ˇˇ 	
public
åå 
virtual
åå 
PaginationModel
åå &
<
åå& '
TView
åå' ,
>
åå, -
ParsePagingQuery
åå. >
(
åå> ?

IQueryable
åå? I
<
ååI J
TModel
ååJ P
>
ååP Q
query
ååR W
,
çç 	
string
çç
 !
orderByPropertyName
çç $
,
çç$ %
int
çç& )
	direction
çç* 3
,
éé 	
int
éé
 
?
éé 
pageSize
éé 
,
éé 
int
éé 
?
éé 
	pageIndex
éé '
,
èè 	

TDbContext
èè
 
context
èè 
,
èè #
IDbContextTransaction
èè 3
transaction
èè4 ?
)
èè? @
{
êê 	
List
ëë 
<
ëë 
TModel
ëë 
>
ëë 
lstModel
ëë !
=
ëë" #
new
ëë$ '
List
ëë( ,
<
ëë, -
TModel
ëë- 3
>
ëë3 4
(
ëë4 5
)
ëë5 6
;
ëë6 7
PaginationModel
ìì 
<
ìì 
TView
ìì !
>
ìì! "
result
ìì# )
=
ìì* +
new
ìì, /
PaginationModel
ìì0 ?
<
ìì? @
TView
ìì@ E
>
ììE F
(
ììF G
)
ììG H
{
îî 

TotalItems
ïï 
=
ïï 
query
ïï "
.
ïï" #
Count
ïï# (
(
ïï( )
)
ïï) *
,
ïï* +
	PageIndex
ññ 
=
ññ 
	pageIndex
ññ %
??
ññ& (
$num
ññ) *
}
óó 
;
óó 
dynamic
òò 
orderBy
òò 
=
òò 
	GetLambda
òò '
(
òò' (!
orderByPropertyName
òò( ;
)
òò; <
;
òò< =

IQueryable
ôô 
<
ôô 
TModel
ôô 
>
ôô 
sorted
ôô %
=
ôô& '
null
ôô( ,
;
ôô, -
try
öö 
{
õõ 
result
úú 
.
úú 
PageSize
úú 
=
úú  !
pageSize
úú" *
??
úú+ -
result
úú. 4
.
úú4 5

TotalItems
úú5 ?
;
úú? @
if
ûû 
(
ûû 
pageSize
ûû 
.
ûû 
HasValue
ûû %
)
ûû% &
{
üü 
result
†† 
.
†† 
	TotalPage
†† $
=
††% &
(
††' (
result
††( .
.
††. /

TotalItems
††/ 9
/
††: ;
pageSize
††< D
.
††D E
Value
††E J
)
††J K
+
††L M
(
††N O
result
††O U
.
††U V

TotalItems
††V `
%
††a b
pageSize
††c k
.
††k l
Value
††l q
>
††r s
$num
††t u
?
††v w
$num
††x y
:
††z {
$num
††| }
)
††} ~
;
††~ 
}
°° 
switch
££ 
(
££ 
	direction
££ !
)
££! "
{
§§ 
case
•• 
$num
•• 
:
•• 
sorted
¶¶ 
=
¶¶  
	Queryable
¶¶! *
.
¶¶* +
OrderByDescending
¶¶+ <
(
¶¶< =
query
¶¶= B
,
¶¶B C
orderBy
¶¶D K
)
¶¶K L
;
¶¶L M
if
ßß 
(
ßß 
pageSize
ßß $
.
ßß$ %
HasValue
ßß% -
)
ßß- .
{
®® 
lstModel
©© $
=
©©% &
sorted
©©' -
.
©©- .
Skip
©©. 2
(
©©2 3
	pageIndex
©©3 <
.
©©< =
Value
©©= B
*
©©C D
pageSize
©©E M
.
©©M N
Value
©©N S
)
©©S T
.
™™ 
Take
™™ !
(
™™! "
pageSize
™™" *
.
™™* +
Value
™™+ 0
)
™™0 1
.
´´ 
ToList
´´ #
(
´´# $
)
´´$ %
;
´´% &
}
¨¨ 
else
≠≠ 
{
ÆÆ 
lstModel
ØØ $
=
ØØ% &
sorted
ØØ' -
.
ØØ- .
ToList
ØØ. 4
(
ØØ4 5
)
ØØ5 6
;
ØØ6 7
}
∞∞ 
break
±± 
;
±± 
default
≥≥ 
:
≥≥ 
sorted
¥¥ 
=
¥¥  
	Queryable
¥¥! *
.
¥¥* +
OrderBy
¥¥+ 2
(
¥¥2 3
query
¥¥3 8
,
¥¥8 9
orderBy
¥¥: A
)
¥¥A B
;
¥¥B C
if
µµ 
(
µµ 
pageSize
µµ $
.
µµ$ %
HasValue
µµ% -
)
µµ- .
{
∂∂ 
lstModel
∑∑ $
=
∑∑% &
sorted
∑∑' -
.
∏∏ 
Skip
∏∏ !
(
∏∏! "
	pageIndex
∏∏" +
.
∏∏+ ,
Value
∏∏, 1
*
∏∏2 3
pageSize
∏∏4 <
.
∏∏< =
Value
∏∏= B
)
∏∏B C
.
ππ 
Take
ππ !
(
ππ! "
pageSize
ππ" *
.
ππ* +
Value
ππ+ 0
)
ππ0 1
.
∫∫ 
ToList
∫∫ #
(
∫∫# $
)
∫∫$ %
;
∫∫% &
}
ªª 
else
ºº 
{
ΩΩ 
lstModel
ææ $
=
ææ% &
sorted
ææ' -
.
ææ- .
ToList
ææ. 4
(
ææ4 5
)
ææ5 6
;
ææ6 7
}
øø 
break
¿¿ 
;
¿¿ 
}
¡¡ 
lstModel
¬¬ 
.
¬¬ 
ForEach
¬¬  
(
¬¬  !
model
¬¬! &
=>
¬¬' )
context
¬¬* 1
.
¬¬1 2
Entry
¬¬2 7
(
¬¬7 8
model
¬¬8 =
)
¬¬= >
.
¬¬> ?
State
¬¬? D
=
¬¬E F
EntityState
¬¬G R
.
¬¬R S
Detached
¬¬S [
)
¬¬[ \
;
¬¬\ ]
var
√√ 
lstView
√√ 
=
√√ 
	ParseView
√√ '
(
√√' (
lstModel
√√( 0
,
√√0 1
context
√√2 9
,
√√9 :
transaction
√√; F
)
√√F G
;
√√G H
result
ƒƒ 
.
ƒƒ 
Items
ƒƒ 
=
ƒƒ 
lstView
ƒƒ &
;
ƒƒ& '
return
≈≈ 
result
≈≈ 
;
≈≈ 
}
∆∆ 
catch
«« 
(
«« 
	Exception
«« 
ex
«« 
)
««  
{
»» 
LogErrorMessage
…… 
(
……  
ex
……  "
)
……" #
;
……# $
return
   
null
   
;
   
}
ÀÀ 
}
ÃÃ 	
public
ŸŸ 
virtual
ŸŸ 
async
ŸŸ 
Task
ŸŸ !
<
ŸŸ! "
PaginationModel
ŸŸ" 1
<
ŸŸ1 2
TView
ŸŸ2 7
>
ŸŸ7 8
>
ŸŸ8 9#
ParsePagingQueryAsync
ŸŸ: O
(
ŸŸO P

IQueryable
ŸŸP Z
<
ŸŸZ [
TModel
ŸŸ[ a
>
ŸŸa b
query
ŸŸc h
,
⁄⁄ 	
string
⁄⁄
 !
orderByPropertyName
⁄⁄ $
,
⁄⁄$ %
int
⁄⁄& )
	direction
⁄⁄* 3
,
€€ 	
int
€€
 
?
€€ 
pageSize
€€ 
,
€€ 
int
€€ 
?
€€ 
	pageIndex
€€ '
,
‹‹ 	

TDbContext
‹‹
 
context
‹‹ 
,
‹‹ #
IDbContextTransaction
‹‹ 3
transaction
‹‹4 ?
)
‹‹? @
{
›› 	
List
ﬁﬁ 
<
ﬁﬁ 
TModel
ﬁﬁ 
>
ﬁﬁ 
lstModel
ﬁﬁ !
=
ﬁﬁ" #
new
ﬁﬁ$ '
List
ﬁﬁ( ,
<
ﬁﬁ, -
TModel
ﬁﬁ- 3
>
ﬁﬁ3 4
(
ﬁﬁ4 5
)
ﬁﬁ5 6
;
ﬁﬁ6 7
PaginationModel
‡‡ 
<
‡‡ 
TView
‡‡ !
>
‡‡! "
result
‡‡# )
=
‡‡* +
new
‡‡, /
PaginationModel
‡‡0 ?
<
‡‡? @
TView
‡‡@ E
>
‡‡E F
(
‡‡F G
)
‡‡G H
{
·· 

TotalItems
‚‚ 
=
‚‚ 
query
‚‚ "
.
‚‚" #
Count
‚‚# (
(
‚‚( )
)
‚‚) *
,
‚‚* +
	PageIndex
„„ 
=
„„ 
	pageIndex
„„ %
??
„„& (
$num
„„) *
}
‰‰ 
;
‰‰ 
dynamic
ÂÂ 
orderBy
ÂÂ 
=
ÂÂ 
	GetLambda
ÂÂ '
(
ÂÂ' (!
orderByPropertyName
ÂÂ( ;
)
ÂÂ; <
;
ÂÂ< =

IQueryable
ÊÊ 
<
ÊÊ 
TModel
ÊÊ 
>
ÊÊ 
sorted
ÊÊ %
=
ÊÊ& '
null
ÊÊ( ,
;
ÊÊ, -
try
ÁÁ 
{
ËË 
result
ÈÈ 
.
ÈÈ 
PageSize
ÈÈ 
=
ÈÈ  !
pageSize
ÈÈ" *
??
ÈÈ+ -
result
ÈÈ. 4
.
ÈÈ4 5

TotalItems
ÈÈ5 ?
;
ÈÈ? @
if
ÎÎ 
(
ÎÎ 
pageSize
ÎÎ 
.
ÎÎ 
HasValue
ÎÎ %
)
ÎÎ% &
{
ÏÏ 
result
ÌÌ 
.
ÌÌ 
	TotalPage
ÌÌ $
=
ÌÌ% &
(
ÌÌ' (
result
ÌÌ( .
.
ÌÌ. /

TotalItems
ÌÌ/ 9
/
ÌÌ: ;
pageSize
ÌÌ< D
.
ÌÌD E
Value
ÌÌE J
)
ÌÌJ K
+
ÌÌL M
(
ÌÌN O
result
ÌÌO U
.
ÌÌU V

TotalItems
ÌÌV `
%
ÌÌa b
pageSize
ÌÌc k
.
ÌÌk l
Value
ÌÌl q
>
ÌÌr s
$num
ÌÌt u
?
ÌÌv w
$num
ÌÌx y
:
ÌÌz {
$num
ÌÌ| }
)
ÌÌ} ~
;
ÌÌ~ 
}
ÓÓ 
switch
 
(
 
	direction
 !
)
! "
{
ÒÒ 
case
ÚÚ 
$num
ÚÚ 
:
ÚÚ 
sorted
ÛÛ 
=
ÛÛ  
	Queryable
ÛÛ! *
.
ÛÛ* +
OrderByDescending
ÛÛ+ <
(
ÛÛ< =
query
ÛÛ= B
,
ÛÛB C
orderBy
ÛÛD K
)
ÛÛK L
;
ÛÛL M
if
ÙÙ 
(
ÙÙ 
pageSize
ÙÙ $
.
ÙÙ$ %
HasValue
ÙÙ% -
)
ÙÙ- .
{
ıı 
lstModel
ˆˆ $
=
ˆˆ% &
await
ˆˆ' ,
sorted
ˆˆ- 3
.
ˆˆ3 4
Skip
ˆˆ4 8
(
ˆˆ8 9
	pageIndex
ˆˆ9 B
.
ˆˆB C
Value
ˆˆC H
*
ˆˆI J
pageSize
ˆˆK S
.
ˆˆS T
Value
ˆˆT Y
)
ˆˆY Z
.
˜˜ 
Take
˜˜ !
(
˜˜! "
pageSize
˜˜" *
.
˜˜* +
Value
˜˜+ 0
)
˜˜0 1
.
¯¯ 
ToListAsync
¯¯ (
(
¯¯( )
)
¯¯) *
.
¯¯* +
ConfigureAwait
¯¯+ 9
(
¯¯9 :
false
¯¯: ?
)
¯¯? @
;
¯¯@ A
}
˘˘ 
else
˙˙ 
{
˚˚ 
lstModel
¸¸ $
=
¸¸% &
sorted
¸¸' -
.
¸¸- .
ToList
¸¸. 4
(
¸¸4 5
)
¸¸5 6
;
¸¸6 7
}
˝˝ 
break
˛˛ 
;
˛˛ 
default
ÄÄ 
:
ÄÄ 
sorted
ÅÅ 
=
ÅÅ  
	Queryable
ÅÅ! *
.
ÅÅ* +
OrderBy
ÅÅ+ 2
(
ÅÅ2 3
query
ÅÅ3 8
,
ÅÅ8 9
orderBy
ÅÅ: A
)
ÅÅA B
;
ÅÅB C
if
ÇÇ 
(
ÇÇ 
pageSize
ÇÇ $
.
ÇÇ$ %
HasValue
ÇÇ% -
)
ÇÇ- .
{
ÉÉ 
lstModel
ÑÑ $
=
ÑÑ% &
await
ÑÑ' ,
sorted
ÑÑ- 3
.
ÖÖ 
Skip
ÖÖ !
(
ÖÖ! "
	pageIndex
ÖÖ" +
.
ÖÖ+ ,
Value
ÖÖ, 1
*
ÖÖ2 3
pageSize
ÖÖ4 <
.
ÖÖ< =
Value
ÖÖ= B
)
ÖÖB C
.
ÜÜ 
Take
ÜÜ !
(
ÜÜ! "
pageSize
ÜÜ" *
.
ÜÜ* +
Value
ÜÜ+ 0
)
ÜÜ0 1
.
áá 
ToListAsync
áá (
(
áá( )
)
áá) *
.
áá* +
ConfigureAwait
áá+ 9
(
áá9 :
false
áá: ?
)
áá? @
;
áá@ A
}
àà 
else
ââ 
{
ää 
lstModel
ãã $
=
ãã% &
await
ãã' ,
sorted
ãã- 3
.
ãã3 4
ToListAsync
ãã4 ?
(
ãã? @
)
ãã@ A
.
ããA B
ConfigureAwait
ããB P
(
ããP Q
false
ããQ V
)
ããV W
;
ããW X
}
åå 
break
çç 
;
çç 
}
éé 
lstModel
èè 
.
èè 
ForEach
èè  
(
èè  !
model
èè! &
=>
èè' )
context
èè* 1
.
èè1 2
Entry
èè2 7
(
èè7 8
model
èè8 =
)
èè= >
.
èè> ?
State
èè? D
=
èèE F
EntityState
èèG R
.
èèR S
Detached
èèS [
)
èè[ \
;
èè\ ]
var
êê 
lstView
êê 
=
êê 
	ParseView
êê '
(
êê' (
lstModel
êê( 0
,
êê0 1
context
êê2 9
,
êê9 :
transaction
êê; F
)
êêF G
;
êêG H
result
ëë 
.
ëë 
Items
ëë 
=
ëë 
lstView
ëë &
;
ëë& '
return
íí 
result
íí 
;
íí 
}
ìì 
catch
îî 
(
îî 
	Exception
îî 
ex
îî 
)
îî  
{
ïï 
LogErrorMessage
ññ 
(
ññ  
ex
ññ  "
)
ññ" #
;
ññ# $
return
óó 
null
óó 
;
óó 
}
òò 
}
ôô 	
public
¢¢ 
virtual
¢¢ 
List
¢¢ 
<
¢¢ 
TView
¢¢ !
>
¢¢! "
	ParseView
¢¢# ,
(
¢¢, -
List
¢¢- 1
<
¢¢1 2
TModel
¢¢2 8
>
¢¢8 9
	lstModels
¢¢: C
,
¢¢C D

TDbContext
¢¢E O
_context
¢¢P X
=
¢¢Y Z
null
¢¢[ _
,
¢¢_ `#
IDbContextTransaction
¢¢a v
_transaction¢¢w É
=¢¢Ñ Ö
null¢¢Ü ä
)¢¢ä ã
{
££ 	
List
§§ 
<
§§ 
TView
§§ 
>
§§ 
lstView
§§ 
=
§§  !
new
§§" %
List
§§& *
<
§§* +
TView
§§+ 0
>
§§0 1
(
§§1 2
)
§§2 3
;
§§3 4
foreach
•• 
(
•• 
var
•• 
model
•• 
in
•• !
	lstModels
••" +
)
••+ ,
{
¶¶ 
lstView
ßß 
.
ßß 
Add
ßß 
(
ßß 
	ParseView
ßß %
(
ßß% &
model
ßß& +
,
ßß+ ,
_context
ßß- 5
,
ßß5 6
_transaction
ßß7 C
)
ßßC D
)
ßßD E
;
ßßE F
}
®® 
return
™™ 
lstView
™™ 
;
™™ 
}
´´ 	
public
¥¥ 
virtual
¥¥ 
TView
¥¥ 
	ParseView
¥¥ &
(
¥¥& '
TModel
¥¥' -
model
¥¥. 3
,
¥¥3 4

TDbContext
¥¥5 ?
_context
¥¥@ H
=
¥¥I J
null
¥¥K O
,
¥¥O P#
IDbContextTransaction
¥¥Q f
_transaction
¥¥g s
=
¥¥t u
null
¥¥v z
)
¥¥z {
{
µµ 	
Type
∂∂ 
	classType
∂∂ 
=
∂∂ 
typeof
∂∂ #
(
∂∂# $
TView
∂∂$ )
)
∂∂) *
;
∂∂* +
ConstructorInfo
∑∑ 
classConstructor
∑∑ ,
=
∑∑- .
	classType
∑∑/ 8
.
∑∑8 9
GetConstructor
∑∑9 G
(
∑∑G H
new
∑∑H K
Type
∑∑L P
[
∑∑P Q
]
∑∑Q R
{
∑∑S T
model
∑∑U Z
.
∑∑Z [
GetType
∑∑[ b
(
∑∑b c
)
∑∑c d
,
∑∑d e
typeof
∑∑f l
(
∑∑l m

TDbContext
∑∑m w
)
∑∑w x
,
∑∑x y
typeof∑∑z Ä
(∑∑Ä Å%
IDbContextTransaction∑∑Å ñ
)∑∑ñ ó
}∑∑ò ô
)∑∑ô ö
;∑∑ö õ
if
∏∏ 
(
∏∏ 
classConstructor
∏∏  
!=
∏∏! #
null
∏∏$ (
)
∏∏( )
{
ππ 
return
∫∫ 
(
∫∫ 
TView
∫∫ 
)
∫∫ 
classConstructor
∫∫ .
.
∫∫. /
Invoke
∫∫/ 5
(
∫∫5 6
new
∫∫6 9
object
∫∫: @
[
∫∫@ A
]
∫∫A B
{
∫∫C D
model
∫∫E J
,
∫∫J K
_context
∫∫L T
,
∫∫T U
_transaction
∫∫V b
}
∫∫c d
)
∫∫d e
;
∫∫e f
}
ªª 
else
ºº 
{
ΩΩ 
classConstructor
ææ  
=
ææ! "
	classType
ææ# ,
.
ææ, -
GetConstructor
ææ- ;
(
ææ; <
new
ææ< ?
Type
ææ@ D
[
ææD E
]
ææE F
{
ææG H
model
ææI N
.
ææN O
GetType
ææO V
(
ææV W
)
ææW X
}
ææY Z
)
ææZ [
;
ææ[ \
return
øø 
(
øø 
TView
øø 
)
øø 
classConstructor
øø .
.
øø. /
Invoke
øø/ 5
(
øø5 6
new
øø6 9
object
øø: @
[
øø@ A
]
øøA B
{
øøC D
model
øøE J
}
øøK L
)
øøL M
;
øøM N
}
¿¿ 
}
¡¡ 	
public
∆∆ 
virtual
∆∆ 
void
∆∆  
RegisterAutoMapper
∆∆ .
(
∆∆. /
)
∆∆/ 0
{
«« 	
Mapper
»» 
.
»» 

Initialize
»» 
(
»» 
cfg
»» !
=>
»»" $
{
…… 
cfg
   
.
   
	CreateMap
   
<
   
TModel
   $
,
  $ %
TView
  & +
>
  + ,
(
  , -
)
  - .
;
  . /
cfg
ÀÀ 
.
ÀÀ 
	CreateMap
ÀÀ 
<
ÀÀ 
TView
ÀÀ #
,
ÀÀ# $
TModel
ÀÀ% +
>
ÀÀ+ ,
(
ÀÀ, -
)
ÀÀ- .
;
ÀÀ. /
}
ÃÃ 
)
ÃÃ 
;
ÃÃ 
}
ÕÕ 	
public
◊◊ 
virtual
◊◊  
RepositoryResponse
◊◊ )
<
◊◊) *
List
◊◊* .
<
◊◊. /
TView
◊◊/ 4
>
◊◊4 5
>
◊◊5 6
GetModelList
◊◊7 C
(
◊◊C D

TDbContext
◊◊D N
_context
◊◊O W
=
◊◊X Y
null
◊◊Z ^
,
◊◊^ _#
IDbContextTransaction
◊◊` u
_transaction◊◊v Ç
=◊◊É Ñ
null◊◊Ö â
)◊◊â ä
{
ÿÿ 	
bool
ŸŸ 
isRoot
ŸŸ 
=
ŸŸ 
_context
ŸŸ "
==
ŸŸ# %
null
ŸŸ& *
;
ŸŸ* +
var
⁄⁄ 
context
⁄⁄ 
=
⁄⁄ 
_context
⁄⁄ "
??
⁄⁄# %
InitContext
⁄⁄& 1
(
⁄⁄1 2
)
⁄⁄2 3
;
⁄⁄3 4
var
€€ 
transaction
€€ 
=
€€ 
_transaction
€€ *
??
€€+ -
context
€€. 5
.
€€5 6
Database
€€6 >
.
€€> ?
BeginTransaction
€€? O
(
€€O P
)
€€P Q
;
€€Q R
List
‹‹ 
<
‹‹ 
TView
‹‹ 
>
‹‹ 
result
‹‹ 
=
‹‹  
new
‹‹! $
List
‹‹% )
<
‹‹) *
TView
‹‹* /
>
‹‹/ 0
(
‹‹0 1
)
‹‹1 2
;
‹‹2 3
try
›› 
{
ﬁﬁ 
var
ﬂﬂ 
lstModel
ﬂﬂ 
=
ﬂﬂ 
context
ﬂﬂ &
.
ﬂﬂ& '
Set
ﬂﬂ' *
<
ﬂﬂ* +
TModel
ﬂﬂ+ 1
>
ﬂﬂ1 2
(
ﬂﬂ2 3
)
ﬂﬂ3 4
.
ﬂﬂ4 5
ToList
ﬂﬂ5 ;
(
ﬂﬂ; <
)
ﬂﬂ< =
;
ﬂﬂ= >
lstModel
·· 
.
·· 
ForEach
··  
(
··  !
model
··! &
=>
··' )
context
··* 1
.
··1 2
Entry
··2 7
(
··7 8
model
··8 =
)
··= >
.
··> ?
State
··? D
=
··E F
EntityState
··G R
.
··R S
Detached
··S [
)
··[ \
;
··\ ]
result
‚‚ 
=
‚‚ 
	ParseView
‚‚ "
(
‚‚" #
lstModel
‚‚# +
,
‚‚+ ,
context
‚‚- 4
,
‚‚4 5
transaction
‚‚6 A
)
‚‚A B
;
‚‚B C
return
„„ 
new
„„  
RepositoryResponse
„„ -
<
„„- .
List
„„. 2
<
„„2 3
TView
„„3 8
>
„„8 9
>
„„9 :
(
„„: ;
)
„„; <
{
‰‰ 
	IsSucceed
ÂÂ 
=
ÂÂ 
true
ÂÂ  $
,
ÂÂ$ %
Data
ÊÊ 
=
ÊÊ 
result
ÊÊ !
}
ÁÁ 
;
ÁÁ 
}
ËË 
catch
ÈÈ 
(
ÈÈ 
	Exception
ÈÈ 
ex
ÈÈ 
)
ÈÈ  
{
ÍÍ 
return
ÎÎ 
UnitOfWorkHelper
ÎÎ '
<
ÎÎ' (

TDbContext
ÎÎ( 2
>
ÎÎ2 3
.
ÎÎ3 4
HandleException
ÎÎ4 C
<
ÎÎC D
List
ÎÎD H
<
ÎÎH I
TView
ÎÎI N
>
ÎÎN O
>
ÎÎO P
(
ÎÎP Q
ex
ÎÎQ S
,
ÎÎS T
isRoot
ÎÎU [
,
ÎÎ[ \
transaction
ÎÎ] h
)
ÎÎh i
;
ÎÎi j
}
ÏÏ 
finally
ÌÌ 
{
ÓÓ 
if
ÔÔ 
(
ÔÔ 
isRoot
ÔÔ 
)
ÔÔ 
{
 
context
ÚÚ 
.
ÚÚ 
Dispose
ÚÚ #
(
ÚÚ# $
)
ÚÚ$ %
;
ÚÚ% &
}
ÛÛ 
}
ÙÙ 
}
ıı 	
public
ÅÅ 
virtual
ÅÅ  
RepositoryResponse
ÅÅ )
<
ÅÅ) *
PaginationModel
ÅÅ* 9
<
ÅÅ9 :
TView
ÅÅ: ?
>
ÅÅ? @
>
ÅÅ@ A
GetModelList
ÅÅB N
(
ÅÅN O
string
ÇÇ !
orderByPropertyName
ÇÇ "
,
ÇÇ" #
int
ÇÇ$ '
	direction
ÇÇ( 1
,
ÇÇ1 2
int
ÇÇ3 6
?
ÇÇ6 7
pageSize
ÇÇ8 @
,
ÇÇ@ A
int
ÇÇB E
?
ÇÇE F
	pageIndex
ÇÇG P
,
ÉÉ 	

TDbContext
ÉÉ
 
_context
ÉÉ 
=
ÉÉ 
null
ÉÉ  $
,
ÉÉ$ %#
IDbContextTransaction
ÉÉ& ;
_transaction
ÉÉ< H
=
ÉÉI J
null
ÉÉK O
)
ÉÉO P
{
ÑÑ 	
bool
ÖÖ 
isRoot
ÖÖ 
=
ÖÖ 
_context
ÖÖ "
==
ÖÖ# %
null
ÖÖ& *
;
ÖÖ* +
var
ÜÜ 
context
ÜÜ 
=
ÜÜ 
_context
ÜÜ "
??
ÜÜ# %
InitContext
ÜÜ& 1
(
ÜÜ1 2
)
ÜÜ2 3
;
ÜÜ3 4
var
áá 
transaction
áá 
=
áá 
_transaction
áá *
??
áá+ -
context
áá. 5
.
áá5 6
Database
áá6 >
.
áá> ?
BeginTransaction
áá? O
(
ááO P
)
ááP Q
;
ááQ R
try
ââ 
{
ää 
var
ãã 
query
ãã 
=
ãã 
context
ãã #
.
ãã# $
Set
ãã$ '
<
ãã' (
TModel
ãã( .
>
ãã. /
(
ãã/ 0
)
ãã0 1
;
ãã1 2
var
çç 
result
çç 
=
çç 
ParsePagingQuery
çç -
(
çç- .
query
çç. 3
,
çç3 4!
orderByPropertyName
çç5 H
,
ççH I
	direction
ççJ S
,
ççS T
pageSize
ççU ]
,
çç] ^
	pageIndex
çç_ h
,
éé 
context
éé 
,
éé 
transaction
éé &
)
éé& '
;
éé' (
return
êê 
new
êê  
RepositoryResponse
êê -
<
êê- .
PaginationModel
êê. =
<
êê= >
TView
êê> C
>
êêC D
>
êêD E
(
êêE F
)
êêF G
{
ëë 
	IsSucceed
íí 
=
íí 
true
íí  $
,
íí$ %
Data
ìì 
=
ìì 
result
ìì !
}
îî 
;
îî 
}
ïï 
catch
ññ 
(
ññ 
	Exception
ññ 
ex
ññ 
)
ññ  
{
óó 
return
òò 
UnitOfWorkHelper
òò '
<
òò' (

TDbContext
òò( 2
>
òò2 3
.
òò3 4
HandleException
òò4 C
<
òòC D
PaginationModel
òòD S
<
òòS T
TView
òòT Y
>
òòY Z
>
òòZ [
(
òò[ \
ex
òò\ ^
,
òò^ _
isRoot
òò` f
,
òòf g
transaction
òòh s
)
òòs t
;
òòt u
}
ôô 
finally
öö 
{
õõ 
if
úú 
(
úú 
isRoot
úú 
)
úú 
{
ùù 
context
üü 
.
üü 
Dispose
üü #
(
üü# $
)
üü$ %
;
üü% &
}
†† 
}
°° 
}
¢¢ 	
public
™™ 
virtual
™™ 
async
™™ 
Task
™™ !
<
™™! " 
RepositoryResponse
™™" 4
<
™™4 5
List
™™5 9
<
™™9 :
TView
™™: ?
>
™™? @
>
™™@ A
>
™™A B
GetModelListAsync
™™C T
(
™™T U

TDbContext
™™U _
_context
™™` h
=
™™i j
null
™™k o
,
™™o p$
IDbContextTransaction™™q Ü
_transaction™™á ì
=™™î ï
null™™ñ ö
)™™ö õ
{
´´ 	
bool
¨¨ 
isRoot
¨¨ 
=
¨¨ 
_context
¨¨ "
==
¨¨# %
null
¨¨& *
;
¨¨* +
var
≠≠ 
context
≠≠ 
=
≠≠ 
_context
≠≠ "
??
≠≠# %
InitContext
≠≠& 1
(
≠≠1 2
)
≠≠2 3
;
≠≠3 4
var
ÆÆ 
transaction
ÆÆ 
=
ÆÆ 
_transaction
ÆÆ *
??
ÆÆ+ -
context
ÆÆ. 5
.
ÆÆ5 6
Database
ÆÆ6 >
.
ÆÆ> ?
BeginTransaction
ÆÆ? O
(
ÆÆO P
)
ÆÆP Q
;
ÆÆQ R
List
ØØ 
<
ØØ 
TView
ØØ 
>
ØØ 
result
ØØ 
=
ØØ  
new
ØØ! $
List
ØØ% )
<
ØØ) *
TView
ØØ* /
>
ØØ/ 0
(
ØØ0 1
)
ØØ1 2
;
ØØ2 3
try
∞∞ 
{
±± 
var
≤≤ 
lstModel
≤≤ 
=
≤≤ 
await
≤≤ $
context
≤≤% ,
.
≤≤, -
Set
≤≤- 0
<
≤≤0 1
TModel
≤≤1 7
>
≤≤7 8
(
≤≤8 9
)
≤≤9 :
.
≤≤: ;
ToListAsync
≤≤; F
(
≤≤F G
)
≤≤G H
.
≤≤H I
ConfigureAwait
≤≤I W
(
≤≤W X
false
≤≤X ]
)
≤≤] ^
;
≤≤^ _
lstModel
¥¥ 
.
¥¥ 
ForEach
¥¥  
(
¥¥  !
model
¥¥! &
=>
¥¥' )
context
¥¥* 1
.
¥¥1 2
Entry
¥¥2 7
(
¥¥7 8
model
¥¥8 =
)
¥¥= >
.
¥¥> ?
State
¥¥? D
=
¥¥E F
EntityState
¥¥G R
.
¥¥R S
Detached
¥¥S [
)
¥¥[ \
;
¥¥\ ]
result
µµ 
=
µµ 
	ParseView
µµ "
(
µµ" #
lstModel
µµ# +
,
µµ+ ,
_context
µµ- 5
,
µµ5 6
_transaction
µµ7 C
)
µµC D
;
µµD E
return
∂∂ 
new
∂∂  
RepositoryResponse
∂∂ -
<
∂∂- .
List
∂∂. 2
<
∂∂2 3
TView
∂∂3 8
>
∂∂8 9
>
∂∂9 :
(
∂∂: ;
)
∂∂; <
{
∑∑ 
	IsSucceed
∏∏ 
=
∏∏ 
true
∏∏  $
,
∏∏$ %
Data
ππ 
=
ππ 
result
ππ !
}
∫∫ 
;
∫∫ 
}
ªª 
catch
ºº 
(
ºº 
	Exception
ºº 
ex
ºº 
)
ºº  
{
ΩΩ 
return
ææ 
UnitOfWorkHelper
ææ '
<
ææ' (

TDbContext
ææ( 2
>
ææ2 3
.
ææ3 4
HandleException
ææ4 C
<
ææC D
List
ææD H
<
ææH I
TView
ææI N
>
ææN O
>
ææO P
(
ææP Q
ex
ææQ S
,
ææS T
isRoot
ææU [
,
ææ[ \
transaction
ææ] h
)
ææh i
;
ææi j
}
øø 
finally
¿¿ 
{
¡¡ 
if
¬¬ 
(
¬¬ 
isRoot
¬¬ 
)
¬¬ 
{
√√ 
context
≈≈ 
.
≈≈ 
Dispose
≈≈ #
(
≈≈# $
)
≈≈$ %
;
≈≈% &
}
∆∆ 
}
«« 
}
»» 	
public
‘‘ 
virtual
‘‘ 
async
‘‘ 
Task
‘‘ !
<
‘‘! " 
RepositoryResponse
‘‘" 4
<
‘‘4 5
PaginationModel
‘‘5 D
<
‘‘D E
TView
‘‘E J
>
‘‘J K
>
‘‘K L
>
‘‘L M
GetModelListAsync
‘‘N _
(
‘‘_ `
string
’’ !
orderByPropertyName
’’ "
,
’’" #
int
’’$ '
	direction
’’( 1
,
’’1 2
int
’’3 6
?
’’6 7
pageSize
’’8 @
,
’’@ A
int
’’B E
?
’’E F
	pageIndex
’’G P
,
÷÷ 	

TDbContext
÷÷
 
_context
÷÷ 
=
÷÷ 
null
÷÷  $
,
÷÷$ %#
IDbContextTransaction
÷÷& ;
_transaction
÷÷< H
=
÷÷I J
null
÷÷K O
)
÷÷O P
{
◊◊ 	
bool
ÿÿ 
isRoot
ÿÿ 
=
ÿÿ 
_context
ÿÿ "
==
ÿÿ# %
null
ÿÿ& *
;
ÿÿ* +
var
ŸŸ 
context
ŸŸ 
=
ŸŸ 
_context
ŸŸ "
??
ŸŸ# %
InitContext
ŸŸ& 1
(
ŸŸ1 2
)
ŸŸ2 3
;
ŸŸ3 4
var
⁄⁄ 
transaction
⁄⁄ 
=
⁄⁄ 
_transaction
⁄⁄ *
??
⁄⁄+ -
context
⁄⁄. 5
.
⁄⁄5 6
Database
⁄⁄6 >
.
⁄⁄> ?
BeginTransaction
⁄⁄? O
(
⁄⁄O P
)
⁄⁄P Q
;
⁄⁄Q R
try
‹‹ 
{
›› 
var
ﬁﬁ 
query
ﬁﬁ 
=
ﬁﬁ 
context
ﬁﬁ #
.
ﬁﬁ# $
Set
ﬁﬁ$ '
<
ﬁﬁ' (
TModel
ﬁﬁ( .
>
ﬁﬁ. /
(
ﬁﬁ/ 0
)
ﬁﬁ0 1
;
ﬁﬁ1 2
var
‡‡ 
result
‡‡ 
=
‡‡ 
await
‡‡ "#
ParsePagingQueryAsync
‡‡# 8
(
‡‡8 9
query
‡‡9 >
,
‡‡> ?!
orderByPropertyName
‡‡@ S
,
‡‡S T
	direction
‡‡U ^
,
‡‡^ _
pageSize
‡‡` h
,
‡‡h i
	pageIndex
‡‡j s
,
‡‡s t
context
‡‡u |
,
‡‡| }
transaction‡‡~ â
)‡‡â ä
.‡‡ä ã
ConfigureAwait‡‡ã ô
(‡‡ô ö
false‡‡ö ü
)‡‡ü †
;‡‡† °
return
·· 
new
··  
RepositoryResponse
·· -
<
··- .
PaginationModel
··. =
<
··= >
TView
··> C
>
··C D
>
··D E
(
··E F
)
··F G
{
‚‚ 
	IsSucceed
„„ 
=
„„ 
true
„„  $
,
„„$ %
Data
‰‰ 
=
‰‰ 
result
‰‰ !
}
ÂÂ 
;
ÂÂ 
}
ÊÊ 
catch
ÁÁ 
(
ÁÁ 
	Exception
ÁÁ 
ex
ÁÁ 
)
ÁÁ  
{
ËË 
return
ÈÈ 
UnitOfWorkHelper
ÈÈ '
<
ÈÈ' (

TDbContext
ÈÈ( 2
>
ÈÈ2 3
.
ÈÈ3 4
HandleException
ÈÈ4 C
<
ÈÈC D
PaginationModel
ÈÈD S
<
ÈÈS T
TView
ÈÈT Y
>
ÈÈY Z
>
ÈÈZ [
(
ÈÈ[ \
ex
ÈÈ\ ^
,
ÈÈ^ _
isRoot
ÈÈ` f
,
ÈÈf g
transaction
ÈÈh s
)
ÈÈs t
;
ÈÈt u
}
ÍÍ 
finally
ÎÎ 
{
ÏÏ 
if
ÌÌ 
(
ÌÌ 
isRoot
ÌÌ 
)
ÌÌ 
{
ÓÓ 
context
 
.
 
Dispose
 #
(
# $
)
$ %
;
% &
}
ÒÒ 
}
ÚÚ 
}
ÛÛ 	
public
ÄÄ 
virtual
ÄÄ  
RepositoryResponse
ÄÄ )
<
ÄÄ) *
List
ÄÄ* .
<
ÄÄ. /
TView
ÄÄ/ 4
>
ÄÄ4 5
>
ÄÄ5 6
GetModelListBy
ÄÄ7 E
(
ÄÄE F

Expression
ÄÄF P
<
ÄÄP Q
Func
ÄÄQ U
<
ÄÄU V
TModel
ÄÄV \
,
ÄÄ\ ]
bool
ÄÄ^ b
>
ÄÄb c
>
ÄÄc d
	predicate
ÄÄe n
,
ÅÅ 	

TDbContext
ÅÅ
 
_context
ÅÅ 
=
ÅÅ 
null
ÅÅ  $
,
ÅÅ$ %#
IDbContextTransaction
ÅÅ& ;
_transaction
ÅÅ< H
=
ÅÅI J
null
ÅÅK O
)
ÅÅO P
{
ÇÇ 	
UnitOfWorkHelper
ÉÉ 
<
ÉÉ 

TDbContext
ÉÉ '
>
ÉÉ' (
.
ÉÉ( )
InitTransaction
ÉÉ) 8
(
ÉÉ8 9
_context
ÉÉ9 A
,
ÉÉA B
_transaction
ÉÉC O
,
ÉÉO P
out
ÉÉQ T

TDbContext
ÉÉU _
context
ÉÉ` g
,
ÉÉg h
out
ÉÉi l$
IDbContextTransactionÉÉm Ç
transactionÉÉÉ é
,ÉÉé è
outÉÉê ì
boolÉÉî ò
isRootÉÉô ü
)ÉÉü †
;ÉÉ† °
try
ÑÑ 
{
ÖÖ 
var
ÜÜ 
lstModel
ÜÜ 
=
ÜÜ 
context
ÜÜ &
.
ÜÜ& '
Set
ÜÜ' *
<
ÜÜ* +
TModel
ÜÜ+ 1
>
ÜÜ1 2
(
ÜÜ2 3
)
ÜÜ3 4
.
ÜÜ4 5
Where
ÜÜ5 :
(
ÜÜ: ;
	predicate
ÜÜ; D
)
ÜÜD E
.
ÜÜE F
ToList
ÜÜF L
(
ÜÜL M
)
ÜÜM N
;
ÜÜN O
lstModel
áá 
.
áá 
ForEach
áá  
(
áá  !
model
áá! &
=>
áá' )
context
áá* 1
.
áá1 2
Entry
áá2 7
(
áá7 8
model
áá8 =
)
áá= >
.
áá> ?
State
áá? D
=
ááE F
EntityState
ááG R
.
ááR S
Detached
ááS [
)
áá[ \
;
áá\ ]
var
àà 
lstViewResult
àà !
=
àà" #
	ParseView
àà$ -
(
àà- .
lstModel
àà. 6
,
àà6 7
_context
àà8 @
,
àà@ A
_transaction
ààB N
)
ààN O
;
ààO P
return
ââ 
new
ââ  
RepositoryResponse
ââ -
<
ââ- .
List
ââ. 2
<
ââ2 3
TView
ââ3 8
>
ââ8 9
>
ââ9 :
(
ââ: ;
)
ââ; <
{
ää 
	IsSucceed
ãã 
=
ãã 
true
ãã  $
,
ãã$ %
Data
åå 
=
åå 
lstViewResult
åå (
}
çç 
;
çç 
}
éé 
catch
èè 
(
èè 
	Exception
èè 
ex
èè 
)
èè  
{
êê 
return
ëë 
UnitOfWorkHelper
ëë '
<
ëë' (

TDbContext
ëë( 2
>
ëë2 3
.
ëë3 4
HandleException
ëë4 C
<
ëëC D
List
ëëD H
<
ëëH I
TView
ëëI N
>
ëëN O
>
ëëO P
(
ëëP Q
ex
ëëQ S
,
ëëS T
isRoot
ëëU [
,
ëë[ \
transaction
ëë] h
)
ëëh i
;
ëëi j
}
íí 
finally
ìì 
{
îî 
if
ïï 
(
ïï 
isRoot
ïï 
)
ïï 
{
ññ 
context
òò 
.
òò 
Dispose
òò #
(
òò# $
)
òò$ %
;
òò% &
}
ôô 
}
öö 
}
õõ 	
public
®® 
virtual
®®  
RepositoryResponse
®® )
<
®®) *
PaginationModel
®®* 9
<
®®9 :
TView
®®: ?
>
®®? @
>
®®@ A
GetModelListBy
®®B P
(
®®P Q

Expression
©© 
<
©© 
Func
©© 
<
©© 
TModel
©© 
,
©© 
bool
©©  $
>
©©$ %
>
©©% &
	predicate
©©' 0
,
©©0 1
string
©©2 8!
orderByPropertyName
©©9 L
,
©©L M
int
©©N Q
	direction
©©R [
,
©©[ \
int
©©] `
?
©©` a
pageSize
©©b j
,
©©j k
int
©©l o
?
©©o p
	pageIndex
©©q z
,
™™ 	

TDbContext
™™
 
_context
™™ 
=
™™ 
null
™™  $
,
™™$ %#
IDbContextTransaction
™™& ;
_transaction
™™< H
=
™™I J
null
™™K O
)
™™O P
{
´´ 	
UnitOfWorkHelper
¨¨ 
<
¨¨ 

TDbContext
¨¨ '
>
¨¨' (
.
¨¨( )
InitTransaction
¨¨) 8
(
¨¨8 9
_context
¨¨9 A
,
¨¨A B
_transaction
¨¨C O
,
¨¨O P
out
¨¨Q T

TDbContext
¨¨U _
context
¨¨` g
,
¨¨g h
out
¨¨i l$
IDbContextTransaction¨¨m Ç
transaction¨¨É é
,¨¨é è
out¨¨ê ì
bool¨¨î ò
isRoot¨¨ô ü
)¨¨ü †
;¨¨† °
try
≠≠ 
{
ÆÆ 
var
ØØ 
query
ØØ 
=
ØØ 
context
ØØ #
.
ØØ# $
Set
ØØ$ '
<
ØØ' (
TModel
ØØ( .
>
ØØ. /
(
ØØ/ 0
)
ØØ0 1
.
ØØ1 2
Where
ØØ2 7
(
ØØ7 8
	predicate
ØØ8 A
)
ØØA B
;
ØØB C
var
∞∞ 
result
∞∞ 
=
∞∞ 
ParsePagingQuery
∞∞ -
(
∞∞- .
query
∞∞. 3
,
±± !
orderByPropertyName
±± %
,
±±% &
	direction
±±' 0
,
≤≤ 
pageSize
≤≤ 
,
≤≤ 
	pageIndex
≤≤ %
,
≥≥ 
context
≥≥ 
,
≥≥ 
transaction
≥≥ &
)
≥≥& '
;
≥≥' (
return
¥¥ 
new
¥¥  
RepositoryResponse
¥¥ -
<
¥¥- .
PaginationModel
¥¥. =
<
¥¥= >
TView
¥¥> C
>
¥¥C D
>
¥¥D E
(
¥¥E F
)
¥¥F G
{
µµ 
	IsSucceed
∂∂ 
=
∂∂ 
true
∂∂  $
,
∂∂$ %
Data
∑∑ 
=
∑∑ 
result
∑∑ !
}
∏∏ 
;
∏∏ 
}
ππ 
catch
∫∫ 
(
∫∫ 
	Exception
∫∫ 
ex
∫∫ 
)
∫∫  
{
ªª 
return
ºº 
UnitOfWorkHelper
ºº '
<
ºº' (

TDbContext
ºº( 2
>
ºº2 3
.
ºº3 4
HandleException
ºº4 C
<
ººC D
PaginationModel
ººD S
<
ººS T
TView
ººT Y
>
ººY Z
>
ººZ [
(
ºº[ \
ex
ºº\ ^
,
ºº^ _
isRoot
ºº` f
,
ººf g
transaction
ººh s
)
ººs t
;
ººt u
}
ΩΩ 
finally
ææ 
{
øø 
if
¿¿ 
(
¿¿ 
isRoot
¿¿ 
)
¿¿ 
{
¡¡ 
context
√√ 
.
√√ 
Dispose
√√ #
(
√√# $
)
√√$ %
;
√√% &
}
ƒƒ 
}
≈≈ 
}
∆∆ 	
public
œœ 
virtual
œœ 
async
œœ 
Task
œœ !
<
œœ! " 
RepositoryResponse
œœ" 4
<
œœ4 5
List
œœ5 9
<
œœ9 :
TView
œœ: ?
>
œœ? @
>
œœ@ A
>
œœA B!
GetModelListByAsync
œœC V
(
œœV W

Expression
œœW a
<
œœa b
Func
œœb f
<
œœf g
TModel
œœg m
,
œœm n
bool
œœo s
>
œœs t
>
œœt u
	predicate
œœv 
,
–– 	

TDbContext
––
 
_context
–– 
=
–– 
null
––  $
,
––$ %#
IDbContextTransaction
––& ;
_transaction
––< H
=
––I J
null
––K O
)
––O P
{
—— 	
UnitOfWorkHelper
““ 
<
““ 

TDbContext
““ '
>
““' (
.
““( )
InitTransaction
““) 8
(
““8 9
_context
““9 A
,
““A B
_transaction
““C O
,
““O P
out
““Q T

TDbContext
““U _
context
““` g
,
““g h
out
““i l$
IDbContextTransaction““m Ç
transaction““É é
,““é è
out““ê ì
bool““î ò
isRoot““ô ü
)““ü †
;““† °
try
‘‘ 
{
’’ 
var
÷÷ 
query
÷÷ 
=
÷÷ 
context
÷÷ #
.
÷÷# $
Set
÷÷$ '
<
÷÷' (
TModel
÷÷( .
>
÷÷. /
(
÷÷/ 0
)
÷÷0 1
.
÷÷1 2
Where
÷÷2 7
(
÷÷7 8
	predicate
÷÷8 A
)
÷÷A B
;
÷÷B C
var
◊◊ 
lstModel
◊◊ 
=
◊◊ 
await
◊◊ $
query
◊◊% *
.
◊◊* +
ToListAsync
◊◊+ 6
(
◊◊6 7
)
◊◊7 8
.
◊◊8 9
ConfigureAwait
◊◊9 G
(
◊◊G H
false
◊◊H M
)
◊◊M N
;
◊◊N O
lstModel
ÿÿ 
.
ÿÿ 
ForEach
ÿÿ  
(
ÿÿ  !
model
ÿÿ! &
=>
ÿÿ' )
context
ÿÿ* 1
.
ÿÿ1 2
Entry
ÿÿ2 7
(
ÿÿ7 8
model
ÿÿ8 =
)
ÿÿ= >
.
ÿÿ> ?
State
ÿÿ? D
=
ÿÿE F
EntityState
ÿÿG R
.
ÿÿR S
Detached
ÿÿS [
)
ÿÿ[ \
;
ÿÿ\ ]
var
ŸŸ 
result
ŸŸ 
=
ŸŸ 
	ParseView
ŸŸ &
(
ŸŸ& '
lstModel
ŸŸ' /
,
ŸŸ/ 0
_context
ŸŸ1 9
,
ŸŸ9 :
_transaction
ŸŸ; G
)
ŸŸG H
;
ŸŸH I
return
⁄⁄ 
new
⁄⁄  
RepositoryResponse
⁄⁄ -
<
⁄⁄- .
List
⁄⁄. 2
<
⁄⁄2 3
TView
⁄⁄3 8
>
⁄⁄8 9
>
⁄⁄9 :
(
⁄⁄: ;
)
⁄⁄; <
{
€€ 
	IsSucceed
‹‹ 
=
‹‹ 
true
‹‹  $
,
‹‹$ %
Data
›› 
=
›› 
result
›› !
}
ﬁﬁ 
;
ﬁﬁ 
}
ﬂﬂ 
catch
‡‡ 
(
‡‡ 
	Exception
‡‡ 
ex
‡‡ 
)
‡‡  
{
·· 
return
‚‚ 
UnitOfWorkHelper
‚‚ '
<
‚‚' (

TDbContext
‚‚( 2
>
‚‚2 3
.
‚‚3 4
HandleException
‚‚4 C
<
‚‚C D
List
‚‚D H
<
‚‚H I
TView
‚‚I N
>
‚‚N O
>
‚‚O P
(
‚‚P Q
ex
‚‚Q S
,
‚‚S T
isRoot
‚‚U [
,
‚‚[ \
transaction
‚‚] h
)
‚‚h i
;
‚‚i j
}
„„ 
finally
‰‰ 
{
ÂÂ 
if
ÊÊ 
(
ÊÊ 
isRoot
ÊÊ 
)
ÊÊ 
{
ÁÁ 
context
ÈÈ 
.
ÈÈ 
Dispose
ÈÈ #
(
ÈÈ# $
)
ÈÈ$ %
;
ÈÈ% &
}
ÍÍ 
}
ÎÎ 
}
ÏÏ 	
public
˘˘ 
virtual
˘˘ 
async
˘˘ 
Task
˘˘ !
<
˘˘! " 
RepositoryResponse
˘˘" 4
<
˘˘4 5
PaginationModel
˘˘5 D
<
˘˘D E
TView
˘˘E J
>
˘˘J K
>
˘˘K L
>
˘˘L M!
GetModelListByAsync
˘˘N a
(
˘˘a b

Expression
˙˙ 
<
˙˙ 
Func
˙˙ 
<
˙˙ 
TModel
˙˙ 
,
˙˙ 
bool
˙˙  $
>
˙˙$ %
>
˙˙% &
	predicate
˙˙' 0
,
˙˙0 1
string
˙˙2 8!
orderByPropertyName
˙˙9 L
,
˚˚ 	
int
˚˚
 
	direction
˚˚ 
,
˚˚ 
int
˚˚ 
?
˚˚ 
pageSize
˚˚ &
,
˚˚& '
int
˚˚( +
?
˚˚+ ,
	pageIndex
˚˚- 6
,
¸¸ 	

TDbContext
¸¸
 
_context
¸¸ 
=
¸¸ 
null
¸¸  $
,
¸¸$ %#
IDbContextTransaction
¸¸& ;
_transaction
¸¸< H
=
¸¸I J
null
¸¸K O
)
¸¸O P
{
˝˝ 	
UnitOfWorkHelper
˛˛ 
<
˛˛ 

TDbContext
˛˛ '
>
˛˛' (
.
˛˛( )
InitTransaction
˛˛) 8
(
˛˛8 9
_context
˛˛9 A
,
˛˛A B
_transaction
˛˛C O
,
˛˛O P
out
˛˛Q T

TDbContext
˛˛U _
context
˛˛` g
,
˛˛g h
out
˛˛i l$
IDbContextTransaction˛˛m Ç
transaction˛˛É é
,˛˛é è
out˛˛ê ì
bool˛˛î ò
isRoot˛˛ô ü
)˛˛ü †
;˛˛† °
try
ˇˇ 
{
ÄÄ 
var
ÅÅ 
query
ÅÅ 
=
ÅÅ 
context
ÅÅ #
.
ÅÅ# $
Set
ÅÅ$ '
<
ÅÅ' (
TModel
ÅÅ( .
>
ÅÅ. /
(
ÅÅ/ 0
)
ÅÅ0 1
.
ÅÅ1 2
Where
ÅÅ2 7
(
ÅÅ7 8
	predicate
ÅÅ8 A
)
ÅÅA B
;
ÅÅB C
var
ÉÉ 
result
ÉÉ 
=
ÉÉ 
await
ÉÉ "#
ParsePagingQueryAsync
ÉÉ# 8
(
ÉÉ8 9
query
ÉÉ9 >
,
ÑÑ !
orderByPropertyName
ÑÑ %
,
ÑÑ% &
	direction
ÑÑ' 0
,
ÖÖ 
pageSize
ÖÖ 
,
ÖÖ 
	pageIndex
ÖÖ %
,
ÜÜ 
context
ÜÜ 
,
ÜÜ 
transaction
ÜÜ &
)
ÜÜ& '
.
ÜÜ' (
ConfigureAwait
ÜÜ( 6
(
ÜÜ6 7
false
ÜÜ7 <
)
ÜÜ< =
;
ÜÜ= >
return
áá 
new
áá  
RepositoryResponse
áá -
<
áá- .
PaginationModel
áá. =
<
áá= >
TView
áá> C
>
ááC D
>
ááD E
(
ááE F
)
ááF G
{
àà 
	IsSucceed
ââ 
=
ââ 
true
ââ  $
,
ââ$ %
Data
ää 
=
ää 
result
ää !
}
ãã 
;
ãã 
}
åå 
catch
çç 
(
çç 
	Exception
çç 
ex
çç 
)
çç  
{
éé 
return
èè 
UnitOfWorkHelper
èè '
<
èè' (

TDbContext
èè( 2
>
èè2 3
.
èè3 4
HandleException
èè4 C
<
èèC D
PaginationModel
èèD S
<
èèS T
TView
èèT Y
>
èèY Z
>
èèZ [
(
èè[ \
ex
èè\ ^
,
èè^ _
isRoot
èè` f
,
èèf g
transaction
èèh s
)
èès t
;
èèt u
}
êê 
finally
ëë 
{
íí 
if
ìì 
(
ìì 
isRoot
ìì 
)
ìì 
{
îî 
context
ññ 
.
ññ 
Dispose
ññ #
(
ññ# $
)
ññ$ %
;
ññ% &
}
óó 
}
òò 
}
ôô 	
public
•• 
virtual
••  
RepositoryResponse
•• )
<
••) *
List
••* .
<
••. /
TModel
••/ 5
>
••5 6
>
••6 7
RemoveListModel
••8 G
(
••G H

Expression
••H R
<
••R S
Func
••S W
<
••W X
TModel
••X ^
,
••^ _
bool
••` d
>
••d e
>
••e f
	predicate
••g p
,
¶¶ 	

TDbContext
¶¶
 
_context
¶¶ 
=
¶¶ 
null
¶¶  $
,
¶¶$ %#
IDbContextTransaction
¶¶& ;
_transaction
¶¶< H
=
¶¶I J
null
¶¶K O
)
¶¶O P
{
ßß 	
UnitOfWorkHelper
®® 
<
®® 

TDbContext
®® '
>
®®' (
.
®®( )
InitTransaction
®®) 8
(
®®8 9
_context
®®9 A
,
®®A B
_transaction
®®C O
,
®®O P
out
®®Q T

TDbContext
®®U _
context
®®` g
,
®®g h
out
®®i l$
IDbContextTransaction®®m Ç
transaction®®É é
,®®é è
out®®ê ì
bool®®î ò
isRoot®®ô ü
)®®ü †
;®®† °
try
©© 
{
™™ 
var
´´ 
Items
´´ 
=
´´ 
context
´´ #
.
´´# $
Set
´´$ '
<
´´' (
TModel
´´( .
>
´´. /
(
´´/ 0
)
´´0 1
.
´´1 2
Where
´´2 7
(
´´7 8
	predicate
´´8 A
)
´´A B
.
´´B C
ToList
´´C I
(
´´I J
)
´´J K
;
´´K L
bool
¨¨ 
result
¨¨ 
=
¨¨ 
true
¨¨ "
;
¨¨" #
if
≠≠ 
(
≠≠ 
Items
≠≠ 
!=
≠≠ 
null
≠≠ !
)
≠≠! "
{
ÆÆ 
foreach
ØØ 
(
ØØ 
var
ØØ  
model
ØØ! &
in
ØØ' )
Items
ØØ* /
)
ØØ/ 0
{
∞∞ 
if
±± 
(
±± 
result
±± "
)
±±" #
{
≤≤ 
var
≥≥ 
r
≥≥  !
=
≥≥" #
RemoveModel
≥≥$ /
(
≥≥/ 0
model
≥≥0 5
,
≥≥5 6
context
≥≥7 >
,
≥≥> ?
transaction
≥≥@ K
)
≥≥K L
;
≥≥L M
result
¥¥ "
=
¥¥# $
result
¥¥% +
&&
¥¥, .
r
¥¥/ 0
.
¥¥0 1
	IsSucceed
¥¥1 :
;
¥¥: ;
}
µµ 
else
∂∂ 
{
∑∑ 
break
∏∏ !
;
∏∏! "
}
ππ 
}
∫∫ 
UnitOfWorkHelper
ºº $
<
ºº$ %

TDbContext
ºº% /
>
ºº/ 0
.
ºº0 1
HandleTransaction
ºº1 B
(
ººB C
result
ººC I
,
ººI J
isRoot
ººK Q
,
ººQ R
transaction
ººS ^
)
ºº^ _
;
ºº_ `
return
ææ 
new
ææ  
RepositoryResponse
ææ 1
<
ææ1 2
List
ææ2 6
<
ææ6 7
TModel
ææ7 =
>
ææ= >
>
ææ> ?
(
ææ? @
)
ææ@ A
{
øø 
	IsSucceed
¿¿ !
=
¿¿" #
result
¿¿$ *
,
¿¿* +
Data
¡¡ 
=
¡¡ 
Items
¡¡ $
}
¬¬ 
;
¬¬ 
}
√√ 
else
ƒƒ 
{
≈≈ 
return
∆∆ 
new
∆∆  
RepositoryResponse
∆∆ 1
<
∆∆1 2
List
∆∆2 6
<
∆∆6 7
TModel
∆∆7 =
>
∆∆= >
>
∆∆> ?
(
∆∆? @
)
∆∆@ A
{
«« 
	IsSucceed
»» !
=
»»" #
result
»»$ *
,
»»* +
Data
…… 
=
…… 
Items
…… $
}
   
;
   
}
ÀÀ 
}
ÃÃ 
catch
ÕÕ 
(
ÕÕ 
	Exception
ÕÕ 
ex
ÕÕ 
)
ÕÕ  
{
ŒŒ 
return
œœ 
UnitOfWorkHelper
œœ '
<
œœ' (

TDbContext
œœ( 2
>
œœ2 3
.
œœ3 4
HandleException
œœ4 C
<
œœC D
List
œœD H
<
œœH I
TModel
œœI O
>
œœO P
>
œœP Q
(
œœQ R
ex
œœR T
,
œœT U
isRoot
œœV \
,
œœ\ ]
transaction
œœ^ i
)
œœi j
;
œœj k
}
–– 
finally
—— 
{
““ 
if
”” 
(
”” 
isRoot
”” 
)
”” 
{
‘‘ 
context
÷÷ 
.
÷÷ 
Dispose
÷÷ #
(
÷÷# $
)
÷÷$ %
;
÷÷% &
}
◊◊ 
}
ÿÿ 
}
ŸŸ 	
public
„„ 
virtual
„„ 
async
„„ 
Task
„„ !
<
„„! " 
RepositoryResponse
„„" 4
<
„„4 5
List
„„5 9
<
„„9 :
TModel
„„: @
>
„„@ A
>
„„A B
>
„„B C"
RemoveListModelAsync
„„D X
(
„„X Y

Expression
„„Y c
<
„„c d
Func
„„d h
<
„„h i
TModel
„„i o
,
„„o p
bool
„„q u
>
„„u v
>
„„v w
	predicate„„x Å
,
‰‰ 	

TDbContext
‰‰
 
_context
‰‰ 
=
‰‰ 
null
‰‰  $
,
‰‰$ %#
IDbContextTransaction
‰‰& ;
_transaction
‰‰< H
=
‰‰I J
null
‰‰K O
)
‰‰O P
{
ÂÂ 	
UnitOfWorkHelper
ÊÊ 
<
ÊÊ 

TDbContext
ÊÊ '
>
ÊÊ' (
.
ÊÊ( )
InitTransaction
ÊÊ) 8
(
ÊÊ8 9
_context
ÊÊ9 A
,
ÊÊA B
_transaction
ÊÊC O
,
ÊÊO P
out
ÊÊQ T

TDbContext
ÊÊU _
context
ÊÊ` g
,
ÊÊg h
out
ÊÊi l$
IDbContextTransactionÊÊm Ç
transactionÊÊÉ é
,ÊÊé è
outÊÊê ì
boolÊÊî ò
isRootÊÊô ü
)ÊÊü †
;ÊÊ† °
try
ÁÁ 
{
ËË 
var
ÈÈ 
Items
ÈÈ 
=
ÈÈ 
await
ÈÈ !
context
ÈÈ" )
.
ÈÈ) *
Set
ÈÈ* -
<
ÈÈ- .
TModel
ÈÈ. 4
>
ÈÈ4 5
(
ÈÈ5 6
)
ÈÈ6 7
.
ÈÈ7 8
Where
ÈÈ8 =
(
ÈÈ= >
	predicate
ÈÈ> G
)
ÈÈG H
.
ÈÈH I
ToListAsync
ÈÈI T
(
ÈÈT U
)
ÈÈU V
.
ÈÈV W
ConfigureAwait
ÈÈW e
(
ÈÈe f
false
ÈÈf k
)
ÈÈk l
;
ÈÈl m
bool
ÍÍ 
result
ÍÍ 
=
ÍÍ 
true
ÍÍ "
;
ÍÍ" #
if
ÎÎ 
(
ÎÎ 
Items
ÎÎ 
!=
ÎÎ 
null
ÎÎ !
)
ÎÎ! "
{
ÏÏ 
foreach
ÌÌ 
(
ÌÌ 
var
ÌÌ  
model
ÌÌ! &
in
ÌÌ' )
Items
ÌÌ* /
)
ÌÌ/ 0
{
ÓÓ 
if
ÔÔ 
(
ÔÔ 
result
ÔÔ "
)
ÔÔ" #
{
 
var
ÒÒ 
r
ÒÒ  !
=
ÒÒ" #
await
ÒÒ$ )
RemoveModelAsync
ÒÒ* :
(
ÒÒ: ;
model
ÒÒ; @
,
ÒÒ@ A
context
ÒÒB I
,
ÒÒI J
transaction
ÒÒK V
)
ÒÒV W
.
ÒÒW X
ConfigureAwait
ÒÒX f
(
ÒÒf g
false
ÒÒg l
)
ÒÒl m
;
ÒÒm n
result
ÚÚ "
=
ÚÚ# $
result
ÚÚ% +
&&
ÚÚ, .
r
ÚÚ/ 0
.
ÚÚ0 1
	IsSucceed
ÚÚ1 :
;
ÚÚ: ;
}
ÛÛ 
else
ÙÙ 
{
ıı 
break
ˆˆ !
;
ˆˆ! "
}
˜˜ 
}
¯¯ 
UnitOfWorkHelper
˙˙ $
<
˙˙$ %

TDbContext
˙˙% /
>
˙˙/ 0
.
˙˙0 1
HandleTransaction
˙˙1 B
(
˙˙B C
result
˙˙C I
,
˙˙I J
isRoot
˙˙K Q
,
˙˙Q R
transaction
˙˙S ^
)
˙˙^ _
;
˙˙_ `
return
¸¸ 
new
¸¸  
RepositoryResponse
¸¸ 1
<
¸¸1 2
List
¸¸2 6
<
¸¸6 7
TModel
¸¸7 =
>
¸¸= >
>
¸¸> ?
(
¸¸? @
)
¸¸@ A
{
˝˝ 
	IsSucceed
˛˛ !
=
˛˛" #
result
˛˛$ *
,
˛˛* +
Data
ˇˇ 
=
ˇˇ 
Items
ˇˇ $
}
ÄÄ 
;
ÄÄ 
}
ÅÅ 
else
ÇÇ 
{
ÉÉ 
return
ÑÑ 
new
ÑÑ  
RepositoryResponse
ÑÑ 1
<
ÑÑ1 2
List
ÑÑ2 6
<
ÑÑ6 7
TModel
ÑÑ7 =
>
ÑÑ= >
>
ÑÑ> ?
(
ÑÑ? @
)
ÑÑ@ A
{
ÖÖ 
	IsSucceed
ÜÜ !
=
ÜÜ" #
true
ÜÜ$ (
,
ÜÜ( )
Data
áá 
=
áá 
Items
áá $
}
àà 
;
àà 
}
ââ 
}
ää 
catch
ãã 
(
ãã 
	Exception
ãã 
ex
ãã 
)
ãã  
{
åå 
return
çç 
UnitOfWorkHelper
çç '
<
çç' (

TDbContext
çç( 2
>
çç2 3
.
çç3 4
HandleException
çç4 C
<
ççC D
List
ççD H
<
ççH I
TModel
ççI O
>
ççO P
>
ççP Q
(
ççQ R
ex
ççR T
,
ççT U
isRoot
ççV \
,
çç\ ]
transaction
çç^ i
)
ççi j
;
ççj k
}
éé 
finally
èè 
{
êê 
if
ëë 
(
ëë 
isRoot
ëë 
)
ëë 
{
íí 
context
îî 
.
îî 
Dispose
îî #
(
îî# $
)
îî$ %
;
îî% &
}
ïï 
}
ññ 
}
óó 	
public
°° 
virtual
°°  
RepositoryResponse
°° )
<
°°) *
TModel
°°* 0
>
°°0 1
RemoveModel
°°2 =
(
°°= >

Expression
°°> H
<
°°H I
Func
°°I M
<
°°M N
TModel
°°N T
,
°°T U
bool
°°V Z
>
°°Z [
>
°°[ \
	predicate
°°] f
,
°°f g

TDbContext
°°h r
_context
°°s {
=
°°| }
null°°~ Ç
,°°Ç É%
IDbContextTransaction°°Ñ ô
_transaction°°ö ¶
=°°ß ®
null°°© ≠
)°°≠ Æ
{
¢¢ 	
UnitOfWorkHelper
££ 
<
££ 

TDbContext
££ '
>
££' (
.
££( )
InitTransaction
££) 8
(
££8 9
_context
££9 A
,
££A B
_transaction
££C O
,
££O P
out
££Q T

TDbContext
££U _
context
££` g
,
££g h
out
££i l$
IDbContextTransaction££m Ç
transaction££É é
,££é è
out££ê ì
bool££î ò
isRoot££ô ü
)££ü †
;££† °
try
§§ 
{
•• 
TModel
¶¶ 
model
¶¶ 
=
¶¶ 
context
¶¶ &
.
¶¶& '
Set
¶¶' *
<
¶¶* +
TModel
¶¶+ 1
>
¶¶1 2
(
¶¶2 3
)
¶¶3 4
.
¶¶4 5
FirstOrDefault
¶¶5 C
(
¶¶C D
	predicate
¶¶D M
)
¶¶M N
;
¶¶N O
bool
ßß 
result
ßß 
=
ßß 
true
ßß "
;
ßß" #
if
®® 
(
®® 
model
®® 
!=
®® 
null
®® !
&&
®®" $
CheckIsExists
®®% 2
(
®®2 3
model
®®3 8
,
®®8 9
context
®®: A
,
®®A B
transaction
®®C N
)
®®N O
)
®®O P
{
©© 
context
™™ 
.
™™ 
Entry
™™ !
(
™™! "
model
™™" '
)
™™' (
.
™™( )
State
™™) .
=
™™/ 0
EntityState
™™1 <
.
™™< =
Deleted
™™= D
;
™™D E
result
´´ 
=
´´ 
context
´´ $
.
´´$ %
SaveChanges
´´% 0
(
´´0 1
)
´´1 2
>
´´3 4
$num
´´5 6
;
´´6 7
}
¨¨ 
UnitOfWorkHelper
ÆÆ  
<
ÆÆ  !

TDbContext
ÆÆ! +
>
ÆÆ+ ,
.
ÆÆ, -
HandleTransaction
ÆÆ- >
(
ÆÆ> ?
result
ÆÆ? E
,
ÆÆE F
isRoot
ÆÆG M
,
ÆÆM N
transaction
ÆÆO Z
)
ÆÆZ [
;
ÆÆ[ \
return
∞∞ 
new
∞∞  
RepositoryResponse
∞∞ -
<
∞∞- .
TModel
∞∞. 4
>
∞∞4 5
(
∞∞5 6
)
∞∞6 7
{
±± 
	IsSucceed
≤≤ 
=
≤≤ 
result
≤≤  &
,
≤≤& '
Data
≥≥ 
=
≥≥ 
model
≥≥  
}
¥¥ 
;
¥¥ 
}
µµ 
catch
∂∂ 
(
∂∂ 
	Exception
∂∂ 
ex
∂∂ 
)
∂∂  
{
∑∑ 
return
∏∏ 
UnitOfWorkHelper
∏∏ '
<
∏∏' (

TDbContext
∏∏( 2
>
∏∏2 3
.
∏∏3 4
HandleException
∏∏4 C
<
∏∏C D
TModel
∏∏D J
>
∏∏J K
(
∏∏K L
ex
∏∏L N
,
∏∏N O
isRoot
∏∏P V
,
∏∏V W
transaction
∏∏X c
)
∏∏c d
;
∏∏d e
}
ππ 
finally
∫∫ 
{
ªª 
if
ºº 
(
ºº 
isRoot
ºº 
)
ºº 
{
ΩΩ 
context
øø 
.
øø 
Dispose
øø #
(
øø# $
)
øø$ %
;
øø% &
}
¿¿ 
}
¡¡ 
}
¬¬ 	
public
ÃÃ 
virtual
ÃÃ  
RepositoryResponse
ÃÃ )
<
ÃÃ) *
TModel
ÃÃ* 0
>
ÃÃ0 1
RemoveModel
ÃÃ2 =
(
ÃÃ= >
TModel
ÃÃ> D
model
ÃÃE J
,
ÃÃJ K

TDbContext
ÃÃL V
_context
ÃÃW _
=
ÃÃ` a
null
ÃÃb f
,
ÃÃf g#
IDbContextTransaction
ÃÃh }
_transactionÃÃ~ ä
=ÃÃã å
nullÃÃç ë
)ÃÃë í
{
ÕÕ 	
UnitOfWorkHelper
ŒŒ 
<
ŒŒ 

TDbContext
ŒŒ '
>
ŒŒ' (
.
ŒŒ( )
InitTransaction
ŒŒ) 8
(
ŒŒ8 9
_context
ŒŒ9 A
,
ŒŒA B
_transaction
ŒŒC O
,
ŒŒO P
out
ŒŒQ T

TDbContext
ŒŒU _
context
ŒŒ` g
,
ŒŒg h
out
ŒŒi l$
IDbContextTransactionŒŒm Ç
transactionŒŒÉ é
,ŒŒé è
outŒŒê ì
boolŒŒî ò
isRootŒŒô ü
)ŒŒü †
;ŒŒ† °
try
œœ 
{
–– 
bool
—— 
result
—— 
=
—— 
true
—— "
;
——" #
if
““ 
(
““ 
model
““ 
!=
““ 
null
““ !
&&
““" $
CheckIsExists
““% 2
(
““2 3
model
““3 8
,
““8 9
context
““: A
,
““A B
transaction
““C N
)
““N O
)
““O P
{
”” 
context
‘‘ 
.
‘‘ 
Entry
‘‘ !
(
‘‘! "
model
‘‘" '
)
‘‘' (
.
‘‘( )
State
‘‘) .
=
‘‘/ 0
EntityState
‘‘1 <
.
‘‘< =
Deleted
‘‘= D
;
‘‘D E
result
’’ 
=
’’ 
context
’’ $
.
’’$ %
SaveChanges
’’% 0
(
’’0 1
)
’’1 2
>
’’3 4
$num
’’5 6
;
’’6 7
}
÷÷ 
UnitOfWorkHelper
ÿÿ  
<
ÿÿ  !

TDbContext
ÿÿ! +
>
ÿÿ+ ,
.
ÿÿ, -
HandleTransaction
ÿÿ- >
(
ÿÿ> ?
result
ÿÿ? E
,
ÿÿE F
isRoot
ÿÿG M
,
ÿÿM N
transaction
ÿÿO Z
)
ÿÿZ [
;
ÿÿ[ \
return
⁄⁄ 
new
⁄⁄  
RepositoryResponse
⁄⁄ -
<
⁄⁄- .
TModel
⁄⁄. 4
>
⁄⁄4 5
(
⁄⁄5 6
)
⁄⁄6 7
{
€€ 
	IsSucceed
‹‹ 
=
‹‹ 
result
‹‹  &
,
‹‹& '
Data
›› 
=
›› 
model
››  
}
ﬁﬁ 
;
ﬁﬁ 
}
ﬂﬂ 
catch
‡‡ 
(
‡‡ 
	Exception
‡‡ 
ex
‡‡ 
)
‡‡  
{
·· 
return
‚‚ 
UnitOfWorkHelper
‚‚ '
<
‚‚' (

TDbContext
‚‚( 2
>
‚‚2 3
.
‚‚3 4
HandleException
‚‚4 C
<
‚‚C D
TModel
‚‚D J
>
‚‚J K
(
‚‚K L
ex
‚‚L N
,
‚‚N O
isRoot
‚‚P V
,
‚‚V W
transaction
‚‚X c
)
‚‚c d
;
‚‚d e
}
„„ 
finally
‰‰ 
{
ÂÂ 
if
ÊÊ 
(
ÊÊ 
isRoot
ÊÊ 
)
ÊÊ 
{
ÁÁ 
context
ÈÈ 
.
ÈÈ 
Dispose
ÈÈ #
(
ÈÈ# $
)
ÈÈ$ %
;
ÈÈ% &
}
ÍÍ 
}
ÎÎ 
}
ÏÏ 	
public
ˆˆ 
virtual
ˆˆ 
async
ˆˆ 
Task
ˆˆ !
<
ˆˆ! " 
RepositoryResponse
ˆˆ" 4
<
ˆˆ4 5
TModel
ˆˆ5 ;
>
ˆˆ; <
>
ˆˆ< =
RemoveModelAsync
ˆˆ> N
(
ˆˆN O

Expression
ˆˆO Y
<
ˆˆY Z
Func
ˆˆZ ^
<
ˆˆ^ _
TModel
ˆˆ_ e
,
ˆˆe f
bool
ˆˆg k
>
ˆˆk l
>
ˆˆl m
	predicate
ˆˆn w
,
ˆˆw x

TDbContextˆˆy É
_contextˆˆÑ å
=ˆˆç é
nullˆˆè ì
,ˆˆì î%
IDbContextTransactionˆˆï ™
_transactionˆˆ´ ∑
=ˆˆ∏ π
nullˆˆ∫ æ
)ˆˆæ ø
{
˜˜ 	
UnitOfWorkHelper
¯¯ 
<
¯¯ 

TDbContext
¯¯ '
>
¯¯' (
.
¯¯( )
InitTransaction
¯¯) 8
(
¯¯8 9
_context
¯¯9 A
,
¯¯A B
_transaction
¯¯C O
,
¯¯O P
out
¯¯Q T

TDbContext
¯¯U _
context
¯¯` g
,
¯¯g h
out
¯¯i l$
IDbContextTransaction¯¯m Ç
transaction¯¯É é
,¯¯é è
out¯¯ê ì
bool¯¯î ò
isRoot¯¯ô ü
)¯¯ü †
;¯¯† °
try
˘˘ 
{
˙˙ 
TModel
˚˚ 
model
˚˚ 
=
˚˚ 
await
˚˚ $
context
˚˚% ,
.
˚˚, -
Set
˚˚- 0
<
˚˚0 1
TModel
˚˚1 7
>
˚˚7 8
(
˚˚8 9
)
˚˚9 :
.
˚˚: ;!
FirstOrDefaultAsync
˚˚; N
(
˚˚N O
	predicate
˚˚O X
)
˚˚X Y
.
˚˚Y Z
ConfigureAwait
˚˚Z h
(
˚˚h i
false
˚˚i n
)
˚˚n o
;
˚˚o p
bool
¸¸ 
result
¸¸ 
=
¸¸ 
true
¸¸ "
;
¸¸" #
if
˝˝ 
(
˝˝ 
model
˝˝ 
!=
˝˝ 
null
˝˝ !
&&
˝˝" $
CheckIsExists
˝˝% 2
(
˝˝2 3
model
˝˝3 8
,
˝˝8 9
context
˝˝: A
,
˝˝A B
transaction
˝˝C N
)
˝˝N O
)
˝˝O P
{
˛˛ 
context
ˇˇ 
.
ˇˇ 
Entry
ˇˇ !
(
ˇˇ! "
model
ˇˇ" '
)
ˇˇ' (
.
ˇˇ( )
State
ˇˇ) .
=
ˇˇ/ 0
EntityState
ˇˇ1 <
.
ˇˇ< =
Deleted
ˇˇ= D
;
ˇˇD E
result
Ä	Ä	 
=
Ä	Ä	 
await
Ä	Ä	 "
context
Ä	Ä	# *
.
Ä	Ä	* +
SaveChangesAsync
Ä	Ä	+ ;
(
Ä	Ä	; <
)
Ä	Ä	< =
.
Ä	Ä	= >
ConfigureAwait
Ä	Ä	> L
(
Ä	Ä	L M
false
Ä	Ä	M R
)
Ä	Ä	R S
>
Ä	Ä	T U
$num
Ä	Ä	V W
;
Ä	Ä	W X
}
Å	Å	 
UnitOfWorkHelper
É	É	  
<
É	É	  !

TDbContext
É	É	! +
>
É	É	+ ,
.
É	É	, -
HandleTransaction
É	É	- >
(
É	É	> ?
result
É	É	? E
,
É	É	E F
isRoot
É	É	G M
,
É	É	M N
transaction
É	É	O Z
)
É	É	Z [
;
É	É	[ \
return
Ö	Ö	 
new
Ö	Ö	  
RepositoryResponse
Ö	Ö	 -
<
Ö	Ö	- .
TModel
Ö	Ö	. 4
>
Ö	Ö	4 5
(
Ö	Ö	5 6
)
Ö	Ö	6 7
{
Ü	Ü	 
	IsSucceed
á	á	 
=
á	á	 
result
á	á	  &
,
á	á	& '
Data
à	à	 
=
à	à	 
model
à	à	  
}
â	â	 
;
â	â	 
}
ä	ä	 
catch
ã	ã	 
(
ã	ã	 
	Exception
ã	ã	 
ex
ã	ã	 
)
ã	ã	  
{
å	å	 
return
ç	ç	 
UnitOfWorkHelper
ç	ç	 '
<
ç	ç	' (

TDbContext
ç	ç	( 2
>
ç	ç	2 3
.
ç	ç	3 4
HandleException
ç	ç	4 C
<
ç	ç	C D
TModel
ç	ç	D J
>
ç	ç	J K
(
ç	ç	K L
ex
ç	ç	L N
,
ç	ç	N O
isRoot
ç	ç	P V
,
ç	ç	V W
transaction
ç	ç	X c
)
ç	ç	c d
;
ç	ç	d e
}
é	é	 
finally
è	è	 
{
ê	ê	 
if
ë	ë	 
(
ë	ë	 
isRoot
ë	ë	 
)
ë	ë	 
{
í	í	 
context
î	î	 
.
î	î	 
Dispose
î	î	 #
(
î	î	# $
)
î	î	$ %
;
î	î	% &
}
ï	ï	 
}
ñ	ñ	 
}
ó	ó	 	
public
°	°	 
virtual
°	°	 
async
°	°	 
Task
°	°	 !
<
°	°	! " 
RepositoryResponse
°	°	" 4
<
°	°	4 5
TModel
°	°	5 ;
>
°	°	; <
>
°	°	< =
RemoveModelAsync
°	°	> N
(
°	°	N O
TModel
°	°	O U
model
°	°	V [
,
°	°	[ \

TDbContext
°	°	] g
_context
°	°	h p
=
°	°	q r
null
°	°	s w
,
°	°	w x$
IDbContextTransaction°	°	y é
_transaction°	°	è õ
=°	°	ú ù
null°	°	û ¢
)°	°	¢ £
{
¢	¢	 	
UnitOfWorkHelper
£	£	 
<
£	£	 

TDbContext
£	£	 '
>
£	£	' (
.
£	£	( )
InitTransaction
£	£	) 8
(
£	£	8 9
_context
£	£	9 A
,
£	£	A B
_transaction
£	£	C O
,
£	£	O P
out
£	£	Q T

TDbContext
£	£	U _
context
£	£	` g
,
£	£	g h
out
£	£	i l$
IDbContextTransaction£	£	m Ç
transaction£	£	É é
,£	£	é è
out£	£	ê ì
bool£	£	î ò
isRoot£	£	ô ü
)£	£	ü †
;£	£	† °
try
§	§	 
{
•	•	 
bool
¶	¶	 
result
¶	¶	 
=
¶	¶	 
true
¶	¶	 "
;
¶	¶	" #
if
ß	ß	 
(
ß	ß	 
model
ß	ß	 
!=
ß	ß	 
null
ß	ß	 !
&&
ß	ß	" $
CheckIsExists
ß	ß	% 2
(
ß	ß	2 3
model
ß	ß	3 8
,
ß	ß	8 9
context
ß	ß	: A
,
ß	ß	A B
transaction
ß	ß	C N
)
ß	ß	N O
)
ß	ß	O P
{
®	®	 
context
©	©	 
.
©	©	 
Entry
©	©	 !
(
©	©	! "
model
©	©	" '
)
©	©	' (
.
©	©	( )
State
©	©	) .
=
©	©	/ 0
EntityState
©	©	1 <
.
©	©	< =
Deleted
©	©	= D
;
©	©	D E
result
™	™	 
=
™	™	 
await
™	™	 "
context
™	™	# *
.
™	™	* +
SaveChangesAsync
™	™	+ ;
(
™	™	; <
)
™	™	< =
.
™	™	= >
ConfigureAwait
™	™	> L
(
™	™	L M
false
™	™	M R
)
™	™	R S
>
™	™	T U
$num
™	™	V W
;
™	™	W X
}
´	´	 
UnitOfWorkHelper
≠	≠	  
<
≠	≠	  !

TDbContext
≠	≠	! +
>
≠	≠	+ ,
.
≠	≠	, -
HandleTransaction
≠	≠	- >
(
≠	≠	> ?
result
≠	≠	? E
,
≠	≠	E F
isRoot
≠	≠	G M
,
≠	≠	M N
transaction
≠	≠	O Z
)
≠	≠	Z [
;
≠	≠	[ \
return
Ø	Ø	 
new
Ø	Ø	  
RepositoryResponse
Ø	Ø	 -
<
Ø	Ø	- .
TModel
Ø	Ø	. 4
>
Ø	Ø	4 5
(
Ø	Ø	5 6
)
Ø	Ø	6 7
{
∞	∞	 
	IsSucceed
±	±	 
=
±	±	 
result
±	±	  &
,
±	±	& '
Data
≤	≤	 
=
≤	≤	 
model
≤	≤	  
}
≥	≥	 
;
≥	≥	 
}
¥	¥	 
catch
µ	µ	 
(
µ	µ	 
	Exception
µ	µ	 
ex
µ	µ	 
)
µ	µ	  
{
∂	∂	 
return
∑	∑	 
UnitOfWorkHelper
∑	∑	 '
<
∑	∑	' (

TDbContext
∑	∑	( 2
>
∑	∑	2 3
.
∑	∑	3 4
HandleException
∑	∑	4 C
<
∑	∑	C D
TModel
∑	∑	D J
>
∑	∑	J K
(
∑	∑	K L
ex
∑	∑	L N
,
∑	∑	N O
isRoot
∑	∑	P V
,
∑	∑	V W
transaction
∑	∑	X c
)
∑	∑	c d
;
∑	∑	d e
}
∏	∏	 
finally
π	π	 
{
∫	∫	 
if
ª	ª	 
(
ª	ª	 
isRoot
ª	ª	 
)
ª	ª	 
{
º	º	 
context
æ	æ	 
.
æ	æ	 
Dispose
æ	æ	 #
(
æ	æ	# $
)
æ	æ	$ %
;
æ	æ	% &
}
ø	ø	 
}
¿	¿	 
}
¡	¡	 	
public
À	À	 
virtual
À	À	  
RepositoryResponse
À	À	 )
<
À	À	) *
TView
À	À	* /
>
À	À	/ 0
	SaveModel
À	À	1 :
(
À	À	: ;
TView
À	À	; @
view
À	À	A E
,
À	À	E F
bool
À	À	G K
isSaveSubModels
À	À	L [
=
À	À	\ ]
false
À	À	^ c
,
Ã	Ã	 	

TDbContext
Ã	Ã	
 
_context
Ã	Ã	 
=
Ã	Ã	 
null
Ã	Ã	  $
,
Ã	Ã	$ %#
IDbContextTransaction
Ã	Ã	& ;
_transaction
Ã	Ã	< H
=
Ã	Ã	I J
null
Ã	Ã	K O
)
Ã	Ã	O P
{
Õ	Õ	 	
if
Œ	Œ	 
(
Œ	Œ	 
CheckIsExists
Œ	Œ	 
(
Œ	Œ	 
view
Œ	Œ	 "
.
Œ	Œ	" #
Model
Œ	Œ	# (
,
Œ	Œ	( )
_context
Œ	Œ	* 2
,
Œ	Œ	2 3
_transaction
Œ	Œ	4 @
)
Œ	Œ	@ A
)
Œ	Œ	A B
{
œ	œ	 
return
–	–	 
	EditModel
–	–	  
(
–	–	  !
view
–	–	! %
,
–	–	% &
_context
–	–	' /
,
–	–	/ 0
_transaction
–	–	1 =
)
–	–	= >
;
–	–	> ?
}
—	—	 
else
“	“	 
{
”	”	 
return
‘	‘	 
CreateModel
‘	‘	 "
(
‘	‘	" #
view
‘	‘	# '
,
‘	‘	' (
_context
‘	‘	) 1
,
‘	‘	1 2
_transaction
‘	‘	3 ?
)
‘	‘	? @
;
‘	‘	@ A
}
’	’	 
}
÷	÷	 	
public
‡	‡	 
virtual
‡	‡	 
Task
‡	‡	 
<
‡	‡	  
RepositoryResponse
‡	‡	 .
<
‡	‡	. /
TView
‡	‡	/ 4
>
‡	‡	4 5
>
‡	‡	5 6
SaveModelAsync
‡	‡	7 E
(
‡	‡	E F
TView
‡	‡	F K
view
‡	‡	L P
,
‡	‡	P Q
bool
‡	‡	R V
isSaveSubModels
‡	‡	W f
=
‡	‡	g h
false
‡	‡	i n
,
·	·	 	

TDbContext
·	·	
 
_context
·	·	 
=
·	·	 
null
·	·	  $
,
·	·	$ %#
IDbContextTransaction
·	·	& ;
_transaction
·	·	< H
=
·	·	I J
null
·	·	K O
)
·	·	O P
{
‚	‚	 	
if
„	„	 
(
„	„	 
CheckIsExists
„	„	 
(
„	„	 
view
„	„	 "
.
„	„	" #
Model
„	„	# (
,
„	„	( )
_context
„	„	* 2
,
„	„	2 3
_transaction
„	„	4 @
)
„	„	@ A
)
„	„	A B
{
‰	‰	 
return
Â	Â	 
EditModelAsync
Â	Â	 %
(
Â	Â	% &
view
Â	Â	& *
,
Â	Â	* +
_context
Â	Â	, 4
,
Â	Â	4 5
_transaction
Â	Â	6 B
)
Â	Â	B C
;
Â	Â	C D
}
Ê	Ê	 
else
Á	Á	 
{
Ë	Ë	 
return
È	È	 
CreateModelAsync
È	È	 '
(
È	È	' (
view
È	È	( ,
,
È	È	, -
_context
È	È	. 6
,
È	È	6 7
_transaction
È	È	8 D
)
È	È	D E
;
È	È	E F
}
Í	Í	 
}
Î	Î	 	
public
ı	ı	 
virtual
ı	ı	 
Task
ı	ı	 
<
ı	ı	 
bool
ı	ı	  
>
ı	ı	  !
SaveSubModelAsync
ı	ı	" 3
(
ı	ı	3 4
TModel
ı	ı	4 :
model
ı	ı	; @
,
ı	ı	@ A

TDbContext
ı	ı	B L
context
ı	ı	M T
,
ı	ı	T U#
IDbContextTransaction
ı	ı	V k
_transaction
ı	ı	l x
)
ı	ı	x y
{
ˆ	ˆ	 	
throw
˜	˜	 
new
˜	˜	 %
NotImplementedException
˜	˜	 -
(
˜	˜	- .
)
˜	˜	. /
;
˜	˜	/ 0
}
¯	¯	 	
public
É
É
 
virtual
É
É
  
RepositoryResponse
É
É
 )
<
É
É
) *
int
É
É
* -
>
É
É
- .
Max
É
É
/ 2
(
É
É
2 3

Expression
É
É
3 =
<
É
É
= >
Func
É
É
> B
<
É
É
B C
TModel
É
É
C I
,
É
É
I J
int
É
É
K N
>
É
É
N O
>
É
É
O P
	predicate
É
É
Q Z
,
Ñ
Ñ
 	

TDbContext
Ñ
Ñ

 
_context
Ñ
Ñ
 
=
Ñ
Ñ
 
null
Ñ
Ñ
  $
,
Ñ
Ñ
$ %#
IDbContextTransaction
Ñ
Ñ
& ;
_transaction
Ñ
Ñ
< H
=
Ñ
Ñ
I J
null
Ñ
Ñ
K O
)
Ñ
Ñ
O P
{
Ö
Ö
 	
UnitOfWorkHelper
Ü
Ü
 
<
Ü
Ü
 

TDbContext
Ü
Ü
 '
>
Ü
Ü
' (
.
Ü
Ü
( )
InitTransaction
Ü
Ü
) 8
(
Ü
Ü
8 9
_context
Ü
Ü
9 A
,
Ü
Ü
A B
_transaction
Ü
Ü
C O
,
Ü
Ü
O P
out
Ü
Ü
Q T

TDbContext
Ü
Ü
U _
context
Ü
Ü
` g
,
Ü
Ü
g h
out
Ü
Ü
i l$
IDbContextTransactionÜ
Ü
m Ç
transactionÜ
Ü
É é
,Ü
Ü
é è
outÜ
Ü
ê ì
boolÜ
Ü
î ò
isRootÜ
Ü
ô ü
)Ü
Ü
ü †
;Ü
Ü
† °
int
á
á
 
total
á
á
 
=
á
á
 
$num
á
á
 
;
á
á
 
var
à
à
 
result
à
à
 
=
à
à
 
new
à
à
  
RepositoryResponse
à
à
 /
<
à
à
/ 0
int
à
à
0 3
>
à
à
3 4
(
à
à
4 5
)
à
à
5 6
{
â
â
 
	IsSucceed
ä
ä
 
=
ä
ä
 
true
ä
ä
  
,
ä
ä
  !
Data
ã
ã
 
=
ã
ã
 
total
ã
ã
 
}
å
å
 
;
å
å
 
try
ç
ç
 
{
é
é
 
total
è
è
 
=
è
è
 
context
è
è
 
.
è
è
  
Set
è
è
  #
<
è
è
# $
TModel
è
è
$ *
>
è
è
* +
(
è
è
+ ,
)
è
è
, -
.
è
è
- .
Max
è
è
. 1
(
è
è
1 2
	predicate
è
è
2 ;
)
è
è
; <
;
è
è
< =
result
ê
ê
 
.
ê
ê
 
Data
ê
ê
 
=
ê
ê
 
total
ê
ê
 #
;
ê
ê
# $
return
ë
ë
 
result
ë
ë
 
;
ë
ë
 
}
í
í
 
catch
ì
ì
 
(
ì
ì
 
	Exception
ì
ì
 
ex
ì
ì
 
)
ì
ì
  
{
î
î
 
return
ï
ï
 
UnitOfWorkHelper
ï
ï
 '
<
ï
ï
' (

TDbContext
ï
ï
( 2
>
ï
ï
2 3
.
ï
ï
3 4#
HandleObjectException
ï
ï
4 I
<
ï
ï
I J
int
ï
ï
J M
>
ï
ï
M N
(
ï
ï
N O
ex
ï
ï
O Q
,
ï
ï
Q R
isRoot
ï
ï
S Y
,
ï
ï
Y Z
transaction
ï
ï
[ f
)
ï
ï
f g
;
ï
ï
g h
}
ñ
ñ
 
finally
ó
ó
 
{
ò
ò
 
if
ô
ô
 
(
ô
ô
 
isRoot
ô
ô
 
)
ô
ô
 
{
ö
ö
 
context
ú
ú
 
.
ú
ú
 
Dispose
ú
ú
 #
(
ú
ú
# $
)
ú
ú
$ %
;
ú
ú
% &
}
ù
ù
 
}
û
û
 
}
ü
ü
 	
public
®
®
 
virtual
®
®
 
async
®
®
 
Task
®
®
 !
<
®
®
! " 
RepositoryResponse
®
®
" 4
<
®
®
4 5
int
®
®
5 8
>
®
®
8 9
>
®
®
9 :
MaxAsync
®
®
; C
(
®
®
C D

Expression
®
®
D N
<
®
®
N O
Func
®
®
O S
<
®
®
S T
TModel
®
®
T Z
,
®
®
Z [
int
®
®
\ _
>
®
®
_ `
>
®
®
` a
	predicate
®
®
b k
,
©
©
 	

TDbContext
©
©

 
_context
©
©
 
=
©
©
 
null
©
©
  $
,
©
©
$ %#
IDbContextTransaction
©
©
& ;
_transaction
©
©
< H
=
©
©
I J
null
©
©
K O
)
©
©
O P
{
™
™
 	
UnitOfWorkHelper
´
´
 
<
´
´
 

TDbContext
´
´
 '
>
´
´
' (
.
´
´
( )
InitTransaction
´
´
) 8
(
´
´
8 9
_context
´
´
9 A
,
´
´
A B
_transaction
´
´
C O
,
´
´
O P
out
´
´
Q T

TDbContext
´
´
U _
context
´
´
` g
,
´
´
g h
out
´
´
i l$
IDbContextTransaction´
´
m Ç
transaction´
´
É é
,´
´
é è
out´
´
ê ì
bool´
´
î ò
isRoot´
´
ô ü
)´
´
ü †
;´
´
† °
int
¨
¨
 
total
¨
¨
 
=
¨
¨
 
$num
¨
¨
 
;
¨
¨
 
try
≠
≠
 
{
Æ
Æ
 
total
Ø
Ø
 
=
Ø
Ø
 
await
Ø
Ø
 
context
Ø
Ø
 %
.
Ø
Ø
% &
Set
Ø
Ø
& )
<
Ø
Ø
) *
TModel
Ø
Ø
* 0
>
Ø
Ø
0 1
(
Ø
Ø
1 2
)
Ø
Ø
2 3
.
Ø
Ø
3 4
MaxAsync
Ø
Ø
4 <
(
Ø
Ø
< =
	predicate
Ø
Ø
= F
)
Ø
Ø
F G
.
Ø
Ø
G H
ConfigureAwait
Ø
Ø
H V
(
Ø
Ø
V W
false
Ø
Ø
W \
)
Ø
Ø
\ ]
;
Ø
Ø
] ^
return
∞
∞
 
new
∞
∞
  
RepositoryResponse
∞
∞
 -
<
∞
∞
- .
int
∞
∞
. 1
>
∞
∞
1 2
(
∞
∞
2 3
)
∞
∞
3 4
{
±
±
 
	IsSucceed
≤
≤
 
=
≤
≤
 
true
≤
≤
  $
,
≤
≤
$ %
Data
≥
≥
 
=
≥
≥
 
total
≥
≥
  
}
¥
¥
 
;
¥
¥
 
}
µ
µ
 
catch
∂
∂
 
(
∂
∂
 
	Exception
∂
∂
 
ex
∂
∂
 
)
∂
∂
  
{
∑
∑
 
return
∏
∏
 
UnitOfWorkHelper
∏
∏
 '
<
∏
∏
' (

TDbContext
∏
∏
( 2
>
∏
∏
2 3
.
∏
∏
3 4#
HandleObjectException
∏
∏
4 I
<
∏
∏
I J
int
∏
∏
J M
>
∏
∏
M N
(
∏
∏
N O
ex
∏
∏
O Q
,
∏
∏
Q R
isRoot
∏
∏
S Y
,
∏
∏
Y Z
transaction
∏
∏
[ f
)
∏
∏
f g
;
∏
∏
g h
}
π
π
 
finally
∫
∫
 
{
ª
ª
 
if
º
º
 
(
º
º
 
isRoot
º
º
 
)
º
º
 
{
Ω
Ω
 
context
ø
ø
 
.
ø
ø
 
Dispose
ø
ø
 #
(
ø
ø
# $
)
ø
ø
$ %
;
ø
ø
% &
}
¿
¿
 
}
¡
¡
 
}
¬
¬
 	
public
œ
œ
 
virtual
œ
œ
  
RepositoryResponse
œ
œ
 )
<
œ
œ
) *
int
œ
œ
* -
>
œ
œ
- .
Count
œ
œ
/ 4
(
œ
œ
4 5

Expression
œ
œ
5 ?
<
œ
œ
? @
Func
œ
œ
@ D
<
œ
œ
D E
TModel
œ
œ
E K
,
œ
œ
K L
bool
œ
œ
M Q
>
œ
œ
Q R
>
œ
œ
R S
	predicate
œ
œ
T ]
,
–
–
 	

TDbContext
–
–

 
_context
–
–
 
=
–
–
 
null
–
–
  $
,
–
–
$ %#
IDbContextTransaction
–
–
& ;
_transaction
–
–
< H
=
–
–
I J
null
–
–
K O
)
–
–
O P
{
—
—
 	
UnitOfWorkHelper
“
“
 
<
“
“
 

TDbContext
“
“
 '
>
“
“
' (
.
“
“
( )
InitTransaction
“
“
) 8
(
“
“
8 9
_context
“
“
9 A
,
“
“
A B
_transaction
“
“
C O
,
“
“
O P
out
“
“
Q T

TDbContext
“
“
U _
context
“
“
` g
,
“
“
g h
out
“
“
i l$
IDbContextTransaction“
“
m Ç
transaction“
“
É é
,“
“
é è
out“
“
ê ì
bool“
“
î ò
isRoot“
“
ô ü
)“
“
ü †
;“
“
† °
int
”
”
 
total
”
”
 
=
”
”
 
$num
”
”
 
;
”
”
 
try
‘
‘
 
{
’
’
 
total
÷
÷
 
=
÷
÷
 
context
÷
÷
 
.
÷
÷
  
Set
÷
÷
  #
<
÷
÷
# $
TModel
÷
÷
$ *
>
÷
÷
* +
(
÷
÷
+ ,
)
÷
÷
, -
.
÷
÷
- .
Count
÷
÷
. 3
(
÷
÷
3 4
	predicate
÷
÷
4 =
)
÷
÷
= >
;
÷
÷
> ?
return
◊
◊
 
new
◊
◊
  
RepositoryResponse
◊
◊
 -
<
◊
◊
- .
int
◊
◊
. 1
>
◊
◊
1 2
(
◊
◊
2 3
)
◊
◊
3 4
{
ÿ
ÿ
 
	IsSucceed
Ÿ
Ÿ
 
=
Ÿ
Ÿ
 
true
Ÿ
Ÿ
  $
,
Ÿ
Ÿ
$ %
Data
⁄
⁄
 
=
⁄
⁄
 
total
⁄
⁄
  
}
€
€
 
;
€
€
 
}
‹
‹
 
catch
›
›
 
(
›
›
 
	Exception
›
›
 
ex
›
›
 
)
›
›
  
{
ﬁ
ﬁ
 
return
ﬂ
ﬂ
 
UnitOfWorkHelper
ﬂ
ﬂ
 '
<
ﬂ
ﬂ
' (

TDbContext
ﬂ
ﬂ
( 2
>
ﬂ
ﬂ
2 3
.
ﬂ
ﬂ
3 4#
HandleObjectException
ﬂ
ﬂ
4 I
<
ﬂ
ﬂ
I J
int
ﬂ
ﬂ
J M
>
ﬂ
ﬂ
M N
(
ﬂ
ﬂ
N O
ex
ﬂ
ﬂ
O Q
,
ﬂ
ﬂ
Q R
isRoot
ﬂ
ﬂ
S Y
,
ﬂ
ﬂ
Y Z
transaction
ﬂ
ﬂ
[ f
)
ﬂ
ﬂ
f g
;
ﬂ
ﬂ
g h
}
‡
‡
 
finally
·
·
 
{
‚
‚
 
if
„
„
 
(
„
„
 
isRoot
„
„
 
)
„
„
 
{
‰
‰
 
context
Ê
Ê
 
.
Ê
Ê
 
Dispose
Ê
Ê
 #
(
Ê
Ê
# $
)
Ê
Ê
$ %
;
Ê
Ê
% &
}
Á
Á
 
}
Ë
Ë
 
}
È
È
 	
public
Ú
Ú
 
virtual
Ú
Ú
 
async
Ú
Ú
 
Task
Ú
Ú
 !
<
Ú
Ú
! " 
RepositoryResponse
Ú
Ú
" 4
<
Ú
Ú
4 5
int
Ú
Ú
5 8
>
Ú
Ú
8 9
>
Ú
Ú
9 :

CountAsync
Ú
Ú
; E
(
Ú
Ú
E F

Expression
Ú
Ú
F P
<
Ú
Ú
P Q
Func
Ú
Ú
Q U
<
Ú
Ú
U V
TModel
Ú
Ú
V \
,
Ú
Ú
\ ]
bool
Ú
Ú
^ b
>
Ú
Ú
b c
>
Ú
Ú
c d
	predicate
Ú
Ú
e n
,
Û
Û
 	

TDbContext
Û
Û

 
_context
Û
Û
 
=
Û
Û
 
null
Û
Û
  $
,
Û
Û
$ %#
IDbContextTransaction
Û
Û
& ;
_transaction
Û
Û
< H
=
Û
Û
I J
null
Û
Û
K O
)
Û
Û
O P
{
Ù
Ù
 	
UnitOfWorkHelper
ı
ı
 
<
ı
ı
 

TDbContext
ı
ı
 '
>
ı
ı
' (
.
ı
ı
( )
InitTransaction
ı
ı
) 8
(
ı
ı
8 9
_context
ı
ı
9 A
,
ı
ı
A B
_transaction
ı
ı
C O
,
ı
ı
O P
out
ı
ı
Q T

TDbContext
ı
ı
U _
context
ı
ı
` g
,
ı
ı
g h
out
ı
ı
i l$
IDbContextTransactionı
ı
m Ç
transactionı
ı
É é
,ı
ı
é è
outı
ı
ê ì
boolı
ı
î ò
isRootı
ı
ô ü
)ı
ı
ü †
;ı
ı
† °
int
ˆ
ˆ
 
total
ˆ
ˆ
 
=
ˆ
ˆ
 
$num
ˆ
ˆ
 
;
ˆ
ˆ
 
try
˜
˜
 
{
¯
¯
 
total
˘
˘
 
=
˘
˘
 
await
˘
˘
 
context
˘
˘
 %
.
˘
˘
% &
Set
˘
˘
& )
<
˘
˘
) *
TModel
˘
˘
* 0
>
˘
˘
0 1
(
˘
˘
1 2
)
˘
˘
2 3
.
˘
˘
3 4

CountAsync
˘
˘
4 >
(
˘
˘
> ?
	predicate
˘
˘
? H
)
˘
˘
H I
.
˘
˘
I J
ConfigureAwait
˘
˘
J X
(
˘
˘
X Y
false
˘
˘
Y ^
)
˘
˘
^ _
;
˘
˘
_ `
return
˙
˙
 
new
˙
˙
  
RepositoryResponse
˙
˙
 -
<
˙
˙
- .
int
˙
˙
. 1
>
˙
˙
1 2
(
˙
˙
2 3
)
˙
˙
3 4
{
˚
˚
 
	IsSucceed
¸
¸
 
=
¸
¸
 
true
¸
¸
  $
,
¸
¸
$ %
Data
˝
˝
 
=
˝
˝
 
total
˝
˝
  
}
˛
˛
 
;
˛
˛
 
}
ˇ
ˇ
 
catch
ÄÄ 
(
ÄÄ 
	Exception
ÄÄ 
ex
ÄÄ 
)
ÄÄ  
{
ÅÅ 
UnitOfWorkHelper
ÇÇ  
<
ÇÇ  !

TDbContext
ÇÇ! +
>
ÇÇ+ ,
.
ÇÇ, -
HandleException
ÇÇ- <
<
ÇÇ< =
List
ÇÇ= A
<
ÇÇA B
TModel
ÇÇB H
>
ÇÇH I
>
ÇÇI J
(
ÇÇJ K
ex
ÇÇK M
,
ÇÇM N
isRoot
ÇÇO U
,
ÇÇU V
transaction
ÇÇW b
)
ÇÇb c
;
ÇÇc d
return
ÉÉ 
new
ÉÉ  
RepositoryResponse
ÉÉ -
<
ÉÉ- .
int
ÉÉ. 1
>
ÉÉ1 2
(
ÉÉ2 3
)
ÉÉ3 4
{
ÑÑ 
	IsSucceed
ÖÖ 
=
ÖÖ 
true
ÖÖ  $
,
ÖÖ$ %
Data
ÜÜ 
=
ÜÜ 
total
ÜÜ  
}
áá 
;
áá 
}
àà 
finally
ââ 
{
ää 
if
ãã 
(
ãã 
isRoot
ãã 
)
ãã 
{
åå 
context
éé 
.
éé 
Dispose
éé #
(
éé# $
)
éé$ %
;
éé% &
}
èè 
}
êê 
}
ëë 	
public
ùù 
virtual
ùù  
RepositoryResponse
ùù )
<
ùù) *
int
ùù* -
>
ùù- .
Count
ùù/ 4
(
ùù4 5

TDbContext
ùù5 ?
_context
ùù@ H
=
ùùI J
null
ùùK O
,
ùùO P#
IDbContextTransaction
ùùQ f
_transaction
ùùg s
=
ùùt u
null
ùùv z
)
ùùz {
{
ûû 	
UnitOfWorkHelper
üü 
<
üü 

TDbContext
üü '
>
üü' (
.
üü( )
InitTransaction
üü) 8
(
üü8 9
_context
üü9 A
,
üüA B
_transaction
üüC O
,
üüO P
out
üüQ T

TDbContext
üüU _
context
üü` g
,
üüg h
out
üüi l$
IDbContextTransactionüüm Ç
transactionüüÉ é
,üüé è
outüüê ì
boolüüî ò
isRootüüô ü
)üüü †
;üü† °
int
†† 
total
†† 
=
†† 
$num
†† 
;
†† 
try
°° 
{
¢¢ 
total
££ 
=
££ 
context
££ 
.
££  
Set
££  #
<
££# $
TModel
££$ *
>
££* +
(
££+ ,
)
££, -
.
££- .
Count
££. 3
(
££3 4
)
££4 5
;
££5 6
return
§§ 
new
§§  
RepositoryResponse
§§ -
<
§§- .
int
§§. 1
>
§§1 2
(
§§2 3
)
§§3 4
{
•• 
	IsSucceed
¶¶ 
=
¶¶ 
true
¶¶  $
,
¶¶$ %
Data
ßß 
=
ßß 
total
ßß  
}
®® 
;
®® 
}
©© 
catch
™™ 
(
™™ 
	Exception
™™ 
ex
™™ 
)
™™  
{
´´ 
return
¨¨ 
UnitOfWorkHelper
¨¨ '
<
¨¨' (

TDbContext
¨¨( 2
>
¨¨2 3
.
¨¨3 4#
HandleObjectException
¨¨4 I
<
¨¨I J
int
¨¨J M
>
¨¨M N
(
¨¨N O
ex
¨¨O Q
,
¨¨Q R
isRoot
¨¨S Y
,
¨¨Y Z
transaction
¨¨[ f
)
¨¨f g
;
¨¨g h
}
≠≠ 
finally
ÆÆ 
{
ØØ 
if
∞∞ 
(
∞∞ 
isRoot
∞∞ 
)
∞∞ 
{
±± 
context
≥≥ 
.
≥≥ 
Dispose
≥≥ #
(
≥≥# $
)
≥≥$ %
;
≥≥% &
}
¥¥ 
}
µµ 
}
∂∂ 	
public
ææ 
virtual
ææ 
async
ææ 
Task
ææ !
<
ææ! " 
RepositoryResponse
ææ" 4
<
ææ4 5
int
ææ5 8
>
ææ8 9
>
ææ9 :

CountAsync
ææ; E
(
ææE F

TDbContext
ææF P
_context
ææQ Y
=
ææZ [
null
ææ\ `
,
ææ` a#
IDbContextTransaction
ææb w
_transactionææx Ñ
=ææÖ Ü
nullææá ã
)ææã å
{
øø 	
UnitOfWorkHelper
¿¿ 
<
¿¿ 

TDbContext
¿¿ '
>
¿¿' (
.
¿¿( )
InitTransaction
¿¿) 8
(
¿¿8 9
_context
¿¿9 A
,
¿¿A B
_transaction
¿¿C O
,
¿¿O P
out
¿¿Q T

TDbContext
¿¿U _
context
¿¿` g
,
¿¿g h
out
¿¿i l$
IDbContextTransaction¿¿m Ç
transaction¿¿É é
,¿¿é è
out¿¿ê ì
bool¿¿î ò
isRoot¿¿ô ü
)¿¿ü †
;¿¿† °
int
¡¡ 
total
¡¡ 
=
¡¡ 
$num
¡¡ 
;
¡¡ 
try
¬¬ 
{
√√ 
total
ƒƒ 
=
ƒƒ 
await
ƒƒ 
context
ƒƒ %
.
ƒƒ% &
Set
ƒƒ& )
<
ƒƒ) *
TModel
ƒƒ* 0
>
ƒƒ0 1
(
ƒƒ1 2
)
ƒƒ2 3
.
ƒƒ3 4

CountAsync
ƒƒ4 >
(
ƒƒ> ?
)
ƒƒ? @
.
ƒƒ@ A
ConfigureAwait
ƒƒA O
(
ƒƒO P
false
ƒƒP U
)
ƒƒU V
;
ƒƒV W
return
≈≈ 
new
≈≈  
RepositoryResponse
≈≈ -
<
≈≈- .
int
≈≈. 1
>
≈≈1 2
(
≈≈2 3
)
≈≈3 4
{
∆∆ 
	IsSucceed
«« 
=
«« 
true
««  $
,
««$ %
Data
»» 
=
»» 
total
»»  
}
…… 
;
…… 
}
   
catch
ÀÀ 
(
ÀÀ 
	Exception
ÀÀ 
ex
ÀÀ 
)
ÀÀ  
{
ÃÃ 
return
ÕÕ 
UnitOfWorkHelper
ÕÕ '
<
ÕÕ' (

TDbContext
ÕÕ( 2
>
ÕÕ2 3
.
ÕÕ3 4#
HandleObjectException
ÕÕ4 I
<
ÕÕI J
int
ÕÕJ M
>
ÕÕM N
(
ÕÕN O
ex
ÕÕO Q
,
ÕÕQ R
isRoot
ÕÕS Y
,
ÕÕY Z
transaction
ÕÕ[ f
)
ÕÕf g
;
ÕÕg h
}
ŒŒ 
finally
œœ 
{
–– 
if
—— 
(
—— 
isRoot
—— 
)
—— 
{
““ 
context
‘‘ 
.
‘‘ 
Dispose
‘‘ #
(
‘‘# $
)
‘‘$ %
;
‘‘% &
}
’’ 
}
÷÷ 
}
◊◊ 	
public
ÂÂ  
RepositoryResponse
ÂÂ !
<
ÂÂ! "
TModel
ÂÂ" (
>
ÂÂ( )
UpdateFields
ÂÂ* 6
(
ÂÂ6 7

Expression
ÂÂ7 A
<
ÂÂA B
Func
ÂÂB F
<
ÂÂF G
TModel
ÂÂG M
,
ÂÂM N
bool
ÂÂO S
>
ÂÂS T
>
ÂÂT U
	predicate
ÂÂV _
,
ÊÊ 	
List
ÊÊ
 
<
ÊÊ 
EntityField
ÊÊ 
>
ÊÊ 
fields
ÊÊ "
,
ÁÁ 	

TDbContext
ÁÁ
 
_context
ÁÁ 
=
ÁÁ 
null
ÁÁ  $
,
ÁÁ$ %#
IDbContextTransaction
ÁÁ& ;
_transaction
ÁÁ< H
=
ÁÁI J
null
ÁÁK O
)
ÁÁO P
{
ËË 	
UnitOfWorkHelper
ÈÈ 
<
ÈÈ 

TDbContext
ÈÈ '
>
ÈÈ' (
.
ÈÈ( )
InitTransaction
ÈÈ) 8
(
ÈÈ8 9
_context
ÈÈ9 A
,
ÈÈA B
_transaction
ÈÈC O
,
ÈÈO P
out
ÈÈQ T

TDbContext
ÈÈU _
context
ÈÈ` g
,
ÈÈg h
out
ÈÈi l$
IDbContextTransactionÈÈm Ç
transactionÈÈÉ é
,ÈÈé è
outÈÈê ì
boolÈÈî ò
isRootÈÈô ü
)ÈÈü †
;ÈÈ† °
try
ÍÍ 
{
ÎÎ 
bool
ÏÏ 
result
ÏÏ 
=
ÏÏ 
false
ÏÏ #
;
ÏÏ# $
TModel
ÌÌ 
model
ÌÌ 
=
ÌÌ 
context
ÌÌ &
.
ÌÌ& '
Set
ÌÌ' *
<
ÌÌ* +
TModel
ÌÌ+ 1
>
ÌÌ1 2
(
ÌÌ2 3
)
ÌÌ3 4
.
ÌÌ4 5
FirstOrDefault
ÌÌ5 C
(
ÌÌC D
	predicate
ÌÌD M
)
ÌÌM N
;
ÌÌN O
if
ÓÓ 
(
ÓÓ 
model
ÓÓ 
!=
ÓÓ 
null
ÓÓ !
)
ÓÓ! "
{
ÔÔ 
foreach
 
(
 
var
  
field
! &
in
' )
fields
* 0
)
0 1
{
ÒÒ 
var
ÚÚ 
lamda
ÚÚ !
=
ÚÚ" #
	GetLambda
ÚÚ$ -
(
ÚÚ- .
field
ÚÚ. 3
.
ÚÚ3 4
PropertyName
ÚÚ4 @
,
ÚÚ@ A
false
ÚÚB G
)
ÚÚG H
;
ÚÚH I
if
ÛÛ 
(
ÛÛ 
lamda
ÛÛ !
!=
ÛÛ" $
null
ÛÛ% )
)
ÛÛ) *
{
ÙÙ 
var
ıı 
prop
ıı  $
=
ıı% &
context
ıı' .
.
ıı. /
Entry
ıı/ 4
(
ıı4 5
model
ıı5 :
)
ıı: ;
.
ıı; <
Property
ıı< D
(
ııD E
field
ııE J
.
ııJ K
PropertyName
ııK W
)
ııW X
;
ııX Y
if
ˆˆ 
(
ˆˆ  
DateTime
ˆˆ  (
.
ˆˆ( )
TryParse
ˆˆ) 1
(
ˆˆ1 2
field
ˆˆ2 7
.
ˆˆ7 8
PropertyValue
ˆˆ8 E
,
ˆˆE F
out
ˆˆG J
DateTime
ˆˆK S
	dateValue
ˆˆT ]
)
ˆˆ] ^
)
ˆˆ^ _
{
˜˜ 
prop
¯¯  $
.
¯¯$ %
CurrentValue
¯¯% 1
=
¯¯2 3
	dateValue
¯¯4 =
;
¯¯= >
}
˘˘ 
else
˙˙  
if
˙˙! #
(
˙˙$ %
int
˙˙% (
.
˙˙( )
TryParse
˙˙) 1
(
˙˙1 2
field
˙˙2 7
.
˙˙7 8
PropertyValue
˙˙8 E
,
˙˙E F
out
˙˙G J
int
˙˙K N
integerValue
˙˙O [
)
˙˙[ \
)
˙˙\ ]
{
˚˚ 
prop
¸¸  $
.
¸¸$ %
CurrentValue
¸¸% 1
=
¸¸2 3
integerValue
¸¸4 @
;
¸¸@ A
}
˝˝ 
else
˛˛  
{
ˇˇ 
prop
ÄÄ  $
.
ÄÄ$ %
CurrentValue
ÄÄ% 1
=
ÄÄ2 3
field
ÄÄ4 9
.
ÄÄ9 :
PropertyValue
ÄÄ: G
;
ÄÄG H
}
ÅÅ 
context
ÉÉ #
.
ÉÉ# $
SaveChanges
ÉÉ$ /
(
ÉÉ/ 0
)
ÉÉ0 1
;
ÉÉ1 2
result
ÑÑ "
=
ÑÑ# $
true
ÑÑ% )
;
ÑÑ) *
}
ÖÖ 
else
ÜÜ 
{
áá 
result
àà "
=
àà# $
false
àà% *
;
àà* +
break
ââ !
;
ââ! "
}
ää 
}
ãã 
}
åå 
UnitOfWorkHelper
éé  
<
éé  !

TDbContext
éé! +
>
éé+ ,
.
éé, -
HandleTransaction
éé- >
(
éé> ?
result
éé? E
,
ééE F
isRoot
ééG M
,
ééM N
transaction
ééO Z
)
ééZ [
;
éé[ \
return
êê 
new
êê  
RepositoryResponse
êê -
<
êê- .
TModel
êê. 4
>
êê4 5
(
êê5 6
)
êê6 7
{
ëë 
	IsSucceed
íí 
=
íí 
result
íí  &
,
íí& '
Data
ìì 
=
ìì 
model
ìì  
}
îî 
;
îî 
}
ïï 
catch
ññ 
(
ññ 
	Exception
ññ 
ex
ññ 
)
ññ  
{
óó 
return
òò 
UnitOfWorkHelper
òò '
<
òò' (

TDbContext
òò( 2
>
òò2 3
.
òò3 4
HandleException
òò4 C
<
òòC D
TModel
òòD J
>
òòJ K
(
òòK L
ex
òòL N
,
òòN O
isRoot
òòP V
,
òòV W
transaction
òòX c
)
òòc d
;
òòd e
}
ôô 
finally
öö 
{
õõ 
if
úú 
(
úú 
isRoot
úú 
)
úú 
{
ùù 
context
üü 
.
üü 
Dispose
üü #
(
üü# $
)
üü$ %
;
üü% &
}
†† 
}
°° 
}
¢¢ 	
public
¨¨ 
async
¨¨ 
Task
¨¨ 
<
¨¨  
RepositoryResponse
¨¨ ,
<
¨¨, -
TModel
¨¨- 3
>
¨¨3 4
>
¨¨4 5
UpdateFieldsAsync
¨¨6 G
(
¨¨G H

Expression
¨¨H R
<
¨¨R S
Func
¨¨S W
<
¨¨W X
TModel
¨¨X ^
,
¨¨^ _
bool
¨¨` d
>
¨¨d e
>
¨¨e f
	predicate
¨¨g p
,
≠≠ 	
List
≠≠
 
<
≠≠ 
EntityField
≠≠ 
>
≠≠ 
fields
≠≠ "
,
ÆÆ 	

TDbContext
ÆÆ
 
_context
ÆÆ 
=
ÆÆ 
null
ÆÆ  $
,
ÆÆ$ %#
IDbContextTransaction
ÆÆ& ;
_transaction
ÆÆ< H
=
ÆÆI J
null
ÆÆK O
)
ÆÆO P
{
ØØ 	
UnitOfWorkHelper
∞∞ 
<
∞∞ 

TDbContext
∞∞ '
>
∞∞' (
.
∞∞( )
InitTransaction
∞∞) 8
(
∞∞8 9
_context
∞∞9 A
,
∞∞A B
_transaction
∞∞C O
,
∞∞O P
out
∞∞Q T

TDbContext
∞∞U _
context
∞∞` g
,
∞∞g h
out
∞∞i l$
IDbContextTransaction∞∞m Ç
transaction∞∞É é
,∞∞é è
out∞∞ê ì
bool∞∞î ò
isRoot∞∞ô ü
)∞∞ü †
;∞∞† °
try
±± 
{
≤≤ 
bool
≥≥ 
result
≥≥ 
=
≥≥ 
false
≥≥ #
;
≥≥# $
TModel
¥¥ 
model
¥¥ 
=
¥¥ 
await
¥¥ $
context
¥¥% ,
.
¥¥, -
Set
¥¥- 0
<
¥¥0 1
TModel
¥¥1 7
>
¥¥7 8
(
¥¥8 9
)
¥¥9 :
.
¥¥: ;!
FirstOrDefaultAsync
¥¥; N
(
¥¥N O
	predicate
¥¥O X
)
¥¥X Y
.
¥¥Y Z
ConfigureAwait
¥¥Z h
(
¥¥h i
false
¥¥i n
)
¥¥n o
;
¥¥o p
if
µµ 
(
µµ 
model
µµ 
!=
µµ 
null
µµ !
)
µµ! "
{
∂∂ 
foreach
∑∑ 
(
∑∑ 
var
∑∑  
field
∑∑! &
in
∑∑' )
fields
∑∑* 0
)
∑∑0 1
{
∏∏ 
var
ππ 
lamda
ππ !
=
ππ" #
	GetLambda
ππ$ -
(
ππ- .
field
ππ. 3
.
ππ3 4
PropertyName
ππ4 @
,
ππ@ A
false
ππB G
)
ππG H
;
ππH I
if
∫∫ 
(
∫∫ 
lamda
∫∫ !
!=
∫∫" $
null
∫∫% )
)
∫∫) *
{
ªª 
var
ºº 
prop
ºº  $
=
ºº% &
context
ºº' .
.
ºº. /
Entry
ºº/ 4
(
ºº4 5
model
ºº5 :
)
ºº: ;
.
ºº; <
Property
ºº< D
(
ººD E
field
ººE J
.
ººJ K
PropertyName
ººK W
)
ººW X
;
ººX Y
if
ΩΩ 
(
ΩΩ  
DateTime
ΩΩ  (
.
ΩΩ( )
TryParse
ΩΩ) 1
(
ΩΩ1 2
field
ΩΩ2 7
.
ΩΩ7 8
PropertyValue
ΩΩ8 E
,
ΩΩE F
out
ΩΩG J
DateTime
ΩΩK S
	dateValue
ΩΩT ]
)
ΩΩ] ^
)
ΩΩ^ _
{
ææ 
prop
øø  $
.
øø$ %
CurrentValue
øø% 1
=
øø2 3
	dateValue
øø4 =
;
øø= >
}
¿¿ 
else
¡¡  
if
¡¡! #
(
¡¡$ %
int
¡¡% (
.
¡¡( )
TryParse
¡¡) 1
(
¡¡1 2
field
¡¡2 7
.
¡¡7 8
PropertyValue
¡¡8 E
,
¡¡E F
out
¡¡G J
int
¡¡K N
integerValue
¡¡O [
)
¡¡[ \
)
¡¡\ ]
{
¬¬ 
prop
√√  $
.
√√$ %
CurrentValue
√√% 1
=
√√2 3
integerValue
√√4 @
;
√√@ A
}
ƒƒ 
else
≈≈  
{
∆∆ 
prop
««  $
.
««$ %
CurrentValue
««% 1
=
««2 3
field
««4 9
.
««9 :
PropertyValue
««: G
;
««G H
}
»» 
await
   !
context
  " )
.
  ) *
SaveChangesAsync
  * :
(
  : ;
)
  ; <
.
  < =
ConfigureAwait
  = K
(
  K L
false
  L Q
)
  Q R
;
  R S
result
ÀÀ "
=
ÀÀ# $
true
ÀÀ% )
;
ÀÀ) *
}
ÃÃ 
else
ÕÕ 
{
ŒŒ 
result
œœ "
=
œœ# $
false
œœ% *
;
œœ* +
break
–– !
;
––! "
}
—— 
}
““ 
}
”” 
UnitOfWorkHelper
’’  
<
’’  !

TDbContext
’’! +
>
’’+ ,
.
’’, -
HandleTransaction
’’- >
(
’’> ?
result
’’? E
,
’’E F
isRoot
’’G M
,
’’M N
transaction
’’O Z
)
’’Z [
;
’’[ \
return
◊◊ 
new
◊◊  
RepositoryResponse
◊◊ -
<
◊◊- .
TModel
◊◊. 4
>
◊◊4 5
{
ÿÿ 
	IsSucceed
ŸŸ 
=
ŸŸ 
result
ŸŸ  &
,
ŸŸ& '
Data
⁄⁄ 
=
⁄⁄ 
model
⁄⁄  
}
€€ 
;
€€ 
}
‹‹ 
catch
›› 
(
›› 
	Exception
›› 
ex
›› 
)
››  
{
ﬁﬁ 
return
ﬂﬂ 
UnitOfWorkHelper
ﬂﬂ '
<
ﬂﬂ' (

TDbContext
ﬂﬂ( 2
>
ﬂﬂ2 3
.
ﬂﬂ3 4
HandleException
ﬂﬂ4 C
<
ﬂﬂC D
TModel
ﬂﬂD J
>
ﬂﬂJ K
(
ﬂﬂK L
ex
ﬂﬂL N
,
ﬂﬂN O
isRoot
ﬂﬂP V
,
ﬂﬂV W
transaction
ﬂﬂX c
)
ﬂﬂc d
;
ﬂﬂd e
}
‡‡ 
finally
·· 
{
‚‚ 
if
„„ 
(
„„ 
isRoot
„„ 
)
„„ 
{
‰‰ 
context
ÊÊ 
.
ÊÊ 
Dispose
ÊÊ #
(
ÊÊ# $
)
ÊÊ$ %
;
ÊÊ% &
}
ÁÁ 
}
ËË 
}
ÈÈ 	
	protected
ÛÛ 
LambdaExpression
ÛÛ "
	GetLambda
ÛÛ# ,
(
ÛÛ, -
string
ÛÛ- 3
propName
ÛÛ4 <
,
ÛÛ< =
bool
ÛÛ> B
isGetDefault
ÛÛC O
=
ÛÛP Q
true
ÛÛR V
)
ÛÛV W
{
ÙÙ 	
var
ıı 
	parameter
ıı 
=
ıı 

Expression
ıı &
.
ıı& '
	Parameter
ıı' 0
(
ıı0 1
typeof
ıı1 7
(
ıı7 8
TModel
ıı8 >
)
ıı> ?
)
ıı? @
;
ıı@ A
var
ˆˆ 
type
ˆˆ 
=
ˆˆ 
typeof
ˆˆ 
(
ˆˆ 
TModel
ˆˆ $
)
ˆˆ$ %
;
ˆˆ% &
var
˜˜ 
prop
˜˜ 
=
˜˜ 
Array
˜˜ 
.
˜˜ 
Find
˜˜ !
(
˜˜! "
type
˜˜" &
.
˜˜& '
GetProperties
˜˜' 4
(
˜˜4 5
)
˜˜5 6
,
˜˜6 7
p
˜˜8 9
=>
˜˜: <
p
˜˜= >
.
˜˜> ?
Name
˜˜? C
==
˜˜D F
propName
˜˜G O
)
˜˜O P
;
˜˜P Q
if
¯¯ 
(
¯¯ 
prop
¯¯ 
==
¯¯ 
null
¯¯ 
&&
¯¯ 
isGetDefault
¯¯  ,
)
¯¯, -
{
˘˘ 
propName
˙˙ 
=
˙˙ 
type
˙˙ 
.
˙˙  
GetProperties
˙˙  -
(
˙˙- .
)
˙˙. /
.
˙˙/ 0
FirstOrDefault
˙˙0 >
(
˙˙> ?
)
˙˙? @
?
˙˙@ A
.
˙˙A B
Name
˙˙B F
;
˙˙F G
}
˚˚ 
var
¸¸ 
memberExpression
¸¸  
=
¸¸! "

Expression
¸¸# -
.
¸¸- .
Property
¸¸. 6
(
¸¸6 7
	parameter
¸¸7 @
,
¸¸@ A
propName
¸¸B J
)
¸¸J K
;
¸¸K L
return
˝˝ 

Expression
˝˝ 
.
˝˝ 
Lambda
˝˝ $
(
˝˝$ %
memberExpression
˝˝% 5
,
˝˝5 6
	parameter
˝˝7 @
)
˝˝@ A
;
˝˝A B
}
˛˛ 	
}
ˇˇ 
}ÄÄ ≥u
_C:\_workspace\github\mixcore\mix.heart\src\Mix.Heart\Domain\Core\ViewModels\CommonViewModels.cs
	namespace

 	
Mix


 
.

 
Domain

 
.

 
Core

 
.

 

ViewModels

 $
{ 
public 

class 
	ApiResult 
< 
T 
> 
{ 
[ 	
JsonProperty	 
( 
$str 
) 
] 
public 
T 
Data 
{ 
get 
; 
set  
;  !
}" #
[!! 	
JsonProperty!!	 
(!! 
$str!! 
)!! 
]!!  
public"" 
List"" 
<"" 
string"" 
>"" 
Errors"" "
{""# $
get""% (
;""( )
set""* -
;""- .
}""/ 0
=""1 2
new""3 6
List""7 ;
<""; <
string""< B
>""B C
(""C D
)""D E
;""E F
[** 	
JsonProperty**	 
(** 
$str** !
)**! "
]**" #
public++ 
	Exception++ 
	Exception++ "
{++# $
get++% (
;++( )
set++* -
;++- .
}++/ 0
[33 	
JsonProperty33	 
(33 
$str33 #
)33# $
]33$ %
public44 
string44 
ResponseKey44 !
{44" #
get44$ '
;44' (
set44) ,
;44, -
}44. /
[<< 	
JsonProperty<<	 
(<< 
$str<< 
)<< 
]<<  
public== 
int== 
Status== 
{== 
get== 
;==  
set==! $
;==$ %
}==& '
}>> 
publicCC 

classCC 
EntityFieldCC 
{DD 
[KK 	
JsonPropertyKK	 
(KK 
$strKK $
)KK$ %
]KK% &
publicLL 
stringLL 
PropertyNameLL "
{LL# $
getLL% (
;LL( )
setLL* -
;LL- .
}LL/ 0
[TT 	
JsonPropertyTT	 
(TT 
$strTT %
)TT% &
]TT& '
publicUU 
stringUU 
PropertyValueUU #
{UU$ %
getUU& )
;UU) *
setUU+ .
;UU. /
}UU0 1
}VV 
public[[ 

class[[ 
FileStreamViewModel[[ $
{\\ 
[cc 	
JsonPropertycc	 
(cc 
$strcc 
)cc 
]cc  
publicdd 
stringdd 
Base64dd 
{dd 
getdd "
;dd" #
setdd$ '
;dd' (
}dd) *
[ll 	
JsonPropertyll	 
(ll 
$strll 
)ll 
]ll 
publicmm 
stringmm 
Namemm 
{mm 
getmm  
;mm  !
setmm" %
;mm% &
}mm' (
[uu 	
JsonPropertyuu	 
(uu 
$struu 
)uu 
]uu 
publicvv 
intvv 
Sizevv 
{vv 
getvv 
;vv 
setvv "
;vv" #
}vv$ %
[~~ 	
JsonProperty~~	 
(~~ 
$str~~ 
)~~ 
]~~ 
public 
string 
Type 
{ 
get  
;  !
set" %
;% &
}' (
}
ÄÄ 
public
ÜÜ 

class
ÜÜ 
PaginationModel
ÜÜ  
<
ÜÜ  !
T
ÜÜ! "
>
ÜÜ" #
{
áá 
public
ãã 
PaginationModel
ãã 
(
ãã 
)
ãã  
{
åå 	
	PageIndex
çç 
=
çç 
$num
çç 
;
çç 
PageSize
éé 
=
éé 
$num
éé 
;
éé 

TotalItems
èè 
=
èè 
$num
èè 
;
èè 
	TotalPage
êê 
=
êê 
$num
êê 
;
êê 
Items
ëë 
=
ëë 
new
ëë 
List
ëë 
<
ëë 
T
ëë 
>
ëë 
(
ëë  
)
ëë  !
;
ëë! "
}
íí 	
[
öö 	
JsonProperty
öö	 
(
öö 
$str
öö 
)
öö 
]
öö 
public
õõ 
List
õõ 
<
õõ 
T
õõ 
>
õõ 
Items
õõ 
{
õõ 
get
õõ "
;
õõ" #
set
õõ$ '
;
õõ' (
}
õõ) *
[
££ 	
JsonProperty
££	 
(
££ 
$str
££ !
)
££! "
]
££" #
public
§§ 
List
§§ 
<
§§ 
JObject
§§ 
>
§§ 
	JsonItems
§§ &
{
§§' (
get
§§) ,
;
§§, -
set
§§. 1
;
§§1 2
}
§§3 4
=
§§5 6
new
§§7 :
List
§§; ?
<
§§? @
JObject
§§@ G
>
§§G H
(
§§H I
)
§§I J
;
§§J K
[
¨¨ 	
JsonProperty
¨¨	 
(
¨¨ 
$str
¨¨ !
)
¨¨! "
]
¨¨" #
public
≠≠ 
int
≠≠ 
	PageIndex
≠≠ 
{
≠≠ 
get
≠≠ "
;
≠≠" #
set
≠≠$ '
;
≠≠' (
}
≠≠) *
[
µµ 	
JsonProperty
µµ	 
(
µµ 
$str
µµ 
)
µµ 
]
µµ 
public
∂∂ 
int
∂∂ 
Page
∂∂ 
{
∂∂ 
get
∂∂ 
{
∂∂ 
return
∂∂  &
	PageIndex
∂∂' 0
+
∂∂1 2
$num
∂∂3 4
;
∂∂4 5
}
∂∂6 7
}
∂∂8 9
[
ææ 	
JsonProperty
ææ	 
(
ææ 
$str
ææ  
)
ææ  !
]
ææ! "
public
øø 
int
øø 
?
øø 
PageSize
øø 
{
øø 
get
øø "
;
øø" #
set
øø$ '
;
øø' (
}
øø) *
[
«« 	
JsonProperty
««	 
(
«« 
$str
«« "
)
««" #
]
««# $
public
»» 
int
»» 

TotalItems
»» 
{
»» 
get
»»  #
;
»»# $
set
»»% (
;
»»( )
}
»»* +
[
–– 	
JsonProperty
––	 
(
–– 
$str
–– !
)
––! "
]
––" #
public
—— 
int
—— 
	TotalPage
—— 
{
—— 
get
—— "
;
——" #
set
——$ '
;
——' (
}
——) *
}
““ 
public
ÿÿ 

class
ÿÿ  
RepositoryResponse
ÿÿ #
<
ÿÿ# $
TResult
ÿÿ$ +
>
ÿÿ+ ,
{
ŸŸ 
[
‡‡ 	
JsonProperty
‡‡	 
(
‡‡ 
$str
‡‡ !
)
‡‡! "
]
‡‡" #
public
·· 
bool
·· 
	IsSucceed
·· 
{
·· 
get
··  #
;
··# $
set
··% (
;
··( )
}
··* +
[
ÈÈ 	
JsonProperty
ÈÈ	 
(
ÈÈ 
$str
ÈÈ #
)
ÈÈ# $
]
ÈÈ$ %
public
ÍÍ 
string
ÍÍ 
ResponseKey
ÍÍ !
{
ÍÍ" #
get
ÍÍ$ '
;
ÍÍ' (
set
ÍÍ) ,
;
ÍÍ, -
}
ÍÍ. /
[
ÚÚ 	
JsonProperty
ÚÚ	 
(
ÚÚ 
$str
ÚÚ 
)
ÚÚ 
]
ÚÚ  
public
ÛÛ 
int
ÛÛ 
Status
ÛÛ 
{
ÛÛ 
get
ÛÛ 
;
ÛÛ  
set
ÛÛ! $
;
ÛÛ$ %
}
ÛÛ& '
[
˚˚ 	
JsonProperty
˚˚	 
(
˚˚ 
$str
˚˚ 
)
˚˚ 
]
˚˚  
public
¸¸ 
List
¸¸ 
<
¸¸ 
string
¸¸ 
>
¸¸ 
Errors
¸¸ "
{
¸¸# $
get
¸¸% (
;
¸¸( )
set
¸¸* -
;
¸¸- .
}
¸¸/ 0
=
¸¸1 2
new
¸¸3 6
List
¸¸7 ;
<
¸¸; <
string
¸¸< B
>
¸¸B C
(
¸¸C D
)
¸¸D E
;
¸¸E F
[
ÑÑ 	
JsonProperty
ÑÑ	 
(
ÑÑ 
$str
ÑÑ !
)
ÑÑ! "
]
ÑÑ" #
public
ÖÖ 
	Exception
ÖÖ 
	Exception
ÖÖ "
{
ÖÖ# $
get
ÖÖ% (
;
ÖÖ( )
set
ÖÖ* -
;
ÖÖ- .
}
ÖÖ/ 0
[
çç 	
JsonProperty
çç	 
(
çç 
$str
çç 
)
çç 
]
çç 
public
éé 
TResult
éé 
Data
éé 
{
éé 
get
éé !
;
éé! "
set
éé# &
;
éé& '
}
éé( )
}
èè 
public
îî 

class
îî 
RequestObject
îî 
{
ïï 
[
úú 	
JsonProperty
úú	 
(
úú 
$str
úú  
)
úú  !
]
úú! "
public
ùù 
string
ùù 
ViewType
ùù 
{
ùù  
get
ùù! $
;
ùù$ %
set
ùù& )
;
ùù) *
}
ùù+ ,
[
•• 	
JsonProperty
••	 
(
•• 
$str
•• 
)
•• 
]
•• 
public
¶¶ 
string
¶¶ 
Key
¶¶ 
{
¶¶ 
get
¶¶ 
;
¶¶  
set
¶¶! $
;
¶¶$ %
}
¶¶& '
[
ÆÆ 	
JsonProperty
ÆÆ	 
(
ÆÆ 
$str
ÆÆ 
)
ÆÆ  
]
ÆÆ  !
public
ØØ 
string
ØØ 
Keyword
ØØ 
{
ØØ 
get
ØØ  #
;
ØØ# $
set
ØØ% (
;
ØØ( )
}
ØØ* +
[
∑∑ 	
JsonProperty
∑∑	 
(
∑∑ 
$str
∑∑ 
)
∑∑ 
]
∑∑  
public
∏∏ 
Common
∏∏ 
.
∏∏ 
Utility
∏∏ 
.
∏∏ 
Enums
∏∏ #
.
∏∏# $
SWStatus
∏∏$ ,
?
∏∏, -
Status
∏∏. 4
{
∏∏5 6
get
∏∏7 :
;
∏∏: ;
set
∏∏< ?
;
∏∏? @
}
∏∏A B
}
ππ 
public
ææ 

class
ææ 
RequestPaging
ææ 
{
øø 
[
∆∆ 	
JsonProperty
∆∆	 
(
∆∆ 
$str
∆∆  
)
∆∆  !
]
∆∆! "
public
«« 
string
«« 
ViewType
«« 
{
««  
get
««! $
;
««$ %
set
««& )
;
««) *
}
««+ ,
[
œœ 	
JsonProperty
œœ	 
(
œœ 
$str
œœ !
)
œœ! "
]
œœ" #
public
–– 
int
–– 
	CountryId
–– 
{
–– 
get
–– "
;
––" #
set
––$ '
;
––' (
}
––) *
[
ÿÿ 	
JsonProperty
ÿÿ	 
(
ÿÿ 
$str
ÿÿ 
)
ÿÿ  
]
ÿÿ  !
public
ŸŸ 
string
ŸŸ 
Culture
ŸŸ 
{
ŸŸ 
get
ŸŸ  #
;
ŸŸ# $
set
ŸŸ% (
;
ŸŸ( )
}
ŸŸ* +
[
·· 	
JsonProperty
··	 
(
·· 
$str
·· !
)
··! "
]
··" #
public
‚‚ 
int
‚‚ 
	Direction
‚‚ 
{
‚‚ 
get
‚‚ "
;
‚‚" #
set
‚‚$ '
;
‚‚' (
}
‚‚) *
=
‚‚+ ,
$num
‚‚- .
;
‚‚. /
[
ÍÍ 	
JsonProperty
ÍÍ	 
(
ÍÍ 
$str
ÍÍ 
)
ÍÍ 
]
ÍÍ 
public
ÎÎ 
string
ÎÎ 
Key
ÎÎ 
{
ÎÎ 
get
ÎÎ 
;
ÎÎ  
set
ÎÎ! $
;
ÎÎ$ %
}
ÎÎ& '
[
ÛÛ 	
JsonProperty
ÛÛ	 
(
ÛÛ 
$str
ÛÛ 
)
ÛÛ  
]
ÛÛ  !
public
ÙÙ 
string
ÙÙ 
Keyword
ÙÙ 
{
ÙÙ 
get
ÙÙ  #
;
ÙÙ# $
set
ÙÙ% (
;
ÙÙ( )
}
ÙÙ* +
[
¸¸ 	
JsonProperty
¸¸	 
(
¸¸ 
$str
¸¸ 
)
¸¸ 
]
¸¸ 
public
˝˝ 
string
˝˝ 
Query
˝˝ 
{
˝˝ 
get
˝˝ !
;
˝˝! "
set
˝˝# &
;
˝˝& '
}
˝˝( )
[
ÖÖ 	
JsonProperty
ÖÖ	 
(
ÖÖ 
$str
ÖÖ 
)
ÖÖ 
]
ÖÖ  
public
ÜÜ 
int
ÜÜ 
?
ÜÜ 
Status
ÜÜ 
{
ÜÜ 
get
ÜÜ  
;
ÜÜ  !
set
ÜÜ" %
;
ÜÜ% &
}
ÜÜ' (
[
éé 	
JsonProperty
éé	 
(
éé 
$str
éé 
)
éé  
]
éé  !
public
èè 
string
èè 
OrderBy
èè 
{
èè 
get
èè  #
;
èè# $
set
èè% (
;
èè( )
}
èè* +
=
èè, -
$str
èè. 2
;
èè2 3
[
óó 	
JsonProperty
óó	 
(
óó 
$str
óó !
)
óó! "
]
óó" #
public
òò 
int
òò 
	PageIndex
òò 
{
òò 
get
òò "
;
òò" #
set
òò$ '
;
òò' (
}
òò) *
=
òò+ ,
$num
òò- .
;
òò. /
[
†† 	
JsonProperty
††	 
(
†† 
$str
††  
)
††  !
]
††! "
public
°° 
int
°° 
?
°° 
PageSize
°° 
{
°° 
get
°° "
;
°°" #
set
°°$ '
;
°°' (
}
°°) *
=
°°+ ,
$num
°°- /
;
°°/ 0
[
©© 	
JsonProperty
©©	 
(
©© 
$str
©© !
)
©©! "
]
©©" #
public
™™ 
string
™™ 
	UserAgent
™™ 
{
™™  !
get
™™" %
;
™™% &
set
™™' *
;
™™* +
}
™™, -
[
≤≤ 	
JsonProperty
≤≤	 
(
≤≤ 
$str
≤≤ 
)
≤≤ 
]
≤≤  
public
≥≥ 
string
≥≥ 
UserId
≥≥ 
{
≥≥ 
get
≥≥ "
;
≥≥" #
set
≥≥$ '
;
≥≥' (
}
≥≥) *
[
µµ 	
JsonProperty
µµ	 
(
µµ 
$str
µµ  
)
µµ  !
]
µµ! "
public
∂∂ 
DateTime
∂∂ 
?
∂∂ 
FromDate
∂∂ !
{
∂∂" #
get
∂∂$ '
;
∂∂' (
set
∂∂) ,
;
∂∂, -
}
∂∂. /
[
∏∏ 	
JsonProperty
∏∏	 
(
∏∏ 
$str
∏∏ 
)
∏∏ 
]
∏∏  
public
ππ 
DateTime
ππ 
?
ππ 
ToDate
ππ 
{
ππ  !
get
ππ" %
;
ππ% &
set
ππ' *
;
ππ* +
}
ππ, -
}
∫∫ 
}ªª Ûﬂ
\C:\_workspace\github\mixcore\mix.heart\src\Mix.Heart\Domain\Core\ViewModels\ViewModelBase.cs
	namespace 	
Mix
 
. 
Domain 
. 
Data 
. 

ViewModels $
{ 
public 

abstract 
class 
ViewModelBase '
<' (

TDbContext( 2
,2 3
TModel4 :
,: ;
TView< A
>A B
where 

TDbContext 
: 
	DbContext $
where 
TModel 
: 
class 
where 
TView 
: 
ViewModelBase #
<# $

TDbContext$ .
,. /
TModel0 6
,6 7
TView8 =
>= >
{   
private&& 
bool&& 
isValid&& 
=&& 
true&& #
;&&# $
private++ 
IMapper++ 
_mapper++ 
;++  
private00 
TModel00 
_model00 
;00 
private55 
IMapper55 
_modelMapper55 $
;55$ %
[77 	

JsonIgnore77	 
]77 
public88 
static88 
readonly88 
DefaultRepository88 0
<880 1

TDbContext881 ;
,88; <
TModel88= C
,88C D
TView88E J
>88J K

Repository88L V
;88V W
static:: 
ViewModelBase:: 
(:: 
):: 
{;; 	

Repository<< 
=<< 
DefaultRepository<< *
<<<* +

TDbContext<<+ 5
,<<5 6
TModel<<7 =
,<<= >
TView<<? D
><<D E
.<<E F
Instance<<F N
;<<N O
}== 	
[EE 	

JsonIgnoreEE	 
]EE 
publicFF 
	ExceptionFF 
	ExceptionFF "
{FF# $
getFF% (
;FF( )
setFF* -
;FF- .
}FF/ 0
[NN 	
JsonPropertyNN	 
(NN 
$strNN 
)NN  
]NN  !
publicOO 
boolOO 
IsCloneOO 
{OO 
getOO !
;OO! "
setOO# &
;OO& '
}OO( )
[WW 	

JsonIgnoreWW	 
]WW 
publicXX 
boolXX 

IsLazyLoadXX 
{XX  
getXX! $
;XX$ %
setXX& )
;XX) *
}XX+ ,
=XX- .
trueXX/ 3
;XX3 4
[`` 	
JsonProperty``	 
(`` 
$str``  
)``  !
]``! "
publicaa 
Listaa 
<aa 
SupportedCultureaa $
>aa$ %
Culturesaa& .
{aa/ 0
getaa1 4
;aa4 5
setaa6 9
;aa9 :
}aa; <
[ii 	

JsonIgnoreii	 
]ii 
publicjj 
IMapperjj 
Mapperjj 
{jj 
getkk 
{kk 
returnkk 
_mapperkk  
??kk! #
(kk$ %
_mapperkk% ,
=kk- .
thiskk/ 3
.kk3 4
CreateMapperkk4 @
(kk@ A
)kkA B
)kkB C
;kkC D
}kkE F
setll 
=>ll 
_mapperll 
=ll 
valuell "
;ll" #
}mm 	
[uu 	

JsonIgnoreuu	 
]uu 
publicvv 
TModelvv 
Modelvv 
{vv 
getww 
{ww 
ifxx 
(xx 
_modelxx 
==xx 
nullxx "
)xx" #
{yy 
Typezz 
	classTypezz "
=zz# $
typeofzz% +
(zz+ ,
TModelzz, 2
)zz2 3
;zz3 4
ConstructorInfo{{ #
classConstructor{{$ 4
={{5 6
	classType{{7 @
.{{@ A
GetConstructor{{A O
({{O P
new{{P S
Type{{T X
[{{X Y
]{{Y Z
{{{[ \
}{{] ^
){{^ _
;{{_ `
_model|| 
=|| 
(|| 
TModel|| $
)||$ %
classConstructor||% 5
.||5 6
Invoke||6 <
(||< =
new||= @
object||A G
[||G H
]||H I
{||J K
}||L M
)||M N
;||N O
}}} 
return~~ 
_model~~ 
;~~ 
} 
set
ÄÄ 
=>
ÄÄ 
_model
ÄÄ 
=
ÄÄ 
value
ÄÄ !
;
ÄÄ! "
}
ÅÅ 	
[
ââ 	

JsonIgnore
ââ	 
]
ââ 
public
ää 
IMapper
ää 
ModelMapper
ää "
{
ää# $
get
ãã 
{
ãã 
return
ãã 
_modelMapper
ãã %
??
ãã& (
(
ãã) *
_modelMapper
ãã* 6
=
ãã7 8
this
ãã9 =
.
ãã= >
CreateModelMapper
ãã> O
(
ããO P
)
ããP Q
)
ããQ R
;
ããR S
}
ããT U
set
åå 
=>
åå 
_modelMapper
åå 
=
åå  !
value
åå" '
;
åå' (
}
çç 	
[
ïï 	
JsonProperty
ïï	 
(
ïï 
$str
ïï  
)
ïï  !
]
ïï! "
public
ññ 
int
ññ 
Priority
ññ 
{
ññ 
get
ññ !
;
ññ! "
set
ññ# &
;
ññ& '
}
ññ( )
=
ññ* +
$num
ññ, -
;
ññ- .
[
ûû 	
JsonProperty
ûû	 
(
ûû 
$str
ûû &
)
ûû& '
]
ûû' (
public
üü 
string
üü 
Specificulture
üü $
{
üü% &
get
üü' *
;
üü* +
set
üü, /
;
üü/ 0
}
üü1 2
private
•• 
IMapper
•• 
CreateMapper
•• $
(
••$ %
)
••% &
{
¶¶ 	
var
ßß 
config
ßß 
=
ßß 
new
ßß !
MapperConfiguration
ßß 0
(
ßß0 1
cfg
ßß1 4
=>
ßß5 7
cfg
ßß8 ;
.
ßß; <
	CreateMap
ßß< E
<
ßßE F
TModel
ßßF L
,
ßßL M
TView
ßßN S
>
ßßS T
(
ßßT U
)
ßßU V
.
ßßV W

ReverseMap
ßßW a
(
ßßa b
)
ßßb c
)
ßßc d
;
ßßd e
var
®® 
mapper
®® 
=
®® 
new
®® 
Mapper
®® #
(
®®# $
config
®®$ *
)
®®* +
;
®®+ ,
return
©© 
mapper
©© 
;
©© 
}
™™ 	
private
∞∞ 
IMapper
∞∞ 
CreateModelMapper
∞∞ )
(
∞∞) *
)
∞∞* +
{
±± 	
var
≤≤ 
config
≤≤ 
=
≤≤ 
new
≤≤ !
MapperConfiguration
≤≤ 0
(
≤≤0 1
cfg
≤≤1 4
=>
≤≤5 7
cfg
≤≤8 ;
.
≤≤; <
	CreateMap
≤≤< E
<
≤≤E F
TModel
≤≤F L
,
≤≤L M
TModel
≤≤N T
>
≤≤T U
(
≤≤U V
)
≤≤V W
.
≤≤W X

ReverseMap
≤≤X b
(
≤≤b c
)
≤≤c d
)
≤≤d e
;
≤≤e f
var
≥≥ 
mapper
≥≥ 
=
≥≥ 
new
≥≥ 
Mapper
≥≥ #
(
≥≥# $
config
≥≥$ *
)
≥≥* +
;
≥≥+ ,
return
¥¥ 
mapper
¥¥ 
;
¥¥ 
}
µµ 	
[
∑∑ 	

JsonIgnore
∑∑	 
]
∑∑ 
public
∏∏ 
List
∏∏ 
<
∏∏ 
string
∏∏ 
>
∏∏ 
Errors
∏∏ "
{
∏∏# $
get
∏∏% (
;
∏∏( )
set
∏∏* -
;
∏∏- .
}
∏∏/ 0
=
∏∏1 2
new
∏∏3 6
List
∏∏7 ;
<
∏∏; <
string
∏∏< B
>
∏∏B C
(
∏∏C D
)
∏∏D E
;
∏∏E F
[
∫∫ 	

JsonIgnore
∫∫	 
]
∫∫ 
[
ªª 	
JsonProperty
ªª	 
(
ªª 
$str
ªª 
)
ªª  
]
ªª  !
public
ºº 
bool
ºº 
IsValid
ºº 
{
ºº 
get
ºº !
=>
ºº" $
isValid
ºº% ,
;
ºº, -
set
ºº. 1
=>
ºº2 4
isValid
ºº5 <
=
ºº= >
value
ºº? D
;
ººD E
}
ººF G
public
∆∆ 
virtual
∆∆ 
TModel
∆∆ 
	InitModel
∆∆ '
(
∆∆' (
)
∆∆( )
{
«« 	
Type
»» 
	classType
»» 
=
»» 
typeof
»» #
(
»»# $
TModel
»»$ *
)
»»* +
;
»»+ ,
ConstructorInfo
…… 
classConstructor
…… ,
=
……- .
	classType
……/ 8
.
……8 9
GetConstructor
……9 G
(
……G H
new
……H K
Type
……L P
[
……P Q
]
……Q R
{
……S T
}
……U V
)
……V W
;
……W X
TModel
   
context
   
=
   
(
   
TModel
   $
)
  $ %
classConstructor
  % 5
.
  5 6
Invoke
  6 <
(
  < =
new
  = @
object
  A G
[
  G H
]
  H I
{
  J K
}
  L M
)
  M N
;
  N O
return
ÃÃ 
context
ÃÃ 
;
ÃÃ 
}
ÕÕ 	
public
”” 
virtual
”” 
TModel
”” 

ParseModel
”” (
(
””( )

TDbContext
””) 3
_context
””4 <
=
””= >
null
””? C
,
””C D#
IDbContextTransaction
””E Z
_transaction
””[ g
=
””h i
null
””j n
)
””n o
{
‘‘ 	
this
÷÷ 
.
÷÷ 
Model
÷÷ 
=
÷÷ 
	InitModel
÷÷ "
(
÷÷" #
)
÷÷# $
;
÷÷$ %
Mapper
◊◊ 
.
◊◊ 
Map
◊◊ 
<
◊◊ 
TView
◊◊ 
,
◊◊ 
TModel
◊◊ $
>
◊◊$ %
(
◊◊% &
(
◊◊& '
TView
◊◊' ,
)
◊◊, -
this
◊◊- 1
,
◊◊1 2
Model
◊◊3 8
)
◊◊8 9
;
◊◊9 :
return
ÿÿ 
this
ÿÿ 
.
ÿÿ 
Model
ÿÿ 
;
ÿÿ 
}
ŸŸ 	
public
‡‡ 
virtual
‡‡ 
void
‡‡ 
Validate
‡‡ $
(
‡‡$ %

TDbContext
‡‡% /
_context
‡‡0 8
,
‡‡8 9#
IDbContextTransaction
‡‡: O
_transaction
‡‡P \
)
‡‡\ ]
{
·· 	
var
‚‚ 
validateContext
‚‚ 
=
‚‚  !
new
‚‚" %
System
‚‚& ,
.
‚‚, -
ComponentModel
‚‚- ;
.
‚‚; <
DataAnnotations
‚‚< K
.
‚‚K L
ValidationContext
‚‚L ]
(
‚‚] ^
this
‚‚^ b
,
‚‚b c
serviceProvider
‚‚d s
:
‚‚s t
null
‚‚u y
,
‚‚y z
items‚‚{ Ä
:‚‚Ä Å
null‚‚Ç Ü
)‚‚Ü á
;‚‚á à
var
„„ 
results
„„ 
=
„„ 
new
„„ 
List
„„ "
<
„„" #
ValidationResult
„„# 3
>
„„3 4
(
„„4 5
)
„„5 6
;
„„6 7
IsValid
ÂÂ 
=
ÂÂ 
	Validator
ÂÂ 
.
ÂÂ  
TryValidateObject
ÂÂ  1
(
ÂÂ1 2
this
ÂÂ2 6
,
ÂÂ6 7
validateContext
ÂÂ8 G
,
ÂÂG H
results
ÂÂI P
)
ÂÂP Q
;
ÂÂQ R
if
ÊÊ 
(
ÊÊ 
!
ÊÊ 
IsValid
ÊÊ 
)
ÊÊ 
{
ÁÁ 
Errors
ËË 
.
ËË 
AddRange
ËË 
(
ËË  
results
ËË  '
.
ËË' (
Select
ËË( .
(
ËË. /
e
ËË/ 0
=>
ËË1 3
e
ËË4 5
.
ËË5 6
ErrorMessage
ËË6 B
)
ËËB C
)
ËËC D
;
ËËD E
}
ÈÈ 
}
ÍÍ 	
public
ıı 
virtual
ıı 
Task
ıı 
<
ıı 
bool
ıı  
>
ıı  !
ExpandViewAsync
ıı" 1
(
ıı1 2

TDbContext
ıı2 <
_context
ıı= E
=
ııF G
null
ııH L
,
ııL M#
IDbContextTransaction
ııN c
_transaction
ııd p
=
ııq r
null
ııs w
)
ııw x
{
ˆˆ 	
var
˜˜ 

taskSource
˜˜ 
=
˜˜ 
new
˜˜  "
TaskCompletionSource
˜˜! 5
<
˜˜5 6
bool
˜˜6 :
>
˜˜: ;
(
˜˜; <
)
˜˜< =
;
˜˜= >

taskSource
¯¯ 
.
¯¯ 
	SetResult
¯¯  
(
¯¯  !
true
¯¯! %
)
¯¯% &
;
¯¯& '
return
˘˘ 

taskSource
˘˘ 
.
˘˘ 
Task
˘˘ "
;
˘˘" #
}
˙˙ 	
public
ÑÑ 
static
ÑÑ 
async
ÑÑ 
Task
ÑÑ  
<
ÑÑ  !
TView
ÑÑ! &
>
ÑÑ& '
InitViewAsync
ÑÑ( 5
(
ÑÑ5 6
TModel
ÑÑ6 <
model
ÑÑ= B
=
ÑÑC D
null
ÑÑE I
,
ÑÑI J
bool
ÑÑK O

isLazyLoad
ÑÑP Z
=
ÑÑ[ \
true
ÑÑ] a
,
ÑÑa b

TDbContext
ÑÑc m
_context
ÑÑn v
=
ÑÑw x
null
ÑÑy }
,
ÑÑ} ~$
IDbContextTransactionÑÑ î
_transactionÑÑï °
=ÑÑ¢ £
nullÑÑ§ ®
)ÑÑ® ©
{
ÖÖ 	
Type
ÜÜ 
	classType
ÜÜ 
=
ÜÜ 
typeof
ÜÜ #
(
ÜÜ# $
TView
ÜÜ$ )
)
ÜÜ) *
;
ÜÜ* +
ConstructorInfo
àà 
classConstructor
àà ,
=
àà- .
	classType
àà/ 8
.
àà8 9
GetConstructor
àà9 G
(
ààG H
new
ààH K
Type
ààL P
[
ààP Q
]
ààQ R
{
ààS T
}
ààU V
)
ààV W
;
ààW X
if
ââ 
(
ââ 
model
ââ 
==
ââ 
null
ââ 
&&
ââ  
classConstructor
ââ! 1
!=
ââ2 4
null
ââ5 9
)
ââ9 :
{
ää 
var
ãã 
view
ãã 
=
ãã 
(
ãã 
TView
ãã !
)
ãã! "
classConstructor
ãã" 2
.
ãã2 3
Invoke
ãã3 9
(
ãã9 :
new
ãã: =
object
ãã> D
[
ããD E
]
ããE F
{
ããG H
}
ããI J
)
ããJ K
;
ããK L
await
åå 
view
åå 
.
åå 
ParseViewAsync
åå )
(
åå) *
true
åå* .
,
åå. /
_context
åå0 8
,
åå8 9
_transaction
åå: F
)
ååF G
;
ååG H
return
çç 
view
çç 
;
çç 
}
éé 
else
èè 
{
êê 
classConstructor
ëë  
=
ëë! "
	classType
ëë# ,
.
ëë, -
GetConstructor
ëë- ;
(
ëë; <
new
ëë< ?
Type
ëë@ D
[
ëëD E
]
ëëE F
{
ëëG H
typeof
ëëI O
(
ëëO P
TModel
ëëP V
)
ëëV W
,
ëëW X
typeof
ëëY _
(
ëë_ `
bool
ëë` d
)
ëëd e
,
ëëe f
typeof
ëëg m
(
ëëm n

TDbContext
ëën x
)
ëëx y
,
ëëy z
typeofëë{ Å
(ëëÅ Ç%
IDbContextTransactionëëÇ ó
)ëëó ò
}ëëô ö
)ëëö õ
;ëëõ ú
if
íí 
(
íí 
classConstructor
íí $
!=
íí% '
null
íí( ,
)
íí, -
{
ìì 
var
îî 
view
îî 
=
îî 
(
îî  
TView
îî  %
)
îî% &
classConstructor
îî& 6
.
îî6 7
Invoke
îî7 =
(
îî= >
new
îî> A
object
îîB H
[
îîH I
]
îîI J
{
îîK L
model
îîM R
,
îîR S

isLazyLoad
îîT ^
,
îî^ _
_context
îî` h
,
îîh i
_transaction
îîj v
}
îîw x
)
îîx y
;
îîy z
await
ïï 
view
ïï 
.
ïï 
ParseViewAsync
ïï -
(
ïï- .

isLazyLoad
ïï. 8
,
ïï8 9
_context
ïï: B
,
ïïB C
_transaction
ïïD P
)
ïïP Q
;
ïïQ R
return
ññ 
view
ññ 
;
ññ  
}
óó 
else
òò 
{
ôô 
classConstructor
öö $
=
öö% &
	classType
öö' 0
.
öö0 1
GetConstructor
öö1 ?
(
öö? @
new
öö@ C
Type
ööD H
[
ööH I
]
ööI J
{
ööK L
typeof
ööM S
(
ööS T
TModel
ööT Z
)
ööZ [
,
öö[ \
typeof
öö] c
(
ööc d

TDbContext
ööd n
)
öön o
,
ööo p
typeof
ööq w
(
ööw x$
IDbContextTransactionööx ç
)ööç é
}ööè ê
)ööê ë
;ööë í
var
õõ 
view
õõ 
=
õõ 
(
õõ  
TView
õõ  %
)
õõ% &
classConstructor
õõ& 6
.
õõ6 7
Invoke
õõ7 =
(
õõ= >
new
õõ> A
object
õõB H
[
õõH I
]
õõI J
{
õõK L
model
õõM R
,
õõR S
_context
õõT \
,
õõ\ ]
_transaction
õõ^ j
}
õõk l
)
õõl m
;
õõm n
await
úú 
view
úú 
.
úú 
ParseViewAsync
úú -
(
úú- .

isLazyLoad
úú. 8
,
úú8 9
_context
úú: B
,
úúB C
_transaction
úúD P
)
úúP Q
;
úúQ R
return
ùù 
view
ùù 
;
ùù  
}
ûû 
}
üü 
}
†† 	
public
©© 
virtual
©© 
async
©© 
Task
©© !
<
©©! "
TView
©©" '
>
©©' (
ParseViewAsync
©©) 7
(
©©7 8
bool
©©8 <
isExpand
©©= E
=
©©F G
true
©©H L
,
©©L M

TDbContext
©©N X
_context
©©Y a
=
©©b c
null
©©d h
,
©©h i#
IDbContextTransaction
©©j 
_transaction©©Ä å
=©©ç é
null©©è ì
)
™™4 5
{
´´ 	
Mapper
¨¨ 
.
¨¨ 
Map
¨¨ 
<
¨¨ 
TModel
¨¨ 
,
¨¨ 
TView
¨¨ $
>
¨¨$ %
(
¨¨% &
Model
¨¨& +
,
¨¨+ ,
(
¨¨- .
TView
¨¨. 3
)
¨¨3 4
this
¨¨4 8
)
¨¨8 9
;
¨¨9 :
if
≠≠ 
(
≠≠ 
isExpand
≠≠ 
)
≠≠ 
{
ÆÆ 
UnitOfWorkHelper
ØØ  
<
ØØ  !

TDbContext
ØØ! +
>
ØØ+ ,
.
ØØ, -
InitTransaction
ØØ- <
(
ØØ< =
_context
ØØ= E
,
ØØE F
_transaction
ØØG S
,
ØØS T
out
ØØU X

TDbContext
ØØY c
context
ØØd k
,
ØØk l
out
ØØm p$
IDbContextTransactionØØq Ü
transactionØØá í
,ØØí ì
outØØî ó
boolØØò ú
isRootØØù £
)ØØ£ §
;ØØ§ •
try
∞∞ 
{
±± 
var
≤≤ 
expandResult
≤≤ $
=
≤≤% &
await
≤≤' ,
ExpandViewAsync
≤≤- <
(
≤≤< =
context
≤≤= D
,
≤≤D E
transaction
≤≤F Q
)
≤≤Q R
;
≤≤R S
if
≥≥ 
(
≥≥ 
expandResult
≥≥ $
)
≥≥$ %
{
¥¥ 
return
µµ 
this
µµ #
as
µµ$ &
TView
µµ' ,
;
µµ, -
}
∂∂ 
else
∑∑ 
{
∏∏ 
return
ππ 
null
ππ #
;
ππ# $
}
∫∫ 
}
ªª 
catch
ºº 
(
ºº 
	Exception
ºº  
ex
ºº! #
)
ºº# $
{
ΩΩ 

Repository
ææ 
.
ææ 
LogErrorMessage
ææ .
(
ææ. /
ex
ææ/ 1
)
ææ1 2
;
ææ2 3
if
øø 
(
øø 
isRoot
øø 
)
øø 
{
¿¿ 
transaction
¬¬ #
.
¬¬# $
Rollback
¬¬$ ,
(
¬¬, -
)
¬¬- .
;
¬¬. /
}
√√ 
}
ƒƒ 
finally
≈≈ 
{
∆∆ 
if
«« 
(
«« 
isRoot
«« 
)
«« 
{
»» 
context
   
.
    
Dispose
    '
(
  ' (
)
  ( )
;
  ) *
}
ÀÀ 
}
ÃÃ 
}
ÕÕ 
return
ŒŒ 
(
ŒŒ 
TView
ŒŒ 
)
ŒŒ 
this
ŒŒ 
;
ŒŒ 
}
œœ 	
public
ŸŸ 
virtual
ŸŸ 
async
ŸŸ 
Task
ŸŸ !
<
ŸŸ! " 
RepositoryResponse
ŸŸ" 4
<
ŸŸ4 5
List
ŸŸ5 9
<
ŸŸ9 :
TView
ŸŸ: ?
>
ŸŸ? @
>
ŸŸ@ A
>
ŸŸA B

CloneAsync
ŸŸC M
(
ŸŸM N
TModel
ŸŸN T
model
ŸŸU Z
,
ŸŸZ [
List
ŸŸ\ `
<
ŸŸ` a
SupportedCulture
ŸŸa q
>
ŸŸq r
cloneCulturesŸŸs Ä
,
⁄⁄ 

TDbContext
⁄⁄ 
_context
⁄⁄ !
=
⁄⁄" #
null
⁄⁄$ (
,
⁄⁄( )#
IDbContextTransaction
⁄⁄* ?
_transaction
⁄⁄@ L
=
⁄⁄M N
null
⁄⁄O S
)
⁄⁄S T
{
€€ 	
UnitOfWorkHelper
‹‹ 
<
‹‹ 

TDbContext
‹‹ '
>
‹‹' (
.
‹‹( )
InitTransaction
‹‹) 8
(
‹‹8 9
_context
‹‹9 A
,
‹‹A B
_transaction
‹‹C O
,
‹‹O P
out
‹‹Q T

TDbContext
‹‹U _
context
‹‹` g
,
‹‹g h
out
‹‹i l$
IDbContextTransaction‹‹m Ç
transaction‹‹É é
,‹‹é è
out‹‹ê ì
bool‹‹î ò
isRoot‹‹ô ü
)‹‹ü †
;‹‹† ° 
RepositoryResponse
›› 
<
›› 
List
›› #
<
››# $
TView
››$ )
>
››) *
>
››* +
result
››, 2
=
››3 4
new
››5 8 
RepositoryResponse
››9 K
<
››K L
List
››L P
<
››P Q
TView
››Q V
>
››V W
>
››W X
(
››X Y
)
››Y Z
{
ﬁﬁ 
	IsSucceed
ﬂﬂ 
=
ﬂﬂ 
true
ﬂﬂ  
,
ﬂﬂ  !
Data
‡‡ 
=
‡‡ 
new
‡‡ 
List
‡‡ 
<
‡‡  
TView
‡‡  %
>
‡‡% &
(
‡‡& '
)
‡‡' (
}
·· 
;
·· 
try
„„ 
{
‰‰ 
if
ÂÂ 
(
ÂÂ 
cloneCultures
ÂÂ !
!=
ÂÂ" $
null
ÂÂ% )
)
ÂÂ) *
{
ÊÊ 
foreach
ÁÁ 
(
ÁÁ 
var
ÁÁ  
culture
ÁÁ! (
in
ÁÁ) +
cloneCultures
ÁÁ, 9
)
ÁÁ9 :
{
ËË 
string
ÈÈ 
desSpecificulture
ÈÈ 0
=
ÈÈ1 2
culture
ÈÈ3 :
.
ÈÈ: ;
Specificulture
ÈÈ; I
;
ÈÈI J
TView
ÎÎ 
view
ÎÎ "
=
ÎÎ# $
InitView
ÎÎ% -
(
ÎÎ- .
)
ÎÎ. /
;
ÎÎ/ 0
view
ÏÏ 
.
ÏÏ 
Model
ÏÏ "
=
ÏÏ# $
model
ÏÏ% *
;
ÏÏ* +
view
ÌÌ 
.
ÌÌ 
	ParseView
ÌÌ &
(
ÌÌ& '
isExpand
ÌÌ' /
:
ÌÌ/ 0
false
ÌÌ1 6
,
ÌÌ6 7
_context
ÌÌ8 @
:
ÌÌ@ A
context
ÌÌB I
,
ÌÌI J
_transaction
ÌÌK W
:
ÌÌW X
transaction
ÌÌY d
)
ÌÌd e
;
ÌÌe f
view
ÓÓ 
.
ÓÓ 
Specificulture
ÓÓ +
=
ÓÓ, -
desSpecificulture
ÓÓ. ?
;
ÓÓ? @
bool
 
isExist
 $
=
% &

Repository
' 1
.
1 2
CheckIsExists
2 ?
(
? @
view
@ D
.
D E

ParseModel
E O
(
O P
context
P W
,
W X
transaction
Y d
)
d e
,
e f
_context
g o
:
o p
context
q x
,
x y
_transactionz Ü
:Ü á
transactionà ì
)ì î
;î ï
if
ÚÚ 
(
ÚÚ 
isExist
ÚÚ #
)
ÚÚ# $
{
ÛÛ 
result
ÙÙ "
.
ÙÙ" #
	IsSucceed
ÙÙ# ,
=
ÙÙ- .
true
ÙÙ/ 3
;
ÙÙ3 4
result
ıı "
.
ıı" #
Data
ıı# '
.
ıı' (
Add
ıı( +
(
ıı+ ,
view
ıı, 0
)
ıı0 1
;
ıı1 2
}
ˆˆ 
else
˜˜ 
{
¯¯ 
var
˘˘ 
cloneResult
˘˘  +
=
˘˘, -
await
˘˘. 3
view
˘˘4 8
.
˘˘8 9
SaveModelAsync
˘˘9 G
(
˘˘G H
false
˘˘H M
,
˘˘M N
context
˘˘O V
,
˘˘V W
transaction
˘˘X c
)
˘˘c d
.
˘˘d e
ConfigureAwait
˘˘e s
(
˘˘s t
false
˘˘t y
)
˘˘y z
;
˘˘z {
if
˙˙ 
(
˙˙  
cloneResult
˙˙  +
.
˙˙+ ,
	IsSucceed
˙˙, 5
)
˙˙5 6
{
˚˚ 
var
¸¸  #
cloneSubResult
¸¸$ 2
=
¸¸3 4
await
¸¸5 :!
CloneSubModelsAsync
¸¸; N
(
¸¸N O
cloneResult
¸¸O Z
.
¸¸Z [
Data
¸¸[ _
,
¸¸_ `
cloneCultures
¸¸a n
,
¸¸n o
context
¸¸p w
,
¸¸w x
transaction¸¸y Ñ
)¸¸Ñ Ö
.¸¸Ö Ü
ConfigureAwait¸¸Ü î
(¸¸î ï
false¸¸ï ö
)¸¸ö õ
;¸¸õ ú
if
˝˝  "
(
˝˝# $
!
˝˝$ %
cloneSubResult
˝˝% 3
.
˝˝3 4
	IsSucceed
˝˝4 =
)
˝˝= >
{
˛˛  !
cloneResult
ˇˇ$ /
.
ˇˇ/ 0
Errors
ˇˇ0 6
.
ˇˇ6 7
AddRange
ˇˇ7 ?
(
ˇˇ? @
cloneSubResult
ˇˇ@ N
.
ˇˇN O
Errors
ˇˇO U
)
ˇˇU V
;
ˇˇV W
cloneResult
ÄÄ$ /
.
ÄÄ/ 0
	Exception
ÄÄ0 9
=
ÄÄ: ;
cloneSubResult
ÄÄ< J
.
ÄÄJ K
	Exception
ÄÄK T
;
ÄÄT U
}
ÅÅ  !
result
ÉÉ  &
.
ÉÉ& '
	IsSucceed
ÉÉ' 0
=
ÉÉ1 2
result
ÉÉ3 9
.
ÉÉ9 :
	IsSucceed
ÉÉ: C
&&
ÉÉD F
cloneResult
ÉÉG R
.
ÉÉR S
	IsSucceed
ÉÉS \
&&
ÉÉ] _
cloneSubResult
ÉÉ` n
.
ÉÉn o
	IsSucceed
ÉÉo x
;
ÉÉx y
}
ÖÖ 
else
ÜÜ  
{
áá 
result
àà  &
.
àà& '
	IsSucceed
àà' 0
=
àà1 2
result
àà3 9
.
àà9 :
	IsSucceed
àà: C
&&
ààD F
cloneResult
ààG R
.
ààR S
	IsSucceed
ààS \
;
àà\ ]
result
ââ  &
.
ââ& '
Errors
ââ' -
.
ââ- .
AddRange
ââ. 6
(
ââ6 7
cloneResult
ââ7 B
.
ââB C
Errors
ââC I
)
ââI J
;
ââJ K
result
ää  &
.
ää& '
	Exception
ää' 0
=
ää1 2
cloneResult
ää3 >
.
ää> ?
	Exception
ää? H
;
ääH I
}
ãã 
}
åå 
UnitOfWorkHelper
çç (
<
çç( )

TDbContext
çç) 3
>
çç3 4
.
çç4 5
HandleTransaction
çç5 F
(
ççF G
result
ççG M
.
ççM N
	IsSucceed
ççN W
,
ççW X
isRoot
ççY _
,
çç_ `
transaction
çça l
)
ççl m
;
ççm n
}
éé 
return
èè 
result
èè !
;
èè! "
}
êê 
else
ëë 
{
íí 
return
ìì 
result
ìì !
;
ìì! "
}
îî 
}
ïï 
catch
ññ 
(
ññ 
	Exception
ññ 
ex
ññ 
)
ññ  
{
óó 
return
òò 
UnitOfWorkHelper
òò '
<
òò' (

TDbContext
òò( 2
>
òò2 3
.
òò3 4
HandleException
òò4 C
<
òòC D
List
òòD H
<
òòH I
TView
òòI N
>
òòN O
>
òòO P
(
òòP Q
ex
òòQ S
,
òòS T
isRoot
òòU [
,
òò[ \
transaction
òò] h
)
òòh i
;
òòi j
}
ôô 
finally
öö 
{
õõ 
if
úú 
(
úú 
isRoot
úú 
)
úú 
{
ùù 
context
ûû 
.
ûû 
Dispose
ûû #
(
ûû# $
)
ûû$ %
;
ûû% &
}
üü 
}
†† 
}
°° 	
public
´´ 
virtual
´´ 
async
´´ 
Task
´´ !
<
´´! " 
RepositoryResponse
´´" 4
<
´´4 5
bool
´´5 9
>
´´9 :
>
´´: ;!
CloneSubModelsAsync
´´< O
(
´´O P
TView
´´P U
parent
´´V \
,
´´\ ]
List
´´^ b
<
´´b c
SupportedCulture
´´c s
>
´´s t
cloneCultures´´u Ç
,´´Ç É

TDbContext´´Ñ é
_context´´è ó
=´´ò ô
null´´ö û
,´´û ü%
IDbContextTransaction´´† µ
_transaction´´∂ ¬
=´´√ ƒ
null´´≈ …
)´´…  
{
¨¨ 	
var
≠≠ 

taskSource
≠≠ 
=
≠≠ 
new
≠≠  "
TaskCompletionSource
≠≠! 5
<
≠≠5 6 
RepositoryResponse
≠≠6 H
<
≠≠H I
bool
≠≠I M
>
≠≠M N
>
≠≠N O
(
≠≠O P
)
≠≠P Q
;
≠≠Q R

taskSource
ÆÆ 
.
ÆÆ 
	SetResult
ÆÆ  
(
ÆÆ  !
new
ÆÆ! $ 
RepositoryResponse
ÆÆ% 7
<
ÆÆ7 8
bool
ÆÆ8 <
>
ÆÆ< =
(
ÆÆ= >
)
ÆÆ> ?
{
ÆÆ@ A
	IsSucceed
ÆÆB K
=
ÆÆL M
true
ÆÆN R
,
ÆÆR S
Data
ÆÆT X
=
ÆÆY Z
true
ÆÆ[ _
}
ÆÆ` a
)
ÆÆa b
;
ÆÆb c
return
ØØ 
await
ØØ 

taskSource
ØØ #
.
ØØ# $
Task
ØØ$ (
;
ØØ( )
}
∞∞ 	
public
ππ 
virtual
ππ 
async
ππ 
Task
ππ !
<
ππ! " 
RepositoryResponse
ππ" 4
<
ππ4 5
TModel
ππ5 ;
>
ππ; <
>
ππ< =
RemoveModelAsync
ππ> N
(
ππN O
bool
ππO S#
isRemoveRelatedModels
ππT i
=
ππj k
false
ππl q
,
ππq r

TDbContext
ππs }
_contextππ~ Ü
=ππá à
nullππâ ç
,ππç é%
IDbContextTransactionππè §
_transactionππ• ±
=ππ≤ ≥
nullππ¥ ∏
)ππ∏ π
{
∫∫ 	
UnitOfWorkHelper
ªª 
<
ªª 

TDbContext
ªª '
>
ªª' (
.
ªª( )
InitTransaction
ªª) 8
(
ªª8 9
_context
ªª9 A
,
ªªA B
_transaction
ªªC O
,
ªªO P
out
ªªQ T

TDbContext
ªªU _
context
ªª` g
,
ªªg h
out
ªªi l$
IDbContextTransactionªªm Ç
transactionªªÉ é
,ªªé è
outªªê ì
boolªªî ò
isRootªªô ü
)ªªü †
;ªª† ° 
RepositoryResponse
ΩΩ 
<
ΩΩ 
TModel
ΩΩ %
>
ΩΩ% &
result
ΩΩ' -
=
ΩΩ. /
new
ΩΩ0 3 
RepositoryResponse
ΩΩ4 F
<
ΩΩF G
TModel
ΩΩG M
>
ΩΩM N
(
ΩΩN O
)
ΩΩO P
{
ΩΩQ R
	IsSucceed
ΩΩS \
=
ΩΩ] ^
true
ΩΩ_ c
}
ΩΩd e
;
ΩΩe f
try
ææ 
{
øø 

ParseModel
¿¿ 
(
¿¿ 
_context
¿¿ #
,
¿¿# $
_transaction
¿¿% 1
)
¿¿1 2
;
¿¿2 3
if
¡¡ 
(
¡¡ #
isRemoveRelatedModels
¡¡ )
)
¡¡) *
{
¬¬ 
var
√√ !
removeRelatedResult
√√ +
=
√√, -
await
√√. 3&
RemoveRelatedModelsAsync
√√4 L
(
√√L M
(
√√M N
TView
√√N S
)
√√S T
this
√√T X
,
√√X Y
context
√√Z a
,
√√a b
transaction
√√c n
)
√√n o
.
√√o p
ConfigureAwait
√√p ~
(
√√~ 
false√√ Ñ
)√√Ñ Ö
;√√Ö Ü
if
ƒƒ 
(
ƒƒ !
removeRelatedResult
ƒƒ +
.
ƒƒ+ ,
	IsSucceed
ƒƒ, 5
)
ƒƒ5 6
{
≈≈ 
result
∆∆ 
=
∆∆  
await
∆∆! &

Repository
∆∆' 1
.
∆∆1 2
RemoveModelAsync
∆∆2 B
(
∆∆B C
Model
∆∆C H
,
∆∆H I
context
∆∆J Q
,
∆∆Q R
transaction
∆∆S ^
)
∆∆^ _
.
∆∆_ `
ConfigureAwait
∆∆` n
(
∆∆n o
false
∆∆o t
)
∆∆t u
;
∆∆u v
}
«« 
else
»» 
{
…… 
result
   
.
   
	IsSucceed
   (
=
  ) *
result
  + 1
.
  1 2
	IsSucceed
  2 ;
&&
  < >!
removeRelatedResult
  ? R
.
  R S
	IsSucceed
  S \
;
  \ ]
result
ÀÀ 
.
ÀÀ 
Errors
ÀÀ %
.
ÀÀ% &
AddRange
ÀÀ& .
(
ÀÀ. /!
removeRelatedResult
ÀÀ/ B
.
ÀÀB C
Errors
ÀÀC I
)
ÀÀI J
;
ÀÀJ K
result
ÃÃ 
.
ÃÃ 
	Exception
ÃÃ (
=
ÃÃ) *!
removeRelatedResult
ÃÃ+ >
.
ÃÃ> ?
	Exception
ÃÃ? H
;
ÃÃH I
}
ÕÕ 
}
ŒŒ 
else
œœ 
{
–– 
result
—— 
=
—— 
await
—— "

Repository
——# -
.
——- .
RemoveModelAsync
——. >
(
——> ?
Model
——? D
,
——D E
context
——F M
,
——M N
transaction
——O Z
)
——Z [
.
——[ \
ConfigureAwait
——\ j
(
——j k
false
——k p
)
——p q
;
——q r
}
““ 
UnitOfWorkHelper
””  
<
””  !

TDbContext
””! +
>
””+ ,
.
””, -
HandleTransaction
””- >
(
””> ?
result
””? E
.
””E F
	IsSucceed
””F O
,
””O P
isRoot
””Q W
,
””W X
transaction
””Y d
)
””d e
;
””e f
return
‘‘ 
result
‘‘ 
;
‘‘ 
}
’’ 
catch
÷÷ 
(
÷÷ 
	Exception
÷÷ 
ex
÷÷ 
)
÷÷  
{
◊◊ 
return
ÿÿ 
UnitOfWorkHelper
ÿÿ '
<
ÿÿ' (

TDbContext
ÿÿ( 2
>
ÿÿ2 3
.
ÿÿ3 4
HandleException
ÿÿ4 C
<
ÿÿC D
TModel
ÿÿD J
>
ÿÿJ K
(
ÿÿK L
ex
ÿÿL N
,
ÿÿN O
isRoot
ÿÿP V
,
ÿÿV W
transaction
ÿÿX c
)
ÿÿc d
;
ÿÿd e
}
ŸŸ 
finally
⁄⁄ 
{
€€ 
if
‹‹ 
(
‹‹ 
isRoot
‹‹ 
)
‹‹ 
{
›› 
context
ﬂﬂ 
.
ﬂﬂ 
Dispose
ﬂﬂ #
(
ﬂﬂ# $
)
ﬂﬂ$ %
;
ﬂﬂ% &
}
‡‡ 
}
·· 
}
‚‚ 	
public
ÎÎ 
virtual
ÎÎ 
async
ÎÎ 
Task
ÎÎ !
<
ÎÎ! " 
RepositoryResponse
ÎÎ" 4
<
ÎÎ4 5
bool
ÎÎ5 9
>
ÎÎ9 :
>
ÎÎ: ;&
RemoveRelatedModelsAsync
ÎÎ< T
(
ÎÎT U
TView
ÎÎU Z
view
ÎÎ[ _
,
ÎÎ_ `

TDbContext
ÎÎa k
_context
ÎÎl t
=
ÎÎu v
null
ÎÎw {
,
ÎÎ{ |$
IDbContextTransactionÎÎ} í
_transactionÎÎì ü
=ÎÎ† °
nullÎÎ¢ ¶
)ÎÎ¶ ß
{
ÏÏ 	
var
ÌÌ 

taskSource
ÌÌ 
=
ÌÌ 
new
ÌÌ  "
TaskCompletionSource
ÌÌ! 5
<
ÌÌ5 6 
RepositoryResponse
ÌÌ6 H
<
ÌÌH I
bool
ÌÌI M
>
ÌÌM N
>
ÌÌN O
(
ÌÌO P
)
ÌÌP Q
;
ÌÌQ R

taskSource
ÓÓ 
.
ÓÓ 
	SetResult
ÓÓ  
(
ÓÓ  !
new
ÓÓ! $ 
RepositoryResponse
ÓÓ% 7
<
ÓÓ7 8
bool
ÓÓ8 <
>
ÓÓ< =
(
ÓÓ= >
)
ÓÓ> ?
{
ÓÓ@ A
	IsSucceed
ÓÓB K
=
ÓÓL M
true
ÓÓN R
}
ÓÓS T
)
ÓÓT U
;
ÓÓU V
return
ÔÔ 
await
ÔÔ 

taskSource
ÔÔ #
.
ÔÔ# $
Task
ÔÔ$ (
;
ÔÔ( )
}
 	
public
˘˘ 
virtual
˘˘ 
async
˘˘ 
Task
˘˘ !
<
˘˘! " 
RepositoryResponse
˘˘" 4
<
˘˘4 5
TView
˘˘5 :
>
˘˘: ;
>
˘˘; <
SaveModelAsync
˘˘= K
(
˘˘K L
bool
˘˘L P
isSaveSubModels
˘˘Q `
=
˘˘a b
false
˘˘c h
,
˘˘h i

TDbContext
˘˘j t
_context
˘˘u }
=
˘˘~ 
null˘˘Ä Ñ
,˘˘Ñ Ö%
IDbContextTransaction˘˘Ü õ
_transaction˘˘ú ®
=˘˘© ™
null˘˘´ Ø
)˘˘Ø ∞
{
˙˙ 	
UnitOfWorkHelper
˚˚ 
<
˚˚ 

TDbContext
˚˚ '
>
˚˚' (
.
˚˚( )
InitTransaction
˚˚) 8
(
˚˚8 9
_context
˚˚9 A
,
˚˚A B
_transaction
˚˚C O
,
˚˚O P
out
˚˚Q T

TDbContext
˚˚U _
context
˚˚` g
,
˚˚g h
out
˚˚i l$
IDbContextTransaction˚˚m Ç
transaction˚˚É é
,˚˚é è
out˚˚ê ì
bool˚˚î ò
isRoot˚˚ô ü
)˚˚ü †
;˚˚† ° 
RepositoryResponse
¸¸ 
<
¸¸ 
TView
¸¸ $
>
¸¸$ %
result
¸¸& ,
=
¸¸- .
new
¸¸/ 2 
RepositoryResponse
¸¸3 E
<
¸¸E F
TView
¸¸F K
>
¸¸K L
(
¸¸L M
)
¸¸M N
{
¸¸O P
	IsSucceed
¸¸Q Z
=
¸¸[ \
true
¸¸] a
}
¸¸b c
;
¸¸c d
Validate
˝˝ 
(
˝˝ 
context
˝˝ 
,
˝˝ 
transaction
˝˝ )
)
˝˝) *
;
˝˝* +
if
˛˛ 
(
˛˛ 
IsValid
˛˛ 
)
˛˛ 
{
ˇˇ 
try
ÄÄ 
{
ÅÅ 

ParseModel
ÇÇ 
(
ÇÇ 
context
ÇÇ &
,
ÇÇ& '
transaction
ÇÇ( 3
)
ÇÇ3 4
;
ÇÇ4 5
result
ÉÉ 
=
ÉÉ 
await
ÉÉ "

Repository
ÉÉ# -
.
ÉÉ- .
SaveModelAsync
ÉÉ. <
(
ÉÉ< =
(
ÉÉ= >
TView
ÉÉ> C
)
ÉÉC D
this
ÉÉD H
,
ÉÉH I
_context
ÉÉJ R
:
ÉÉR S
context
ÉÉT [
,
ÉÉ[ \
_transaction
ÉÉ] i
:
ÉÉi j
transaction
ÉÉk v
)
ÉÉv w
.
ÉÉw x
ConfigureAwaitÉÉx Ü
(ÉÉÜ á
falseÉÉá å
)ÉÉå ç
;ÉÉç é
if
ÜÜ 
(
ÜÜ 
result
ÜÜ 
.
ÜÜ 
	IsSucceed
ÜÜ (
&&
ÜÜ) +
isSaveSubModels
ÜÜ, ;
)
ÜÜ; <
{
áá 
var
àà 

saveResult
àà &
=
àà' (
await
àà) . 
SaveSubModelsAsync
àà/ A
(
ààA B
Model
ààB G
,
ààG H
context
ààI P
,
ààP Q
transaction
ààR ]
)
àà] ^
.
àà^ _
ConfigureAwait
àà_ m
(
ààm n
false
ààn s
)
ààs t
;
ààt u
if
ââ 
(
ââ 
!
ââ 

saveResult
ââ '
.
ââ' (
	IsSucceed
ââ( 1
)
ââ1 2
{
ää 
result
ãã "
.
ãã" #
Errors
ãã# )
.
ãã) *
AddRange
ãã* 2
(
ãã2 3

saveResult
ãã3 =
.
ãã= >
Errors
ãã> D
)
ããD E
;
ããE F
result
åå "
.
åå" #
	Exception
åå# ,
=
åå- .

saveResult
åå/ 9
.
åå9 :
	Exception
åå: C
;
ååC D
}
çç 
result
éé 
.
éé 
	IsSucceed
éé (
=
éé) *
result
éé+ 1
.
éé1 2
	IsSucceed
éé2 ;
&&
éé< >

saveResult
éé? I
.
ééI J
	IsSucceed
ééJ S
;
ééS T
}
èè 
if
íí 
(
íí 
result
íí 
.
íí 
	IsSucceed
íí (
&&
íí) +
IsClone
íí, 3
)
íí3 4
{
ìì 
var
îî 
cloneCultures
îî )
=
îî* +
Cultures
îî, 4
.
îî4 5
Where
îî5 :
(
îî: ;
c
îî; <
=>
îî= ?
c
îî@ A
.
îîA B
Specificulture
îîB P
!=
îîQ S
Specificulture
îîT b
&&
îîc e
c
îîf g
.
îîg h
IsSupported
îîh s
)
îîs t
.
îît u
ToList
îîu {
(
îî{ |
)
îî| }
;
îî} ~
var
ïï 
cloneResult
ïï '
=
ïï( )
await
ïï* /

CloneAsync
ïï0 :
(
ïï: ;
Model
ïï; @
,
ïï@ A
cloneCultures
ïïB O
,
ïïO P
_context
ïïQ Y
:
ïïY Z
context
ïï[ b
,
ïïb c
_transaction
ïïd p
:
ïïp q
transaction
ïïr }
)
ïï} ~
.
ïï~ 
ConfigureAwaitïï ç
(ïïç é
falseïïé ì
)ïïì î
;ïïî ï
if
ññ 
(
ññ 
!
ññ 
cloneResult
ññ (
.
ññ( )
	IsSucceed
ññ) 2
)
ññ2 3
{
óó 
result
òò "
.
òò" #
Errors
òò# )
.
òò) *
AddRange
òò* 2
(
òò2 3
cloneResult
òò3 >
.
òò> ?
Errors
òò? E
)
òòE F
;
òòF G
result
ôô "
.
ôô" #
	Exception
ôô# ,
=
ôô- .
cloneResult
ôô/ :
.
ôô: ;
	Exception
ôô; D
;
ôôD E
}
öö 
result
õõ 
.
õõ 
	IsSucceed
õõ (
=
õõ) *
result
õõ+ 1
.
õõ1 2
	IsSucceed
õõ2 ;
&&
õõ< >
cloneResult
õõ? J
.
õõJ K
	IsSucceed
õõK T
;
õõT U
}
úú 
UnitOfWorkHelper
ûû $
<
ûû$ %

TDbContext
ûû% /
>
ûû/ 0
.
ûû0 1
HandleTransaction
ûû1 B
(
ûûB C
result
ûûC I
.
ûûI J
	IsSucceed
ûûJ S
,
ûûS T
isRoot
ûûU [
,
ûû[ \
transaction
ûû] h
)
ûûh i
;
ûûi j
return
üü 
result
üü !
;
üü! "
}
†† 
catch
°° 
(
°° 
	Exception
°°  
ex
°°! #
)
°°# $
{
¢¢ 
return
££ 
UnitOfWorkHelper
££ +
<
££+ ,

TDbContext
££, 6
>
££6 7
.
££7 8
HandleException
££8 G
<
££G H
TView
££H M
>
££M N
(
££N O
ex
££O Q
,
££Q R
isRoot
££S Y
,
££Y Z
transaction
££[ f
)
££f g
;
££g h
}
§§ 
finally
•• 
{
¶¶ 
if
ßß 
(
ßß 
isRoot
ßß 
)
ßß 
{
®® 
context
™™ 
.
™™  
Dispose
™™  '
(
™™' (
)
™™( )
;
™™) *
}
´´ 
}
¨¨ 
}
≠≠ 
else
ÆÆ 
{
ØØ 
if
∞∞ 
(
∞∞ 
isRoot
∞∞ 
)
∞∞ 
{
±± 
context
≥≥ 
.
≥≥ 
Dispose
≥≥ #
(
≥≥# $
)
≥≥$ %
;
≥≥% &
}
¥¥ 
return
µµ 
new
µµ  
RepositoryResponse
µµ -
<
µµ- .
TView
µµ. 3
>
µµ3 4
(
µµ4 5
)
µµ5 6
{
∂∂ 
	IsSucceed
∑∑ 
=
∑∑ 
false
∑∑  %
,
∑∑% &
Data
∏∏ 
=
∏∏ 
null
∏∏ 
,
∏∏  
Errors
ππ 
=
ππ 
Errors
ππ #
}
∫∫ 
;
∫∫ 
}
ªª 
}
ºº 	
public
≈≈ 
virtual
≈≈ 
async
≈≈ 
Task
≈≈ !
<
≈≈! " 
RepositoryResponse
≈≈" 4
<
≈≈4 5
bool
≈≈5 9
>
≈≈9 :
>
≈≈: ; 
SaveSubModelsAsync
≈≈< N
(
≈≈N O
TModel
≈≈O U
parent
≈≈V \
,
≈≈\ ]

TDbContext
≈≈^ h
_context
≈≈i q
,
≈≈q r$
IDbContextTransaction≈≈s à
_transaction≈≈â ï
)≈≈ï ñ
{
∆∆ 	
var
«« 

taskSource
«« 
=
«« 
new
««  "
TaskCompletionSource
««! 5
<
««5 6 
RepositoryResponse
««6 H
<
««H I
bool
««I M
>
««M N
>
««N O
(
««O P
)
««P Q
;
««Q R

taskSource
»» 
.
»» 
	SetResult
»»  
(
»»  !
new
»»! $ 
RepositoryResponse
»»% 7
<
»»7 8
bool
»»8 <
>
»»< =
(
»»= >
)
»»> ?
{
»»@ A
	IsSucceed
»»B K
=
»»L M
true
»»N R
}
»»S T
)
»»T U
;
»»U V
return
…… 
await
…… 

taskSource
…… #
.
……# $
Task
……$ (
;
……( )
}
   	
public
ÿÿ 
virtual
ÿÿ 
TView
ÿÿ 
InitView
ÿÿ %
(
ÿÿ% &
TModel
ÿÿ& ,
model
ÿÿ- 2
=
ÿÿ3 4
null
ÿÿ5 9
,
ÿÿ9 :
bool
ÿÿ; ?

isLazyLoad
ÿÿ@ J
=
ÿÿK L
true
ÿÿM Q
,
ÿÿQ R

TDbContext
ÿÿS ]
_context
ÿÿ^ f
=
ÿÿg h
null
ÿÿi m
,
ÿÿm n$
IDbContextTransactionÿÿo Ñ
_transactionÿÿÖ ë
=ÿÿí ì
nullÿÿî ò
)ÿÿò ô
{
ŸŸ 	
Type
⁄⁄ 
	classType
⁄⁄ 
=
⁄⁄ 
typeof
⁄⁄ #
(
⁄⁄# $
TView
⁄⁄$ )
)
⁄⁄) *
;
⁄⁄* +
ConstructorInfo
‹‹ 
classConstructor
‹‹ ,
=
‹‹- .
	classType
‹‹/ 8
.
‹‹8 9
GetConstructor
‹‹9 G
(
‹‹G H
new
‹‹H K
Type
‹‹L P
[
‹‹P Q
]
‹‹Q R
{
‹‹S T
}
‹‹U V
)
‹‹V W
;
‹‹W X
if
›› 
(
›› 
model
›› 
==
›› 
null
›› 
&&
››  
classConstructor
››! 1
!=
››2 4
null
››5 9
)
››9 :
{
ﬁﬁ 
return
ﬂﬂ 
(
ﬂﬂ 
TView
ﬂﬂ 
)
ﬂﬂ 
classConstructor
ﬂﬂ .
.
ﬂﬂ. /
Invoke
ﬂﬂ/ 5
(
ﬂﬂ5 6
new
ﬂﬂ6 9
object
ﬂﬂ: @
[
ﬂﬂ@ A
]
ﬂﬂA B
{
ﬂﬂC D
}
ﬂﬂE F
)
ﬂﬂF G
;
ﬂﬂG H
}
‡‡ 
else
·· 
{
‚‚ 
classConstructor
„„  
=
„„! "
	classType
„„# ,
.
„„, -
GetConstructor
„„- ;
(
„„; <
new
„„< ?
Type
„„@ D
[
„„D E
]
„„E F
{
„„G H
typeof
„„I O
(
„„O P
TModel
„„P V
)
„„V W
,
„„W X
typeof
„„Y _
(
„„_ `
bool
„„` d
)
„„d e
,
„„e f
typeof
„„g m
(
„„m n

TDbContext
„„n x
)
„„x y
,
„„y z
typeof„„{ Å
(„„Å Ç%
IDbContextTransaction„„Ç ó
)„„ó ò
}„„ô ö
)„„ö õ
;„„õ ú
if
‰‰ 
(
‰‰ 
classConstructor
‰‰ $
!=
‰‰% '
null
‰‰( ,
)
‰‰, -
{
ÂÂ 
return
ÊÊ 
(
ÊÊ 
TView
ÊÊ !
)
ÊÊ! "
classConstructor
ÊÊ" 2
.
ÊÊ2 3
Invoke
ÊÊ3 9
(
ÊÊ9 :
new
ÊÊ: =
object
ÊÊ> D
[
ÊÊD E
]
ÊÊE F
{
ÊÊG H
model
ÊÊI N
,
ÊÊN O

isLazyLoad
ÊÊP Z
,
ÊÊZ [
_context
ÊÊ\ d
,
ÊÊd e
_transaction
ÊÊf r
}
ÊÊs t
)
ÊÊt u
;
ÊÊu v
}
ÁÁ 
else
ËË 
{
ÈÈ 
classConstructor
ÍÍ $
=
ÍÍ% &
	classType
ÍÍ' 0
.
ÍÍ0 1
GetConstructor
ÍÍ1 ?
(
ÍÍ? @
new
ÍÍ@ C
Type
ÍÍD H
[
ÍÍH I
]
ÍÍI J
{
ÍÍK L
typeof
ÍÍM S
(
ÍÍS T
TModel
ÍÍT Z
)
ÍÍZ [
,
ÍÍ[ \
typeof
ÍÍ] c
(
ÍÍc d

TDbContext
ÍÍd n
)
ÍÍn o
,
ÍÍo p
typeof
ÍÍq w
(
ÍÍw x$
IDbContextTransactionÍÍx ç
)ÍÍç é
}ÍÍè ê
)ÍÍê ë
;ÍÍë í
return
ÎÎ 
(
ÎÎ 
TView
ÎÎ !
)
ÎÎ! "
classConstructor
ÎÎ" 2
.
ÎÎ2 3
Invoke
ÎÎ3 9
(
ÎÎ9 :
new
ÎÎ: =
object
ÎÎ> D
[
ÎÎD E
]
ÎÎE F
{
ÎÎG H
model
ÎÎI N
,
ÎÎN O
_context
ÎÎP X
,
ÎÎX Y
_transaction
ÎÎZ f
}
ÎÎg h
)
ÎÎh i
;
ÎÎi j
}
ÏÏ 
}
ÌÌ 
}
ÓÓ 	
public
˜˜ 
virtual
˜˜ 
TView
˜˜ 
	ParseView
˜˜ &
(
˜˜& '
bool
˜˜' +
isExpand
˜˜, 4
=
˜˜5 6
true
˜˜7 ;
,
˜˜; <

TDbContext
˜˜= G
_context
˜˜H P
=
˜˜Q R
null
˜˜S W
,
˜˜W X#
IDbContextTransaction
˜˜Y n
_transaction
˜˜o {
=
˜˜| }
null˜˜~ Ç
)
¯¯4 5
{
˘˘ 	
Mapper
˚˚ 
.
˚˚ 
Map
˚˚ 
<
˚˚ 
TModel
˚˚ 
,
˚˚ 
TView
˚˚ $
>
˚˚$ %
(
˚˚% &
Model
˚˚& +
,
˚˚+ ,
(
˚˚- .
TView
˚˚. 3
)
˚˚3 4
this
˚˚4 8
)
˚˚8 9
;
˚˚9 :
if
¸¸ 
(
¸¸ 
isExpand
¸¸ 
)
¸¸ 
{
˝˝ 
UnitOfWorkHelper
˛˛  
<
˛˛  !

TDbContext
˛˛! +
>
˛˛+ ,
.
˛˛, -
InitTransaction
˛˛- <
(
˛˛< =
_context
˛˛= E
,
˛˛E F
_transaction
˛˛G S
,
˛˛S T
out
˛˛U X

TDbContext
˛˛Y c
context
˛˛d k
,
˛˛k l
out
˛˛m p$
IDbContextTransaction˛˛q Ü
transaction˛˛á í
,˛˛í ì
out˛˛î ó
bool˛˛ò ú
isRoot˛˛ù £
)˛˛£ §
;˛˛§ •
try
ˇˇ 
{
ÄÄ 

ExpandView
ÅÅ 
(
ÅÅ 
context
ÅÅ &
,
ÅÅ& '
transaction
ÅÅ( 3
)
ÅÅ3 4
;
ÅÅ4 5
}
ÇÇ 
catch
ÉÉ 
(
ÉÉ 
	Exception
ÉÉ  
ex
ÉÉ! #
)
ÉÉ# $
{
ÑÑ 

Repository
ÖÖ 
.
ÖÖ 
LogErrorMessage
ÖÖ .
(
ÖÖ. /
ex
ÖÖ/ 1
)
ÖÖ1 2
;
ÖÖ2 3
if
ÜÜ 
(
ÜÜ 
isRoot
ÜÜ 
)
ÜÜ 
{
áá 
transaction
ââ #
.
ââ# $
Rollback
ââ$ ,
(
ââ, -
)
ââ- .
;
ââ. /
}
ää 
}
ãã 
finally
åå 
{
çç 
if
éé 
(
éé 
isRoot
éé 
)
éé 
{
èè 
context
ëë 
.
ëë  
Dispose
ëë  '
(
ëë' (
)
ëë( )
;
ëë) *
}
íí 
}
ìì 
}
îî 
return
ïï 
(
ïï 
TView
ïï 
)
ïï 
this
ïï 
;
ïï 
}
ññ 	
public
ùù 
virtual
ùù 
void
ùù 

ExpandView
ùù &
(
ùù& '

TDbContext
ùù' 1
_context
ùù2 :
=
ùù; <
null
ùù= A
,
ùùA B#
IDbContextTransaction
ùùC X
_transaction
ùùY e
=
ùùf g
null
ùùh l
)
ùùl m
{
ûû 	
}
üü 	
public
©© 
virtual
©©  
RepositoryResponse
©© )
<
©©) *
List
©©* .
<
©©. /
TView
©©/ 4
>
©©4 5
>
©©5 6
Clone
©©7 <
(
©©< =
TModel
©©= C
model
©©D I
,
©©I J
List
©©K O
<
©©O P
SupportedCulture
©©P `
>
©©` a
cloneCultures
©©b o
,
©©o p

TDbContext
©©q {
_context©©| Ñ
=©©Ö Ü
null©©á ã
,©©ã å%
IDbContextTransaction©©ç ¢
_transaction©©£ Ø
=©©∞ ±
null©©≤ ∂
)©©∂ ∑
{
™™ 	
UnitOfWorkHelper
´´ 
<
´´ 

TDbContext
´´ '
>
´´' (
.
´´( )
InitTransaction
´´) 8
(
´´8 9
_context
´´9 A
,
´´A B
_transaction
´´C O
,
´´O P
out
´´Q T

TDbContext
´´U _
context
´´` g
,
´´g h
out
´´i l$
IDbContextTransaction´´m Ç
transaction´´É é
,´´é è
out´´ê ì
bool´´î ò
isRoot´´ô ü
)´´ü †
;´´† ° 
RepositoryResponse
¨¨ 
<
¨¨ 
List
¨¨ #
<
¨¨# $
TView
¨¨$ )
>
¨¨) *
>
¨¨* +
result
¨¨, 2
=
¨¨3 4
new
¨¨5 8 
RepositoryResponse
¨¨9 K
<
¨¨K L
List
¨¨L P
<
¨¨P Q
TView
¨¨Q V
>
¨¨V W
>
¨¨W X
(
¨¨X Y
)
¨¨Y Z
{
≠≠ 
	IsSucceed
ÆÆ 
=
ÆÆ 
true
ÆÆ  
,
ÆÆ  !
Data
ØØ 
=
ØØ 
new
ØØ 
List
ØØ 
<
ØØ  
TView
ØØ  %
>
ØØ% &
(
ØØ& '
)
ØØ' (
}
∞∞ 
;
∞∞ 
try
≤≤ 
{
≥≥ 
if
¥¥ 
(
¥¥ 
cloneCultures
¥¥ !
!=
¥¥" $
null
¥¥% )
)
¥¥) *
{
µµ 
foreach
∂∂ 
(
∂∂ 
var
∂∂  
culture
∂∂! (
in
∂∂) +
cloneCultures
∂∂, 9
)
∂∂9 :
{
∑∑ 
string
∏∏ 
desSpecificulture
∏∏ 0
=
∏∏1 2
culture
∏∏3 :
.
∏∏: ;
Specificulture
∏∏; I
;
∏∏I J
TView
∫∫ 
view
∫∫ "
=
∫∫# $
InitView
∫∫% -
(
∫∫- .
)
∫∫. /
;
∫∫/ 0
view
ªª 
.
ªª 
Model
ªª "
=
ªª# $
model
ªª% *
;
ªª* +
view
ºº 
.
ºº 
	ParseView
ºº &
(
ºº& '
isExpand
ºº' /
:
ºº/ 0
false
ºº1 6
,
ºº6 7
_context
ºº8 @
:
ºº@ A
context
ººB I
,
ººI J
_transaction
ººK W
:
ººW X
transaction
ººY d
)
ººd e
;
ººe f
view
ΩΩ 
.
ΩΩ 
Specificulture
ΩΩ +
=
ΩΩ, -
desSpecificulture
ΩΩ. ?
;
ΩΩ? @
bool
øø 
isExist
øø $
=
øø% &

Repository
øø' 1
.
øø1 2
CheckIsExists
øø2 ?
(
øø? @
view
øø@ D
.
øøD E

ParseModel
øøE O
(
øøO P
context
øøP W
,
øøW X
transaction
øøY d
)
øød e
,
øøe f
_context
øøg o
:
øøo p
context
øøq x
,
øøx y
_transactionøøz Ü
:øøÜ á
transactionøøà ì
)øøì î
;øøî ï
if
¡¡ 
(
¡¡ 
isExist
¡¡ #
)
¡¡# $
{
¬¬ 
result
√√ "
.
√√" #
	IsSucceed
√√# ,
=
√√- .
true
√√/ 3
;
√√3 4
result
ƒƒ "
.
ƒƒ" #
Data
ƒƒ# '
.
ƒƒ' (
Add
ƒƒ( +
(
ƒƒ+ ,
view
ƒƒ, 0
)
ƒƒ0 1
;
ƒƒ1 2
}
≈≈ 
else
∆∆ 
{
«« 
var
»» 
cloneResult
»»  +
=
»», -
view
»». 2
.
»»2 3
	SaveModel
»»3 <
(
»»< =
false
»»= B
,
»»B C
context
»»D K
,
»»K L
transaction
»»M X
)
»»X Y
;
»»Y Z
if
…… 
(
……  
cloneResult
……  +
.
……+ ,
	IsSucceed
……, 5
)
……5 6
{
   
var
ÀÀ  #
cloneSubResult
ÀÀ$ 2
=
ÀÀ3 4
CloneSubModels
ÀÀ5 C
(
ÀÀC D
cloneResult
ÀÀD O
.
ÀÀO P
Data
ÀÀP T
,
ÀÀT U
cloneCultures
ÀÀV c
,
ÀÀc d
context
ÀÀe l
,
ÀÀl m
transaction
ÀÀn y
)
ÀÀy z
;
ÀÀz {
if
ÃÃ  "
(
ÃÃ# $
!
ÃÃ$ %
cloneSubResult
ÃÃ% 3
.
ÃÃ3 4
	IsSucceed
ÃÃ4 =
)
ÃÃ= >
{
ÕÕ  !
cloneResult
ŒŒ$ /
.
ŒŒ/ 0
Errors
ŒŒ0 6
.
ŒŒ6 7
AddRange
ŒŒ7 ?
(
ŒŒ? @
cloneSubResult
ŒŒ@ N
.
ŒŒN O
Errors
ŒŒO U
)
ŒŒU V
;
ŒŒV W
cloneResult
œœ$ /
.
œœ/ 0
	Exception
œœ0 9
=
œœ: ;
cloneSubResult
œœ< J
.
œœJ K
	Exception
œœK T
;
œœT U
}
––  !
result
““  &
.
““& '
	IsSucceed
““' 0
=
““1 2
result
““3 9
.
““9 :
	IsSucceed
““: C
&&
““D F
cloneResult
““G R
.
““R S
	IsSucceed
““S \
&&
““] _
cloneSubResult
““` n
.
““n o
	IsSucceed
““o x
;
““x y
}
‘‘ 
else
’’  
{
÷÷ 
result
◊◊  &
.
◊◊& '
	IsSucceed
◊◊' 0
=
◊◊1 2
result
◊◊3 9
.
◊◊9 :
	IsSucceed
◊◊: C
&&
◊◊D F
cloneResult
◊◊G R
.
◊◊R S
	IsSucceed
◊◊S \
;
◊◊\ ]
result
ÿÿ  &
.
ÿÿ& '
Errors
ÿÿ' -
.
ÿÿ- .
AddRange
ÿÿ. 6
(
ÿÿ6 7
cloneResult
ÿÿ7 B
.
ÿÿB C
Errors
ÿÿC I
)
ÿÿI J
;
ÿÿJ K
result
ŸŸ  &
.
ŸŸ& '
	Exception
ŸŸ' 0
=
ŸŸ1 2
cloneResult
ŸŸ3 >
.
ŸŸ> ?
	Exception
ŸŸ? H
;
ŸŸH I
}
⁄⁄ 
}
€€ 
UnitOfWorkHelper
‹‹ (
<
‹‹( )

TDbContext
‹‹) 3
>
‹‹3 4
.
‹‹4 5
HandleTransaction
‹‹5 F
(
‹‹F G
result
‹‹G M
.
‹‹M N
	IsSucceed
‹‹N W
,
‹‹W X
isRoot
‹‹Y _
,
‹‹_ `
transaction
‹‹a l
)
‹‹l m
;
‹‹m n
}
›› 
return
ﬁﬁ 
result
ﬁﬁ !
;
ﬁﬁ! "
}
ﬂﬂ 
else
‡‡ 
{
·· 
return
‚‚ 
result
‚‚ !
;
‚‚! "
}
„„ 
}
‰‰ 
catch
ÂÂ 
(
ÂÂ 
	Exception
ÂÂ 
ex
ÂÂ 
)
ÂÂ  
{
ÊÊ 
result
ÁÁ 
.
ÁÁ 
	IsSucceed
ÁÁ  
=
ÁÁ! "
false
ÁÁ# (
;
ÁÁ( )
result
ËË 
.
ËË 
	Exception
ËË  
=
ËË! "
ex
ËË# %
;
ËË% &
return
ÈÈ 
result
ÈÈ 
;
ÈÈ 
}
ÍÍ 
finally
ÎÎ 
{
ÏÏ 
if
ÌÌ 
(
ÌÌ 
isRoot
ÌÌ 
)
ÌÌ 
{
ÓÓ 
context
ÔÔ 
.
ÔÔ 
Dispose
ÔÔ #
(
ÔÔ# $
)
ÔÔ$ %
;
ÔÔ% &
}
 
}
ÒÒ 
}
ÚÚ 	
public
¸¸ 
virtual
¸¸  
RepositoryResponse
¸¸ )
<
¸¸) *
bool
¸¸* .
>
¸¸. /
CloneSubModels
¸¸0 >
(
¸¸> ?
TView
¸¸? D
parent
¸¸E K
,
¸¸K L
List
¸¸M Q
<
¸¸Q R
SupportedCulture
¸¸R b
>
¸¸b c
cloneCultures
¸¸d q
,
¸¸q r

TDbContext
¸¸s }
_context¸¸~ Ü
=¸¸á à
null¸¸â ç
,¸¸ç é%
IDbContextTransaction¸¸è §
_transaction¸¸• ±
=¸¸≤ ≥
null¸¸¥ ∏
)¸¸∏ π
{
˝˝ 	
return
˛˛ 
new
˛˛  
RepositoryResponse
˛˛ )
<
˛˛) *
bool
˛˛* .
>
˛˛. /
(
˛˛/ 0
)
˛˛0 1
{
˛˛2 3
	IsSucceed
˛˛4 =
=
˛˛> ?
true
˛˛@ D
}
˛˛E F
;
˛˛F G
}
ˇˇ 	
public
àà 
virtual
àà  
RepositoryResponse
àà )
<
àà) *
TModel
àà* 0
>
àà0 1
RemoveModel
àà2 =
(
àà= >
bool
àà> B#
isRemoveRelatedModels
ààC X
=
ààY Z
false
àà[ `
,
àà` a

TDbContext
ààb l
_context
ààm u
=
ààv w
null
ààx |
,
àà| }$
IDbContextTransactionàà~ ì
_transactionààî †
=àà° ¢
nullàà£ ß
)ààß ®
{
ââ 	
UnitOfWorkHelper
ää 
<
ää 

TDbContext
ää '
>
ää' (
.
ää( )
InitTransaction
ää) 8
(
ää8 9
_context
ää9 A
,
ääA B
_transaction
ääC O
,
ääO P
out
ääQ T

TDbContext
ääU _
context
ää` g
,
ääg h
out
ääi l$
IDbContextTransactionääm Ç
transactionääÉ é
,ääé è
outääê ì
boolääî ò
isRootääô ü
)ääü †
;ää† ° 
RepositoryResponse
ãã 
<
ãã 
TModel
ãã %
>
ãã% &
result
ãã' -
=
ãã. /
new
ãã0 3 
RepositoryResponse
ãã4 F
<
ããF G
TModel
ããG M
>
ããM N
(
ããN O
)
ããO P
{
ããQ R
	IsSucceed
ããS \
=
ãã] ^
true
ãã_ c
}
ããd e
;
ããe f
try
åå 
{
çç 

ParseModel
éé 
(
éé 
_context
éé #
,
éé# $
_transaction
éé% 1
)
éé1 2
;
éé2 3
if
èè 
(
èè #
isRemoveRelatedModels
èè )
)
èè) *
{
êê 
var
ëë !
removeRelatedResult
ëë +
=
ëë, -!
RemoveRelatedModels
ëë. A
(
ëëA B
(
ëëB C
TView
ëëC H
)
ëëH I
this
ëëI M
,
ëëM N
context
ëëO V
,
ëëV W
transaction
ëëX c
)
ëëc d
;
ëëd e
if
íí 
(
íí !
removeRelatedResult
íí +
.
íí+ ,
	IsSucceed
íí, 5
)
íí5 6
{
ìì 
result
îî 
=
îî  

Repository
îî! +
.
îî+ ,
RemoveModel
îî, 7
(
îî7 8
Model
îî8 =
,
îî= >
context
îî? F
,
îîF G
transaction
îîH S
)
îîS T
;
îîT U
}
ïï 
else
ññ 
{
óó 
result
òò 
.
òò 
	IsSucceed
òò (
=
òò) *
result
òò+ 1
.
òò1 2
	IsSucceed
òò2 ;
&&
òò< >!
removeRelatedResult
òò? R
.
òòR S
	IsSucceed
òòS \
;
òò\ ]
result
ôô 
.
ôô 
Errors
ôô %
.
ôô% &
AddRange
ôô& .
(
ôô. /!
removeRelatedResult
ôô/ B
.
ôôB C
Errors
ôôC I
)
ôôI J
;
ôôJ K
result
öö 
.
öö 
	Exception
öö (
=
öö) *!
removeRelatedResult
öö+ >
.
öö> ?
	Exception
öö? H
;
ööH I
}
õõ 
}
úú 
else
ùù 
{
ûû 
result
üü 
=
üü 

Repository
üü '
.
üü' (
RemoveModel
üü( 3
(
üü3 4
Model
üü4 9
,
üü9 :
context
üü; B
,
üüB C
transaction
üüD O
)
üüO P
;
üüP Q
}
†† 
UnitOfWorkHelper
¢¢  
<
¢¢  !

TDbContext
¢¢! +
>
¢¢+ ,
.
¢¢, -
HandleTransaction
¢¢- >
(
¢¢> ?
result
¢¢? E
.
¢¢E F
	IsSucceed
¢¢F O
,
¢¢O P
isRoot
¢¢Q W
,
¢¢W X
transaction
¢¢Y d
)
¢¢d e
;
¢¢e f
return
££ 
result
££ 
;
££ 
}
§§ 
catch
•• 
(
•• 
	Exception
•• 
ex
•• 
)
••  
{
¶¶ 
return
ßß 
UnitOfWorkHelper
ßß '
<
ßß' (

TDbContext
ßß( 2
>
ßß2 3
.
ßß3 4
HandleException
ßß4 C
<
ßßC D
TModel
ßßD J
>
ßßJ K
(
ßßK L
ex
ßßL N
,
ßßN O
isRoot
ßßP V
,
ßßV W
transaction
ßßX c
)
ßßc d
;
ßßd e
}
®® 
finally
©© 
{
™™ 
if
´´ 
(
´´ 
isRoot
´´ 
)
´´ 
{
¨¨ 
context
ÆÆ 
.
ÆÆ 
Dispose
ÆÆ #
(
ÆÆ# $
)
ÆÆ$ %
;
ÆÆ% &
}
ØØ 
}
∞∞ 
}
±± 	
public
∫∫ 
virtual
∫∫  
RepositoryResponse
∫∫ )
<
∫∫) *
bool
∫∫* .
>
∫∫. /!
RemoveRelatedModels
∫∫0 C
(
∫∫C D
TView
∫∫D I
view
∫∫J N
,
∫∫N O

TDbContext
∫∫P Z
_context
∫∫[ c
=
∫∫d e
null
∫∫f j
,
∫∫j k$
IDbContextTransaction∫∫l Å
_transaction∫∫Ç é
=∫∫è ê
null∫∫ë ï
)∫∫ï ñ
{
ªª 	
return
ºº 
new
ºº  
RepositoryResponse
ºº )
<
ºº) *
bool
ºº* .
>
ºº. /
(
ºº/ 0
)
ºº0 1
{
ºº2 3
	IsSucceed
ºº4 =
=
ºº> ?
true
ºº@ D
}
ººE F
;
ººF G
}
ΩΩ 	
public
∆∆ 
virtual
∆∆  
RepositoryResponse
∆∆ )
<
∆∆) *
TView
∆∆* /
>
∆∆/ 0
	SaveModel
∆∆1 :
(
∆∆: ;
bool
∆∆; ?
isSaveSubModels
∆∆@ O
=
∆∆P Q
false
∆∆R W
,
∆∆W X

TDbContext
∆∆Y c
_context
∆∆d l
=
∆∆m n
null
∆∆o s
,
∆∆s t$
IDbContextTransaction∆∆u ä
_transaction∆∆ã ó
=∆∆ò ô
null∆∆ö û
)∆∆û ü
{
«« 	
UnitOfWorkHelper
»» 
<
»» 

TDbContext
»» '
>
»»' (
.
»»( )
InitTransaction
»») 8
(
»»8 9
_context
»»9 A
,
»»A B
_transaction
»»C O
,
»»O P
out
»»Q T

TDbContext
»»U _
context
»»` g
,
»»g h
out
»»i l$
IDbContextTransaction»»m Ç
transaction»»É é
,»»é è
out»»ê ì
bool»»î ò
isRoot»»ô ü
)»»ü †
;»»† ° 
RepositoryResponse
…… 
<
…… 
TView
…… $
>
……$ %
result
……& ,
=
……- .
new
……/ 2 
RepositoryResponse
……3 E
<
……E F
TView
……F K
>
……K L
(
……L M
)
……M N
{
……O P
	IsSucceed
……Q Z
=
……[ \
true
……] a
}
……b c
;
……c d
Validate
   
(
   
context
   
,
   
transaction
   )
)
  ) *
;
  * +
if
ÀÀ 
(
ÀÀ 
IsValid
ÀÀ 
)
ÀÀ 
{
ÃÃ 
try
ÕÕ 
{
ŒŒ 

ParseModel
œœ 
(
œœ 
context
œœ &
,
œœ& '
transaction
œœ( 3
)
œœ3 4
;
œœ4 5
result
–– 
=
–– 

Repository
–– '
.
––' (
	SaveModel
––( 1
(
––1 2
(
––2 3
TView
––3 8
)
––8 9
this
––9 =
,
––= >
_context
––? G
:
––G H
context
––I P
,
––P Q
_transaction
––R ^
:
––^ _
transaction
––` k
)
––k l
;
––l m
if
”” 
(
”” 
result
”” 
.
”” 
	IsSucceed
”” (
&&
””) +
isSaveSubModels
””, ;
)
””; <
{
‘‘ 
var
’’ 

saveResult
’’ &
=
’’' (
SaveSubModels
’’) 6
(
’’6 7
Model
’’7 <
,
’’< =
context
’’> E
,
’’E F
transaction
’’G R
)
’’R S
;
’’S T
if
÷÷ 
(
÷÷ 
!
÷÷ 

saveResult
÷÷ '
.
÷÷' (
	IsSucceed
÷÷( 1
)
÷÷1 2
{
◊◊ 
result
ÿÿ "
.
ÿÿ" #
Errors
ÿÿ# )
.
ÿÿ) *
AddRange
ÿÿ* 2
(
ÿÿ2 3

saveResult
ÿÿ3 =
.
ÿÿ= >
Errors
ÿÿ> D
)
ÿÿD E
;
ÿÿE F
result
ŸŸ "
.
ŸŸ" #
	Exception
ŸŸ# ,
=
ŸŸ- .

saveResult
ŸŸ/ 9
.
ŸŸ9 :
	Exception
ŸŸ: C
;
ŸŸC D
}
⁄⁄ 
result
€€ 
.
€€ 
	IsSucceed
€€ (
=
€€) *
result
€€+ 1
.
€€1 2
	IsSucceed
€€2 ;
&&
€€< >

saveResult
€€? I
.
€€I J
	IsSucceed
€€J S
;
€€S T
}
‹‹ 
if
ﬂﬂ 
(
ﬂﬂ 
result
ﬂﬂ 
.
ﬂﬂ 
	IsSucceed
ﬂﬂ (
&&
ﬂﬂ) +
IsClone
ﬂﬂ, 3
&&
ﬂﬂ4 6
isRoot
ﬂﬂ7 =
)
ﬂﬂ= >
{
‡‡ 
var
·· 
cloneCultures
·· )
=
··* +
Cultures
··, 4
.
··4 5
Where
··5 :
(
··: ;
c
··; <
=>
··= ?
c
··@ A
.
··A B
Specificulture
··B P
!=
··Q S
Specificulture
··T b
&&
··c e
c
··f g
.
··g h
IsSupported
··h s
)
··s t
.
··t u
ToList
··u {
(
··{ |
)
··| }
;
··} ~
var
‚‚ 
cloneResult
‚‚ '
=
‚‚( )
Clone
‚‚* /
(
‚‚/ 0
Model
‚‚0 5
,
‚‚5 6
cloneCultures
‚‚7 D
,
‚‚D E
_context
‚‚F N
:
‚‚N O
context
‚‚P W
,
‚‚W X
_transaction
‚‚Y e
:
‚‚e f
transaction
‚‚g r
)
‚‚r s
;
‚‚s t
if
„„ 
(
„„ 
!
„„ 
cloneResult
„„ (
.
„„( )
	IsSucceed
„„) 2
)
„„2 3
{
‰‰ 
result
ÂÂ "
.
ÂÂ" #
Errors
ÂÂ# )
.
ÂÂ) *
AddRange
ÂÂ* 2
(
ÂÂ2 3
cloneResult
ÂÂ3 >
.
ÂÂ> ?
Errors
ÂÂ? E
)
ÂÂE F
;
ÂÂF G
result
ÊÊ "
.
ÊÊ" #
	Exception
ÊÊ# ,
=
ÊÊ- .
cloneResult
ÊÊ/ :
.
ÊÊ: ;
	Exception
ÊÊ; D
;
ÊÊD E
}
ÁÁ 
result
ËË 
.
ËË 
	IsSucceed
ËË (
=
ËË) *
result
ËË+ 1
.
ËË1 2
	IsSucceed
ËË2 ;
&&
ËË< >
cloneResult
ËË? J
.
ËËJ K
	IsSucceed
ËËK T
;
ËËT U
}
ÈÈ 
UnitOfWorkHelper
ÎÎ $
<
ÎÎ$ %

TDbContext
ÎÎ% /
>
ÎÎ/ 0
.
ÎÎ0 1
HandleTransaction
ÎÎ1 B
(
ÎÎB C
result
ÎÎC I
.
ÎÎI J
	IsSucceed
ÎÎJ S
,
ÎÎS T
isRoot
ÎÎU [
,
ÎÎ[ \
transaction
ÎÎ] h
)
ÎÎh i
;
ÎÎi j
return
ÏÏ 
result
ÏÏ !
;
ÏÏ! "
}
ÌÌ 
catch
ÓÓ 
(
ÓÓ 
	Exception
ÓÓ  
ex
ÓÓ! #
)
ÓÓ# $
{
ÔÔ 
return
 
UnitOfWorkHelper
 +
<
+ ,

TDbContext
, 6
>
6 7
.
7 8
HandleException
8 G
<
G H
TView
H M
>
M N
(
N O
ex
O Q
,
Q R
isRoot
S Y
,
Y Z
transaction
[ f
)
f g
;
g h
}
ÒÒ 
finally
ÚÚ 
{
ÛÛ 
if
ÙÙ 
(
ÙÙ 
isRoot
ÙÙ 
)
ÙÙ 
{
ıı 
context
˜˜ 
.
˜˜  
Dispose
˜˜  '
(
˜˜' (
)
˜˜( )
;
˜˜) *
}
¯¯ 
}
˘˘ 
}
˙˙ 
else
˚˚ 
{
¸¸ 
if
˝˝ 
(
˝˝ 
isRoot
˝˝ 
)
˝˝ 
{
˛˛ 
context
ÄÄ 
.
ÄÄ 
Dispose
ÄÄ #
(
ÄÄ# $
)
ÄÄ$ %
;
ÄÄ% &
}
ÅÅ 
return
ÇÇ 
new
ÇÇ  
RepositoryResponse
ÇÇ -
<
ÇÇ- .
TView
ÇÇ. 3
>
ÇÇ3 4
(
ÇÇ4 5
)
ÇÇ5 6
{
ÉÉ 
	IsSucceed
ÑÑ 
=
ÑÑ 
false
ÑÑ  %
,
ÑÑ% &
Data
ÖÖ 
=
ÖÖ 
null
ÖÖ 
,
ÖÖ  
Errors
ÜÜ 
=
ÜÜ 
Errors
ÜÜ #
}
áá 
;
áá 
}
àà 
}
ââ 	
public
íí 
virtual
íí  
RepositoryResponse
íí )
<
íí) *
bool
íí* .
>
íí. /
SaveSubModels
íí0 =
(
íí= >
TModel
íí> D
parent
ííE K
,
ííK L

TDbContext
ííM W
_context
ííX `
,
íí` a#
IDbContextTransaction
ííb w
_transactionííx Ñ
)ííÑ Ö
{
ìì 	
return
îî 
new
îî  
RepositoryResponse
îî )
<
îî) *
bool
îî* .
>
îî. /
(
îî/ 0
)
îî0 1
{
îî2 3
	IsSucceed
îî4 =
=
îî> ?
true
îî@ D
}
îîE F
;
îîF G
}
ïï 	
	protected
°° 
ViewModelBase
°° 
(
°°  
TModel
°°  &
model
°°' ,
,
°°, -

TDbContext
°°. 8
_context
°°9 A
=
°°B C
null
°°D H
,
°°H I#
IDbContextTransaction
°°J _
_transaction
°°` l
=
°°m n
null
°°o s
)
°°s t
{
¢¢ 	
this
££ 
.
££ 
Model
££ 
=
££ 
model
££ 
;
££ 
	ParseView
§§ 
(
§§ 
_context
§§ 
:
§§ 
_context
§§  (
,
§§( )
_transaction
§§* 6
:
§§6 7
_transaction
§§8 D
)
§§D E
;
§§E F
}
•• 	
	protected
ÆÆ 
ViewModelBase
ÆÆ 
(
ÆÆ  
TModel
ÆÆ  &
model
ÆÆ' ,
,
ÆÆ, -
bool
ÆÆ. 2

isLazyLoad
ÆÆ3 =
,
ÆÆ= >

TDbContext
ÆÆ? I
_context
ÆÆJ R
=
ÆÆS T
null
ÆÆU Y
,
ÆÆY Z#
IDbContextTransaction
ÆÆ[ p
_transaction
ÆÆq }
=
ÆÆ~ 
nullÆÆÄ Ñ
)ÆÆÑ Ö
{
ØØ 	
this
∞∞ 
.
∞∞ 
Model
∞∞ 
=
∞∞ 
model
∞∞ 
;
∞∞ 

IsLazyLoad
±± 
=
±± 

isLazyLoad
±± #
;
±±# $
	ParseView
≤≤ 
(
≤≤ 
isExpand
≤≤ 
:
≤≤ 

isLazyLoad
≤≤  *
,
≤≤* +
_context
≤≤, 4
:
≤≤4 5
_context
≤≤6 >
,
≤≤> ?
_transaction
≤≤@ L
:
≤≤L M
_transaction
≤≤N Z
)
≤≤Z [
;
≤≤[ \
}
≥≥ 	
	protected
∏∏ 
ViewModelBase
∏∏ 
(
∏∏  
)
∏∏  !
{
ππ 	
this
∫∫ 
.
∫∫ 
Model
∫∫ 
=
∫∫ 
	InitModel
∫∫ "
(
∫∫" #
)
∫∫# $
;
∫∫$ %
	ParseView
ªª 
(
ªª 
isExpand
ªª 
:
ªª 
false
ªª  %
)
ªª% &
;
ªª& '
}
ºº 	
}
øø 
}¿¿ à
ZC:\_workspace\github\mixcore\mix.heart\src\Mix.Heart\UI\Core\Controllers\BaseController.cs
	namespace 	
Mix
 
. 
UI 
. 
Base 
. 
Controllers !
{ 
public 

class 
BaseController 
:  !

Controller" ,
{ 
public 
BaseController 
( 
) 
{ 	
} 	
public&& 
override&& 
NotFoundResult&& &
NotFound&&' /
(&&/ 0
)&&0 1
{'' 	
return(( 
base(( 
.(( 
NotFound((  
(((  !
)((! "
;((" #
})) 	
}** 
}++ º"
VC:\_workspace\github\mixcore\mix.heart\src\Mix.Heart\UI\Core\SignalR\BaseSignalRHub.cs
	namespace 	
Mix
 
. 
UI 
. 
Core 
. 
SignalR 
{ 
public 

abstract 
class 
BaseSignalRHub (
:) *
Hub+ .
{ 
	protected 
static 
readonly !
List" &
<& '
SignalRClient' 4
>4 5
Users6 ;
=< =
new> A
ListB F
<F G
SignalRClientG T
>T U
(U V
)V W
;W X
public 
override 
Task 
OnConnectedAsync -
(- .
). /
{ 	!
UpdateGroupConnection !
(! "
)" #
;# $
return   
base   
.   
OnConnectedAsync   (
(  ( )
)  ) *
;  * +
}!! 	
public(( 
override(( 
Task(( 
OnDisconnectedAsync(( 0
(((0 1
	Exception((1 :
	exception((; D
)((D E
{)) 	
Users++ 
.++ 
	RemoveAll++ 
(++ 
u++ 
=>++  
u++! "
.++" #
ConnectionId++# /
==++0 2
Context++3 :
.++: ;
ConnectionId++; G
)++G H
;++H I
return,, 
base,, 
.,, 
OnDisconnectedAsync,, +
(,,+ ,
	exception,,, 5
),,5 6
;,,6 7
}-- 	
public22 
virtual22 
void22 !
UpdateGroupConnection22 1
(221 2
)222 3
{33 	
var44 
user44 
=44 
Users44 
.44 
Find44 !
(44! "
p44" #
=>44$ &
p44' (
.44( )
ConnectionId44) 5
==446 8
Context449 @
.44@ A
ConnectionId44A M
)44M N
;44N O
if55 
(55 
user55 
!=55 
null55 
)55 
{66 
}99 
}:: 	
public@@ 
virtual@@ 
void@@ )
UpdatePlayerConnectionIdAsync@@ 9
(@@9 :
string@@: @
playerId@@A I
)@@I J
{AA 	
varCC 
playerCC 
=CC 
UsersCC 
.CC 
FindCC #
(CC# $
pCC$ %
=>CC& (
pCC) *
.CC* +
UserIdCC+ 1
==CC2 4
playerIdCC5 =
)CC= >
;CC> ?
ifDD 
(DD 
playerDD 
!=DD 
nullDD 
&&DD !
playerDD" (
.DD( )
ConnectionIdDD) 5
!=DD6 8
ContextDD9 @
.DD@ A
ConnectionIdDDA M
)DDM N
{EE 
playerHH 
.HH 
ConnectionIdHH #
=HH$ %
ContextHH& -
.HH- .
ConnectionIdHH. :
;HH: ;
}JJ 
}KK 	
privateRR 
voidRR 

FailResultRR 
(RR  
dynamicRR  '
objDataRR( /
,RR/ 0
stringRR1 7
errorMsgRR8 @
)RR@ A
{SS 	
constTT 
stringTT 
responseKeyTT $
=TT% &
$strTT' /
;TT/ 0
constUU 
intUU 
statusUU 
=UU 
$numUU  
;UU  !
	ApiResultVV 
<VV 
dynamicVV 
>VV 
resultVV %
=VV& '
newVV( +
	ApiResultVV, 5
<VV5 6
dynamicVV6 =
>VV= >
(VV> ?
)VV? @
{WW 
ResponseKeyXX 
=XX 
responseKeyXX )
,XX) *
StatusYY 
=YY 
statusYY 
,YY  
DataZZ 
=ZZ 
objDataZZ 
,ZZ 
}\\ 
;\\ 
Clients]] 
.]] 
Client]] 
(]] 
Context]] "
.]]" #
ConnectionId]]# /
)]]/ 0
.]]0 1
	SendAsync]]1 :
(]]: ;
$str]]; K
,]]K L
result]]M S
)]]S T
;]]T U
}^^ 	
}__ 
}`` 